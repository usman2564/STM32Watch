
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004428  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800463c  0800463c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004644  08004644  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800464c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000088  080046d4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080046d4  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6c0  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023f9  00000000  00000000  0002e770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001146d  00000000  00000000  00032608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf98  00000000  00000000  00043a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066dc5  00000000  00000000  00050a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b77d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  000b7850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044d0 	.word	0x080044d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080044d0 	.word	0x080044d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	; 0x24
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f003 fc07 	bl	8003cb0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b32      	ldr	r3, [pc, #200]	; (800056c <MX_GPIO_Init+0xe0>)
 80004a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a6:	4b31      	ldr	r3, [pc, #196]	; (800056c <MX_GPIO_Init+0xe0>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	4b2f      	ldr	r3, [pc, #188]	; (800056c <MX_GPIO_Init+0xe0>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b2c      	ldr	r3, [pc, #176]	; (800056c <MX_GPIO_Init+0xe0>)
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <MX_GPIO_Init+0xe0>)
 80004c0:	2102      	movs	r1, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	4b29      	ldr	r3, [pc, #164]	; (800056c <MX_GPIO_Init+0xe0>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	2202      	movs	r2, #2
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_RESET);
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <MX_GPIO_Init+0xe4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 faae 	bl	8001a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_RESET);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	0059      	lsls	r1, r3, #1
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 faa6 	bl	8001a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D_C_Pin;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_C_GPIO_Port, &GPIO_InitStruct);
 8000508:	000c      	movs	r4, r1
 800050a:	187b      	adds	r3, r7, r1
 800050c:	4a18      	ldr	r2, [pc, #96]	; (8000570 <MX_GPIO_Init+0xe4>)
 800050e:	0019      	movs	r1, r3
 8000510:	0010      	movs	r0, r2
 8000512:	f001 f907 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_GPIO_Init+0xe8>)
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2201      	movs	r2, #1
 8000528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	000c      	movs	r4, r1
 800052c:	187b      	adds	r3, r7, r1
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <MX_GPIO_Init+0xe4>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f001 f8f6 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NOT_CS_Pin;
 8000538:	0021      	movs	r1, r4
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NOT_CS_GPIO_Port, &GPIO_InitStruct);
 8000554:	187a      	adds	r2, r7, r1
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f001 f8e1 	bl	8001724 <HAL_GPIO_Init>

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b009      	add	sp, #36	; 0x24
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000
 8000570:	50000400 	.word	0x50000400
 8000574:	00000c04 	.word	0x00000c04

08000578 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_I2C1_Init+0x74>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <MX_I2C1_Init+0x78>)
 8000580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_I2C1_Init+0x74>)
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x7c>)
 8000586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_I2C1_Init+0x74>)
 8000590:	2201      	movs	r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_I2C1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_I2C1_Init+0x74>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fa5d 	bl	8001a74 <HAL_I2C_Init>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005be:	f000 f9f1 	bl	80009a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_I2C1_Init+0x74>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fef2 	bl	80023b0 <HAL_I2CEx_ConfigAnalogFilter>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d0:	f000 f9e8 	bl	80009a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <MX_I2C1_Init+0x74>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 ff35 	bl	8002448 <HAL_I2CEx_ConfigDigitalFilter>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f000 f9df 	bl	80009a4 <Error_Handler>
  }

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000c8 	.word	0x200000c8
 80005f0:	40005400 	.word	0x40005400
 80005f4:	00707cbb 	.word	0x00707cbb

080005f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	230c      	movs	r3, #12
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f003 fb50 	bl	8003cb0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a18      	ldr	r2, [pc, #96]	; (8000678 <HAL_I2C_MspInit+0x80>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d12a      	bne.n	8000670 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_I2C_MspInit+0x84>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000632:	210c      	movs	r1, #12
 8000634:	187b      	adds	r3, r7, r1
 8000636:	22c0      	movs	r2, #192	; 0xc0
 8000638:	00d2      	lsls	r2, r2, #3
 800063a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2212      	movs	r2, #18
 8000640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2203      	movs	r2, #3
 800064c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2201      	movs	r2, #1
 8000652:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	187a      	adds	r2, r7, r1
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f001 f861 	bl	8001724 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0389      	lsls	r1, r1, #14
 800066c:	430a      	orrs	r2, r1
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b008      	add	sp, #32
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40005400 	.word	0x40005400
 800067c:	40021000 	.word	0x40021000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	b087      	sub	sp, #28
 8000684:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 ff07 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f919 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f7ff fefd 	bl	800048c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000692:	f7ff ff71 	bl	8000578 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000696:	f000 fd53 	bl	8001140 <MX_SPI1_Init>
  MX_TIM21_Init();
 800069a:	f000 fe35 	bl	8001308 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim21);
 800069e:	4b83      	ldr	r3, [pc, #524]	; (80008ac <main+0x22c>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f003 f8a1 	bl	80037e8 <HAL_TIM_Base_Start>
  OLED_init();
 80006a6:	f000 f981 	bl	80009ac <OLED_init>
  RTC_init(0x35, 0x23);
 80006aa:	2123      	movs	r1, #35	; 0x23
 80006ac:	2035      	movs	r0, #53	; 0x35
 80006ae:	f000 fc5b 	bl	8000f68 <RTC_init>

  HAL_Delay(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f000 ff60 	bl	8001578 <HAL_Delay>

  OLED_setFillColor(0, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fa6f 	bl	8000ba0 <OLED_setFillColor>
  HAL_Delay(100);
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f000 ff58 	bl	8001578 <HAL_Delay>
  OLED_drawRect(0, 0, 95, 63, OLED_FILL_TRUE);
 80006c8:	2301      	movs	r3, #1
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	233f      	movs	r3, #63	; 0x3f
 80006ce:	225f      	movs	r2, #95	; 0x5f
 80006d0:	2100      	movs	r1, #0
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 faa0 	bl	8000c18 <OLED_drawRect>
  HAL_Delay(100);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f000 ff4d 	bl	8001578 <HAL_Delay>
  OLED_setFillColor(40, 40, 40);
 80006de:	2228      	movs	r2, #40	; 0x28
 80006e0:	2128      	movs	r1, #40	; 0x28
 80006e2:	2028      	movs	r0, #40	; 0x28
 80006e4:	f000 fa5c 	bl	8000ba0 <OLED_setFillColor>
  HAL_Delay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 ff45 	bl	8001578 <HAL_Delay>
  OLED_drawRect(12, 18, 83, 44, OLED_FILL_FALSE);
 80006ee:	2300      	movs	r3, #0
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	232c      	movs	r3, #44	; 0x2c
 80006f4:	2253      	movs	r2, #83	; 0x53
 80006f6:	2112      	movs	r1, #18
 80006f8:	200c      	movs	r0, #12
 80006fa:	f000 fa8d 	bl	8000c18 <OLED_drawRect>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	RTC_getTime(time_values);
 80006fe:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <main+0x230>)
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fc63 	bl	8000fcc <RTC_getTime>
	conv_BCD(time_values);
 8000706:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <main+0x230>)
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fc79 	bl	8001000 <conv_BCD>
	sprintf(string_buffer, "%d%d:%d%d:%d%d", time_values[4] , time_values[5], time_values[2], time_values[3], time_values[0], time_values[1]);
 800070e:	4b68      	ldr	r3, [pc, #416]	; (80008b0 <main+0x230>)
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	001e      	movs	r6, r3
 8000714:	4b66      	ldr	r3, [pc, #408]	; (80008b0 <main+0x230>)
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <main+0x230>)
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	001a      	movs	r2, r3
 8000720:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <main+0x230>)
 8000722:	78db      	ldrb	r3, [r3, #3]
 8000724:	001c      	movs	r4, r3
 8000726:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <main+0x230>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	001d      	movs	r5, r3
 800072c:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <main+0x230>)
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	4960      	ldr	r1, [pc, #384]	; (80008b4 <main+0x234>)
 8000732:	4861      	ldr	r0, [pc, #388]	; (80008b8 <main+0x238>)
 8000734:	9303      	str	r3, [sp, #12]
 8000736:	9502      	str	r5, [sp, #8]
 8000738:	9401      	str	r4, [sp, #4]
 800073a:	9200      	str	r2, [sp, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	0032      	movs	r2, r6
 8000740:	f003 fabe 	bl	8003cc0 <siprintf>
	OLED_drawString(string_buffer, 16, 24);
 8000744:	4b5c      	ldr	r3, [pc, #368]	; (80008b8 <main+0x238>)
 8000746:	2218      	movs	r2, #24
 8000748:	2110      	movs	r1, #16
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fb40 	bl	8000dd0 <OLED_drawString>

	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET)
 8000750:	e0a2      	b.n	8000898 <main+0x218>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4a59      	ldr	r2, [pc, #356]	; (80008bc <main+0x23c>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f001 f950 	bl	8001a00 <HAL_GPIO_ReadPin>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d142      	bne.n	80007ea <main+0x16a>
		{
			time_values[3]++;
 8000764:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <main+0x230>)
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	3301      	adds	r3, #1
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <main+0x230>)
 800076e:	70da      	strb	r2, [r3, #3]

			if(time_values[3] > 9)
 8000770:	4b4f      	ldr	r3, [pc, #316]	; (80008b0 <main+0x230>)
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	2b09      	cmp	r3, #9
 8000776:	d90f      	bls.n	8000798 <main+0x118>
			{
				time_values[3] = 0;
 8000778:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <main+0x230>)
 800077a:	2200      	movs	r2, #0
 800077c:	70da      	strb	r2, [r3, #3]
				time_values[2]++;
 800077e:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <main+0x230>)
 8000780:	789b      	ldrb	r3, [r3, #2]
 8000782:	3301      	adds	r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b4a      	ldr	r3, [pc, #296]	; (80008b0 <main+0x230>)
 8000788:	709a      	strb	r2, [r3, #2]
				if(time_values[2] > 5)
 800078a:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <main+0x230>)
 800078c:	789b      	ldrb	r3, [r3, #2]
 800078e:	2b05      	cmp	r3, #5
 8000790:	d902      	bls.n	8000798 <main+0x118>
					time_values[2] = 0;
 8000792:	4b47      	ldr	r3, [pc, #284]	; (80008b0 <main+0x230>)
 8000794:	2200      	movs	r2, #0
 8000796:	709a      	strb	r2, [r3, #2]
			}
			sprintf(string_buffer, "%d%d:%d%d:%d%d", time_values[4] , time_values[5], time_values[2], time_values[3], time_values[0], time_values[1]);
 8000798:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <main+0x230>)
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	001e      	movs	r6, r3
 800079e:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <main+0x230>)
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <main+0x230>)
 80007a6:	789b      	ldrb	r3, [r3, #2]
 80007a8:	001a      	movs	r2, r3
 80007aa:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <main+0x230>)
 80007ac:	78db      	ldrb	r3, [r3, #3]
 80007ae:	001c      	movs	r4, r3
 80007b0:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <main+0x230>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	001d      	movs	r5, r3
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <main+0x230>)
 80007b8:	785b      	ldrb	r3, [r3, #1]
 80007ba:	493e      	ldr	r1, [pc, #248]	; (80008b4 <main+0x234>)
 80007bc:	483e      	ldr	r0, [pc, #248]	; (80008b8 <main+0x238>)
 80007be:	9303      	str	r3, [sp, #12]
 80007c0:	9502      	str	r5, [sp, #8]
 80007c2:	9401      	str	r4, [sp, #4]
 80007c4:	9200      	str	r2, [sp, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	0032      	movs	r2, r6
 80007ca:	f003 fa79 	bl	8003cc0 <siprintf>
			OLED_drawString(string_buffer, 16, 24);
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <main+0x238>)
 80007d0:	2218      	movs	r2, #24
 80007d2:	2110      	movs	r1, #16
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fafb 	bl	8000dd0 <OLED_drawString>
			RTC_updateMins(time_values[2], time_values[3]);
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <main+0x230>)
 80007dc:	789a      	ldrb	r2, [r3, #2]
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <main+0x230>)
 80007e0:	78db      	ldrb	r3, [r3, #3]
 80007e2:	0019      	movs	r1, r3
 80007e4:	0010      	movs	r0, r2
 80007e6:	f000 fc57 	bl	8001098 <RTC_updateMins>
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET)
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	4a33      	ldr	r2, [pc, #204]	; (80008bc <main+0x23c>)
 80007f0:	0019      	movs	r1, r3
 80007f2:	0010      	movs	r0, r2
 80007f4:	f001 f904 	bl	8001a00 <HAL_GPIO_ReadPin>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d14d      	bne.n	8000898 <main+0x218>
		{
			time_values[5]++;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <main+0x230>)
 80007fe:	795b      	ldrb	r3, [r3, #5]
 8000800:	3301      	adds	r3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <main+0x230>)
 8000806:	715a      	strb	r2, [r3, #5]

			if(time_values[5] > 9 && time_values[4] != 2)
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <main+0x230>)
 800080a:	795b      	ldrb	r3, [r3, #5]
 800080c:	2b09      	cmp	r3, #9
 800080e:	d90c      	bls.n	800082a <main+0x1aa>
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <main+0x230>)
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d008      	beq.n	800082a <main+0x1aa>
			{
				time_values[5] = 0;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <main+0x230>)
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]
				time_values[4]++;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <main+0x230>)
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <main+0x230>)
 8000828:	711a      	strb	r2, [r3, #4]
			}

			if(time_values[5] > 3 && time_values[4] == 2)
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <main+0x230>)
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d909      	bls.n	8000846 <main+0x1c6>
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <main+0x230>)
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d105      	bne.n	8000846 <main+0x1c6>
			{
				time_values[5] = 0;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <main+0x230>)
 800083c:	2200      	movs	r2, #0
 800083e:	715a      	strb	r2, [r3, #5]
				time_values[4] = 0;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <main+0x230>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
			}

			sprintf(string_buffer, "%d%d:%d%d:%d%d", time_values[4] , time_values[5], time_values[2], time_values[3], time_values[0], time_values[1]);
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <main+0x230>)
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	001e      	movs	r6, r3
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <main+0x230>)
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <main+0x230>)
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	001a      	movs	r2, r3
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <main+0x230>)
 800085a:	78db      	ldrb	r3, [r3, #3]
 800085c:	001c      	movs	r4, r3
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <main+0x230>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	001d      	movs	r5, r3
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <main+0x230>)
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	4912      	ldr	r1, [pc, #72]	; (80008b4 <main+0x234>)
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <main+0x238>)
 800086c:	9303      	str	r3, [sp, #12]
 800086e:	9502      	str	r5, [sp, #8]
 8000870:	9401      	str	r4, [sp, #4]
 8000872:	9200      	str	r2, [sp, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	0032      	movs	r2, r6
 8000878:	f003 fa22 	bl	8003cc0 <siprintf>
			OLED_drawString(string_buffer, 16, 24);
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <main+0x238>)
 800087e:	2218      	movs	r2, #24
 8000880:	2110      	movs	r1, #16
 8000882:	0018      	movs	r0, r3
 8000884:	f000 faa4 	bl	8000dd0 <OLED_drawString>
			RTC_updateHours(time_values[4], time_values[5]);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <main+0x230>)
 800088a:	791a      	ldrb	r2, [r3, #4]
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <main+0x230>)
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	0019      	movs	r1, r3
 8000892:	0010      	movs	r0, r2
 8000894:	f000 fc2a 	bl	80010ec <RTC_updateHours>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET)
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <main+0x23c>)
 800089a:	2104      	movs	r1, #4
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f8af 	bl	8001a00 <HAL_GPIO_ReadPin>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d100      	bne.n	80008a8 <main+0x228>
 80008a6:	e754      	b.n	8000752 <main+0xd2>
  {
 80008a8:	e729      	b.n	80006fe <main+0x7e>
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000178 	.word	0x20000178
 80008b0:	200000a4 	.word	0x200000a4
 80008b4:	080044e8 	.word	0x080044e8
 80008b8:	20000114 	.word	0x20000114
 80008bc:	50000400 	.word	0x50000400

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b099      	sub	sp, #100	; 0x64
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	242c      	movs	r4, #44	; 0x2c
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	0018      	movs	r0, r3
 80008cc:	2334      	movs	r3, #52	; 0x34
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f003 f9ed 	bl	8003cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d6:	2318      	movs	r3, #24
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f003 f9e5 	bl	8003cb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e6:	003b      	movs	r3, r7
 80008e8:	0018      	movs	r0, r3
 80008ea:	2318      	movs	r3, #24
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f003 f9de 	bl	8003cb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <SystemClock_Config+0xdc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <SystemClock_Config+0xe0>)
 80008fa:	401a      	ands	r2, r3
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <SystemClock_Config+0xdc>)
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	0109      	lsls	r1, r1, #4
 8000902:	430a      	orrs	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000906:	0021      	movs	r1, r4
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2202      	movs	r2, #2
 800090c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2210      	movs	r2, #16
 8000918:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2202      	movs	r2, #2
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	02d2      	lsls	r2, r2, #11
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	03d2      	lsls	r2, r2, #15
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	187b      	adds	r3, r7, r1
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fdd1 	bl	80024e0 <HAL_RCC_OscConfig>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000942:	f000 f82f 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	2118      	movs	r1, #24
 8000948:	187b      	adds	r3, r7, r1
 800094a:	220f      	movs	r2, #15
 800094c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2203      	movs	r2, #3
 8000952:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2101      	movs	r1, #1
 800096a:	0018      	movs	r0, r3
 800096c:	f002 f938 	bl	8002be0 <HAL_RCC_ClockConfig>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000974:	f000 f816 	bl	80009a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000978:	003b      	movs	r3, r7
 800097a:	2208      	movs	r2, #8
 800097c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800097e:	003b      	movs	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	003b      	movs	r3, r7
 8000986:	0018      	movs	r0, r3
 8000988:	f002 fb12 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000990:	f000 f808 	bl	80009a4 <Error_Handler>
  }
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b019      	add	sp, #100	; 0x64
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40007000 	.word	0x40007000
 80009a0:	ffffe7ff 	.word	0xffffe7ff

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009aa:	e7fe      	b.n	80009aa <Error_Handler+0x6>

080009ac <OLED_init>:
uint8_t OLED_DRAW_LINE_BUFFER[DRAW_LINE_BUFFER_SIZE] = {0, 0, 0, 0, 0, 0, 0};
uint8_t OLED_SETCOLUMN[] = {0x15, 0x00, 95};
uint8_t OLED_SETROW[] = {0x75, 0x00, 63};

void OLED_init()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

	//active low CS pin should default high
	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_SET);
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	0059      	lsls	r1, r3, #1
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	2201      	movs	r2, #1
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 f83d 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009c0:	4b50      	ldr	r3, [pc, #320]	; (8000b04 <OLED_init+0x158>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	2101      	movs	r1, #1
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 f837 	bl	8001a3a <HAL_GPIO_WritePin>

	OLED_sendCommand(&hspi1, &OLED_OFF, 1);
 80009cc:	494e      	ldr	r1, [pc, #312]	; (8000b08 <OLED_init+0x15c>)
 80009ce:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <OLED_init+0x160>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f8bc 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 80009d8:	2064      	movs	r0, #100	; 0x64
 80009da:	f000 fdcd 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_ADDRESSMODE, 2);
 80009de:	494c      	ldr	r1, [pc, #304]	; (8000b10 <OLED_init+0x164>)
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <OLED_init+0x160>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 f8b3 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f000 fdc4 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_STARTLINE, 2);
 80009f0:	4948      	ldr	r1, [pc, #288]	; (8000b14 <OLED_init+0x168>)
 80009f2:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <OLED_init+0x160>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f8aa 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f000 fdbb 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_OFFSET, 2);
 8000a02:	4945      	ldr	r1, [pc, #276]	; (8000b18 <OLED_init+0x16c>)
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <OLED_init+0x160>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 f8a1 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a0e:	2064      	movs	r0, #100	; 0x64
 8000a10:	f000 fdb2 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, &OLED_NORMALMODE, 1);
 8000a14:	4941      	ldr	r1, [pc, #260]	; (8000b1c <OLED_init+0x170>)
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <OLED_init+0x160>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f898 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a20:	2064      	movs	r0, #100	; 0x64
 8000a22:	f000 fda9 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_SETMULTIPLEX, 2);
 8000a26:	493e      	ldr	r1, [pc, #248]	; (8000b20 <OLED_init+0x174>)
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <OLED_init+0x160>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 f88f 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f000 fda0 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_MASTER_CONFIG, 2);
 8000a38:	493a      	ldr	r1, [pc, #232]	; (8000b24 <OLED_init+0x178>)
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <OLED_init+0x160>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f886 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f000 fd97 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_POWERMODE, 2);
 8000a4a:	4937      	ldr	r1, [pc, #220]	; (8000b28 <OLED_init+0x17c>)
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <OLED_init+0x160>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 f87d 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f000 fd8e 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_PRECHARGE, 2);
 8000a5c:	4933      	ldr	r1, [pc, #204]	; (8000b2c <OLED_init+0x180>)
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <OLED_init+0x160>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f874 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a68:	2064      	movs	r0, #100	; 0x64
 8000a6a:	f000 fd85 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_SETFREQ, 2);
 8000a6e:	4930      	ldr	r1, [pc, #192]	; (8000b30 <OLED_init+0x184>)
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <OLED_init+0x160>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 f86b 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	f000 fd7c 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_PRECHARGEA, 2);
 8000a80:	492c      	ldr	r1, [pc, #176]	; (8000b34 <OLED_init+0x188>)
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <OLED_init+0x160>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f862 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f000 fd73 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_PRECHARGEB, 2);
 8000a92:	4929      	ldr	r1, [pc, #164]	; (8000b38 <OLED_init+0x18c>)
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <OLED_init+0x160>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 f859 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	; 0x64
 8000aa0:	f000 fd6a 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_PRECHARGEC, 2);
 8000aa4:	4925      	ldr	r1, [pc, #148]	; (8000b3c <OLED_init+0x190>)
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <OLED_init+0x160>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 f850 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000ab0:	2064      	movs	r0, #100	; 0x64
 8000ab2:	f000 fd61 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_PRECHARGELEVEL, 2);
 8000ab6:	4922      	ldr	r1, [pc, #136]	; (8000b40 <OLED_init+0x194>)
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <OLED_init+0x160>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 f847 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f000 fd58 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_MASTER_CURRENT, 2);
 8000ac8:	491e      	ldr	r1, [pc, #120]	; (8000b44 <OLED_init+0x198>)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <OLED_init+0x160>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f83e 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000ad4:	2064      	movs	r0, #100	; 0x64
 8000ad6:	f000 fd4f 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_CONTRAST, 6);
 8000ada:	491b      	ldr	r1, [pc, #108]	; (8000b48 <OLED_init+0x19c>)
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <OLED_init+0x160>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 f835 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f000 fd46 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, &OLED_ON, 1);
 8000aec:	4917      	ldr	r1, [pc, #92]	; (8000b4c <OLED_init+0x1a0>)
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <OLED_init+0x160>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f82c 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f000 fd3d 	bl	8001578 <HAL_Delay>

}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	50000400 	.word	0x50000400
 8000b08:	080045a8 	.word	0x080045a8
 8000b0c:	20000120 	.word	0x20000120
 8000b10:	080045ac 	.word	0x080045ac
 8000b14:	080045b0 	.word	0x080045b0
 8000b18:	080045b4 	.word	0x080045b4
 8000b1c:	080045b6 	.word	0x080045b6
 8000b20:	080045b8 	.word	0x080045b8
 8000b24:	080045bc 	.word	0x080045bc
 8000b28:	080045c0 	.word	0x080045c0
 8000b2c:	080045c4 	.word	0x080045c4
 8000b30:	080045c8 	.word	0x080045c8
 8000b34:	080045cc 	.word	0x080045cc
 8000b38:	080045d0 	.word	0x080045d0
 8000b3c:	080045d4 	.word	0x080045d4
 8000b40:	080045d8 	.word	0x080045d8
 8000b44:	080045dc 	.word	0x080045dc
 8000b48:	080045e0 	.word	0x080045e0
 8000b4c:	080045e6 	.word	0x080045e6

08000b50 <OLED_sendCommand>:

void OLED_sendCommand(SPI_HandleTypeDef *hspi, uint8_t *OLED_COMMAND, uint8_t number_of_bytes)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_RESET);
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	0059      	lsls	r1, r3, #1
 8000b62:	23a0      	movs	r3, #160	; 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	2200      	movs	r2, #0
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 ff66 	bl	8001a3a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, OLED_COMMAND, number_of_bytes, HAL_MAX_DELAY);
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	2301      	movs	r3, #1
 8000b76:	425b      	negs	r3, r3
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f002 fbc9 	bl	8003312 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_SET);
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	0059      	lsls	r1, r3, #1
 8000b84:	23a0      	movs	r3, #160	; 0xa0
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	2201      	movs	r2, #1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 ff55 	bl	8001a3a <HAL_GPIO_WritePin>
	delay_micros(100);
 8000b90:	2064      	movs	r0, #100	; 0x64
 8000b92:	f000 fc27 	bl	80013e4 <delay_micros>

}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b004      	add	sp, #16
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <OLED_setFillColor>:

void OLED_setFillColor(uint8_t colorC, uint8_t colorB, uint8_t colorA)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0004      	movs	r4, r0
 8000ba8:	0008      	movs	r0, r1
 8000baa:	0011      	movs	r1, r2
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	1c22      	adds	r2, r4, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	1c02      	adds	r2, r0, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	1d7b      	adds	r3, r7, #5
 8000bba:	1c0a      	adds	r2, r1, #0
 8000bbc:	701a      	strb	r2, [r3, #0]

	OLED_DRAW_RECTANGLE_BUFFER[4] = colorC;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <OLED_setFillColor+0x70>)
 8000bc0:	1dfa      	adds	r2, r7, #7
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	711a      	strb	r2, [r3, #4]
	OLED_DRAW_RECTANGLE_BUFFER[5] = colorB;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <OLED_setFillColor+0x70>)
 8000bc8:	1dba      	adds	r2, r7, #6
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	715a      	strb	r2, [r3, #5]
	OLED_DRAW_RECTANGLE_BUFFER[6] = colorA;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <OLED_setFillColor+0x70>)
 8000bd0:	1d7a      	adds	r2, r7, #5
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	719a      	strb	r2, [r3, #6]


	OLED_DRAW_RECTANGLE_BUFFER[7] = colorC;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <OLED_setFillColor+0x70>)
 8000bd8:	1dfa      	adds	r2, r7, #7
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	71da      	strb	r2, [r3, #7]
	OLED_DRAW_RECTANGLE_BUFFER[8] = colorB;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <OLED_setFillColor+0x70>)
 8000be0:	1dba      	adds	r2, r7, #6
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	721a      	strb	r2, [r3, #8]
	OLED_DRAW_RECTANGLE_BUFFER[9] = colorA;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <OLED_setFillColor+0x70>)
 8000be8:	1d7a      	adds	r2, r7, #5
 8000bea:	7812      	ldrb	r2, [r2, #0]
 8000bec:	725a      	strb	r2, [r3, #9]

	OLED_DRAW_LINE_BUFFER[4] = colorC;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <OLED_setFillColor+0x74>)
 8000bf0:	1dfa      	adds	r2, r7, #7
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	711a      	strb	r2, [r3, #4]
	OLED_DRAW_LINE_BUFFER[5] = colorB;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <OLED_setFillColor+0x74>)
 8000bf8:	1dba      	adds	r2, r7, #6
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	715a      	strb	r2, [r3, #5]
	OLED_DRAW_LINE_BUFFER[6] = colorA;
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <OLED_setFillColor+0x74>)
 8000c00:	1d7a      	adds	r2, r7, #5
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	719a      	strb	r2, [r3, #6]

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b003      	add	sp, #12
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	20000004 	.word	0x20000004
 8000c14:	200000ac 	.word	0x200000ac

08000c18 <OLED_drawRect>:

void OLED_drawRect(uint8_t startX, uint8_t startY, uint8_t endX, uint8_t endY, uint8_t fill_flag)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0005      	movs	r5, r0
 8000c20:	000c      	movs	r4, r1
 8000c22:	0010      	movs	r0, r2
 8000c24:	0019      	movs	r1, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	1c2a      	adds	r2, r5, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	1c22      	adds	r2, r4, #0
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	1d7b      	adds	r3, r7, #5
 8000c34:	1c02      	adds	r2, r0, #0
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	1c0a      	adds	r2, r1, #0
 8000c3c:	701a      	strb	r2, [r3, #0]

	OLED_DRAW_RECTANGLE_BUFFER[0] = startX;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <OLED_drawRect+0x98>)
 8000c40:	1dfa      	adds	r2, r7, #7
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	701a      	strb	r2, [r3, #0]
	OLED_DRAW_RECTANGLE_BUFFER[1] = startY;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <OLED_drawRect+0x98>)
 8000c48:	1dba      	adds	r2, r7, #6
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	705a      	strb	r2, [r3, #1]
	OLED_DRAW_RECTANGLE_BUFFER[2] = endX;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <OLED_drawRect+0x98>)
 8000c50:	1d7a      	adds	r2, r7, #5
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	709a      	strb	r2, [r3, #2]
	OLED_DRAW_RECTANGLE_BUFFER[3] = endY;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <OLED_drawRect+0x98>)
 8000c58:	1d3a      	adds	r2, r7, #4
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	70da      	strb	r2, [r3, #3]


	if(fill_flag == OLED_FILL_TRUE)
 8000c5e:	2318      	movs	r3, #24
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d103      	bne.n	8000c70 <OLED_drawRect+0x58>
		OLED_RECTANGLE_FILL_CONFIG[1] = 0x01;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <OLED_drawRect+0x9c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	705a      	strb	r2, [r3, #1]
 8000c6e:	e002      	b.n	8000c76 <OLED_drawRect+0x5e>
	else
		OLED_RECTANGLE_FILL_CONFIG[1] = 0x00;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <OLED_drawRect+0x9c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	705a      	strb	r2, [r3, #1]

	OLED_sendCommand(&hspi1, OLED_RECTANGLE_FILL_CONFIG, 2);
 8000c76:	490f      	ldr	r1, [pc, #60]	; (8000cb4 <OLED_drawRect+0x9c>)
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <OLED_drawRect+0xa0>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff67 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000c82:	2064      	movs	r0, #100	; 0x64
 8000c84:	f000 fc78 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, &OLED_DRAW_RECTANGLE, 1);
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <OLED_drawRect+0xa4>)
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <OLED_drawRect+0xa0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff5e 	bl	8000b50 <OLED_sendCommand>
	HAL_Delay(100);
 8000c94:	2064      	movs	r0, #100	; 0x64
 8000c96:	f000 fc6f 	bl	8001578 <HAL_Delay>
	OLED_sendCommand(&hspi1, OLED_DRAW_RECTANGLE_BUFFER, DRAW_RECTANGLE_BUFFER_SIZE);
 8000c9a:	4905      	ldr	r1, [pc, #20]	; (8000cb0 <OLED_drawRect+0x98>)
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <OLED_drawRect+0xa0>)
 8000c9e:	220a      	movs	r2, #10
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff55 	bl	8000b50 <OLED_sendCommand>

}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bdb0      	pop	{r4, r5, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000120 	.word	0x20000120
 8000cbc:	080045e7 	.word	0x080045e7

08000cc0 <OLED_setCursor>:

void OLED_setCursor(uint8_t x, uint8_t y)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	1c0a      	adds	r2, r1, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
	OLED_SETCOLUMN[1] = x;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <OLED_setCursor+0x5c>)
 8000cd4:	1dfa      	adds	r2, r7, #7
 8000cd6:	7812      	ldrb	r2, [r2, #0]
 8000cd8:	705a      	strb	r2, [r3, #1]
	OLED_SETCOLUMN[2] = x+CHAR_WIDTH-1;
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	3307      	adds	r3, #7
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <OLED_setCursor+0x5c>)
 8000ce4:	709a      	strb	r2, [r3, #2]
	OLED_SETROW[1] = y;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <OLED_setCursor+0x60>)
 8000ce8:	1dba      	adds	r2, r7, #6
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	705a      	strb	r2, [r3, #1]
	OLED_SETROW[2] = y+CHAR_HEIGHT-1;
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	330f      	adds	r3, #15
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <OLED_setCursor+0x60>)
 8000cf8:	709a      	strb	r2, [r3, #2]

	OLED_sendCommand(&hspi1, OLED_SETCOLUMN, 3);
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <OLED_setCursor+0x5c>)
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <OLED_setCursor+0x64>)
 8000cfe:	2203      	movs	r2, #3
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ff25 	bl	8000b50 <OLED_sendCommand>
	OLED_sendCommand(&hspi1, OLED_SETROW, 3);
 8000d06:	4906      	ldr	r1, [pc, #24]	; (8000d20 <OLED_setCursor+0x60>)
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <OLED_setCursor+0x64>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ff1f 	bl	8000b50 <OLED_sendCommand>
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000010 	.word	0x20000010
 8000d20:	20000014 	.word	0x20000014
 8000d24:	20000120 	.word	0x20000120

08000d28 <OLED_drawChar_CMD>:


void OLED_drawChar_CMD(char c)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < CHAR_WIDTH; i++)
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e037      	b.n	8000dae <OLED_drawChar_CMD+0x86>
	{

		for(uint8_t j = 0; j < CHAR_HEIGHT; j++)
 8000d3e:	230e      	movs	r3, #14
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e027      	b.n	8000d98 <OLED_drawChar_CMD+0x70>
		{
			if(((charMap[c - 0x30][i])<<j) & (0x8000))
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3b30      	subs	r3, #48	; 0x30
 8000d4e:	0019      	movs	r1, r3
 8000d50:	230f      	movs	r3, #15
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <OLED_drawChar_CMD+0x98>)
 8000d58:	00c9      	lsls	r1, r1, #3
 8000d5a:	188a      	adds	r2, r1, r2
 8000d5c:	0052      	lsls	r2, r2, #1
 8000d5e:	5ad3      	ldrh	r3, [r2, r3]
 8000d60:	001a      	movs	r2, r3
 8000d62:	230e      	movs	r3, #14
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d006      	beq.n	8000d80 <OLED_drawChar_CMD+0x58>
				OLED_sendCommand(&hspi1, OLED_FONTCOLOR, 2);
 8000d72:	4914      	ldr	r1, [pc, #80]	; (8000dc4 <OLED_drawChar_CMD+0x9c>)
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <OLED_drawChar_CMD+0xa0>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fee9 	bl	8000b50 <OLED_sendCommand>
 8000d7e:	e005      	b.n	8000d8c <OLED_drawChar_CMD+0x64>
			else
				OLED_sendCommand(&hspi1, OLED_BACKCOLOR, 2);
 8000d80:	4912      	ldr	r1, [pc, #72]	; (8000dcc <OLED_drawChar_CMD+0xa4>)
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <OLED_drawChar_CMD+0xa0>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fee2 	bl	8000b50 <OLED_sendCommand>
		for(uint8_t j = 0; j < CHAR_HEIGHT; j++)
 8000d8c:	210e      	movs	r1, #14
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	3201      	adds	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	230e      	movs	r3, #14
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d9d2      	bls.n	8000d48 <OLED_drawChar_CMD+0x20>
	for(uint8_t i = 0; i < CHAR_WIDTH; i++)
 8000da2:	210f      	movs	r1, #15
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	3201      	adds	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	230f      	movs	r3, #15
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d9c2      	bls.n	8000d3e <OLED_drawChar_CMD+0x16>
		}

	}

}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b004      	add	sp, #16
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	080044f8 	.word	0x080044f8
 8000dc4:	080045e8 	.word	0x080045e8
 8000dc8:	20000120 	.word	0x20000120
 8000dcc:	080045ec 	.word	0x080045ec

08000dd0 <OLED_drawString>:

void OLED_drawString(char *string_buffer, uint8_t x, uint8_t y)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	0008      	movs	r0, r1
 8000dda:	0011      	movs	r1, r2
 8000ddc:	1cfb      	adds	r3, r7, #3
 8000dde:	1c02      	adds	r2, r0, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	1cbb      	adds	r3, r7, #2
 8000de4:	1c0a      	adds	r2, r1, #0
 8000de6:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
	while(string_buffer[i] != 0)
 8000df0:	e019      	b.n	8000e26 <OLED_drawString+0x56>
	{
		OLED_drawChar(x+(i*CHAR_WIDTH), y, string_buffer[i]);
 8000df2:	210f      	movs	r1, #15
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	1cfb      	adds	r3, r7, #3
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	18d3      	adds	r3, r2, r3
 8000e02:	b2d8      	uxtb	r0, r3
 8000e04:	000c      	movs	r4, r1
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	1cbb      	adds	r3, r7, #2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	0019      	movs	r1, r3
 8000e16:	f000 f813 	bl	8000e40 <OLED_drawChar>
		i++;
 8000e1a:	0021      	movs	r1, r4
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	3201      	adds	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
	while(string_buffer[i] != 0)
 8000e26:	230f      	movs	r3, #15
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1dd      	bne.n	8000df2 <OLED_drawString+0x22>
	}
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b005      	add	sp, #20
 8000e3c:	bd90      	pop	{r4, r7, pc}
	...

08000e40 <OLED_drawChar>:

void OLED_drawChar(uint8_t x, uint8_t y, char c)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0004      	movs	r4, r0
 8000e48:	0008      	movs	r0, r1
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	1c22      	adds	r2, r4, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	1c02      	adds	r2, r0, #0
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	1d7b      	adds	r3, r7, #5
 8000e5a:	1c0a      	adds	r2, r1, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
	OLED_setCursor(x, y);
 8000e5e:	1dbb      	adds	r3, r7, #6
 8000e60:	781a      	ldrb	r2, [r3, #0]
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff ff29 	bl	8000cc0 <OLED_setCursor>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <OLED_drawChar+0x58>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	2101      	movs	r1, #1
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fde0 	bl	8001a3a <HAL_GPIO_WritePin>
	OLED_drawChar_CMD(c);
 8000e7a:	1d7b      	adds	r3, r7, #5
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff ff52 	bl	8000d28 <OLED_drawChar_CMD>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <OLED_drawChar+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	2101      	movs	r1, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fdd5 	bl	8001a3a <HAL_GPIO_WritePin>
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b003      	add	sp, #12
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	50000400 	.word	0x50000400

08000e9c <RTC_getSeconds>:
#include "i2c.h"

uint8_t i2c_data_buf[5] = {0};

uint8_t RTC_getSeconds()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af02      	add	r7, sp, #8

	i2c_data_buf[0] = RTC_SEC_REG_ADDR;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <RTC_getSeconds+0x3c>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <RTC_getSeconds+0x3c>)
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <RTC_getSeconds+0x40>)
 8000eac:	2301      	movs	r3, #1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	21a2      	movs	r1, #162	; 0xa2
 8000eb6:	f000 fe73 	bl	8001ba0 <HAL_I2C_Master_Transmit>
	//check return
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <RTC_getSeconds+0x3c>)
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <RTC_getSeconds+0x40>)
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	425b      	negs	r3, r3
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	21a2      	movs	r1, #162	; 0xa2
 8000ec8:	f000 ff72 	bl	8001db0 <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <RTC_getSeconds+0x3c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	200000b4 	.word	0x200000b4
 8000edc:	200000c8 	.word	0x200000c8

08000ee0 <RTC_getMins>:

uint8_t RTC_getMins()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af02      	add	r7, sp, #8

	i2c_data_buf[0] = RTC_MIN_REG_ADDR;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <RTC_getMins+0x3c>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <RTC_getMins+0x3c>)
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <RTC_getMins+0x40>)
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	21a2      	movs	r1, #162	; 0xa2
 8000efa:	f000 fe51 	bl	8001ba0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000efe:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <RTC_getMins+0x3c>)
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <RTC_getMins+0x40>)
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	21a2      	movs	r1, #162	; 0xa2
 8000f0c:	f000 ff50 	bl	8001db0 <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <RTC_getMins+0x3c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]

}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	200000b4 	.word	0x200000b4
 8000f20:	200000c8 	.word	0x200000c8

08000f24 <RTC_getHours>:

uint8_t RTC_getHours()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af02      	add	r7, sp, #8

	i2c_data_buf[0] = RTC_HOUR_REG_ADDR;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <RTC_getHours+0x3c>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <RTC_getHours+0x3c>)
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <RTC_getHours+0x40>)
 8000f34:	2301      	movs	r3, #1
 8000f36:	425b      	negs	r3, r3
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	21a2      	movs	r1, #162	; 0xa2
 8000f3e:	f000 fe2f 	bl	8001ba0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <RTC_getHours+0x3c>)
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <RTC_getHours+0x40>)
 8000f46:	2301      	movs	r3, #1
 8000f48:	425b      	negs	r3, r3
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	21a2      	movs	r1, #162	; 0xa2
 8000f50:	f000 ff2e 	bl	8001db0 <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <RTC_getHours+0x3c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]

}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	200000b4 	.word	0x200000b4
 8000f64:	200000c8 	.word	0x200000c8

08000f68 <RTC_init>:

void RTC_init(uint8_t current_min_BCD, uint8_t current_hour_BCD)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	0002      	movs	r2, r0
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	1dbb      	adds	r3, r7, #6
 8000f76:	1c0a      	adds	r2, r1, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[0] = RTC_MIN_REG_ADDR;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <RTC_init+0x5c>)
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_min_BCD;
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <RTC_init+0x5c>)
 8000f82:	1dfa      	adds	r2, r7, #7
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <RTC_init+0x5c>)
 8000f8a:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <RTC_init+0x60>)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	425b      	negs	r3, r3
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	21a2      	movs	r1, #162	; 0xa2
 8000f96:	f000 fe03 	bl	8001ba0 <HAL_I2C_Master_Transmit>
	i2c_data_buf[0] = RTC_HOUR_REG_ADDR;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <RTC_init+0x5c>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_hour_BCD;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <RTC_init+0x5c>)
 8000fa2:	1dba      	adds	r2, r7, #6
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <RTC_init+0x5c>)
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <RTC_init+0x60>)
 8000fac:	2301      	movs	r3, #1
 8000fae:	425b      	negs	r3, r3
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	21a2      	movs	r1, #162	; 0xa2
 8000fb6:	f000 fdf3 	bl	8001ba0 <HAL_I2C_Master_Transmit>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	200000b4 	.word	0x200000b4
 8000fc8:	200000c8 	.word	0x200000c8

08000fcc <RTC_getTime>:


void RTC_getTime(uint8_t *time_array)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	time_array[0] = RTC_getSeconds();
 8000fd4:	f7ff ff62 	bl	8000e9c <RTC_getSeconds>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	001a      	movs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	701a      	strb	r2, [r3, #0]
	time_array[1] = RTC_getMins();
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1c5c      	adds	r4, r3, #1
 8000fe4:	f7ff ff7c 	bl	8000ee0 <RTC_getMins>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	7023      	strb	r3, [r4, #0]
	time_array[2] = RTC_getHours();
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	1c9c      	adds	r4, r3, #2
 8000ff0:	f7ff ff98 	bl	8000f24 <RTC_getHours>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	7023      	strb	r3, [r4, #0]
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b003      	add	sp, #12
 8000ffe:	bd90      	pop	{r4, r7, pc}

08001000 <conv_BCD>:

void conv_BCD(uint8_t *time_array)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	uint8_t BCD_sec = time_array[0];
 8001008:	210f      	movs	r1, #15
 800100a:	187b      	adds	r3, r7, r1
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	701a      	strb	r2, [r3, #0]
	uint8_t BCD_min = time_array[1];
 8001012:	200e      	movs	r0, #14
 8001014:	183b      	adds	r3, r7, r0
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	7852      	ldrb	r2, [r2, #1]
 800101a:	701a      	strb	r2, [r3, #0]
	uint8_t BCD_hour = time_array[2];
 800101c:	240d      	movs	r4, #13
 800101e:	193b      	adds	r3, r7, r4
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	7892      	ldrb	r2, [r2, #2]
 8001024:	701a      	strb	r2, [r3, #0]

	time_array[0] = ((BCD_sec>>4) & 0b00000111);
 8001026:	187b      	adds	r3, r7, r1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2207      	movs	r2, #7
 8001030:	4013      	ands	r3, r2
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	701a      	strb	r2, [r3, #0]
	time_array[1] = (BCD_sec & 0b00001111);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	187a      	adds	r2, r7, r1
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	210f      	movs	r1, #15
 8001042:	400a      	ands	r2, r1
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]

	time_array[2] = ((BCD_min>>4) & 0b00000111);
 8001048:	183b      	adds	r3, r7, r0
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	b2da      	uxtb	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3302      	adds	r3, #2
 8001054:	2107      	movs	r1, #7
 8001056:	400a      	ands	r2, r1
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	701a      	strb	r2, [r3, #0]
	time_array[3] = (BCD_min & 0b00001111);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3303      	adds	r3, #3
 8001060:	183a      	adds	r2, r7, r0
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	210f      	movs	r1, #15
 8001066:	400a      	ands	r2, r1
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]

	time_array[4] = ((BCD_hour>>4) & 0b00000011);
 800106c:	193b      	adds	r3, r7, r4
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	b2da      	uxtb	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3304      	adds	r3, #4
 8001078:	2103      	movs	r1, #3
 800107a:	400a      	ands	r2, r1
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
	time_array[5] = (BCD_hour & 0b00001111);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3305      	adds	r3, #5
 8001084:	193a      	adds	r2, r7, r4
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	210f      	movs	r1, #15
 800108a:	400a      	ands	r2, r1
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]

}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b005      	add	sp, #20
 8001096:	bd90      	pop	{r4, r7, pc}

08001098 <RTC_updateMins>:

void RTC_updateMins(uint8_t tenmins, uint8_t onemins)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	1c0a      	adds	r2, r1, #0
 80010a8:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[0] = RTC_MIN_REG_ADDR;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <RTC_updateMins+0x4c>)
 80010ac:	2203      	movs	r2, #3
 80010ae:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = (tenmins<<4 | onemins);
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	b25a      	sxtb	r2, r3
 80010b8:	1dbb      	adds	r3, r7, #6
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <RTC_updateMins+0x4c>)
 80010c6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <RTC_updateMins+0x4c>)
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <RTC_updateMins+0x50>)
 80010cc:	2301      	movs	r3, #1
 80010ce:	425b      	negs	r3, r3
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	21a2      	movs	r1, #162	; 0xa2
 80010d6:	f000 fd63 	bl	8001ba0 <HAL_I2C_Master_Transmit>
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	200000b4 	.word	0x200000b4
 80010e8:	200000c8 	.word	0x200000c8

080010ec <RTC_updateHours>:

void RTC_updateHours(uint8_t tenhours, uint8_t onehours)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	0002      	movs	r2, r0
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	1c0a      	adds	r2, r1, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[0] = RTC_HOUR_REG_ADDR;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <RTC_updateHours+0x4c>)
 8001100:	2204      	movs	r2, #4
 8001102:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = (tenhours<<4 | onehours);
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	b25a      	sxtb	r2, r3
 800110c:	1dbb      	adds	r3, r7, #6
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b25b      	sxtb	r3, r3
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <RTC_updateHours+0x4c>)
 800111a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <RTC_updateHours+0x4c>)
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <RTC_updateHours+0x50>)
 8001120:	2301      	movs	r3, #1
 8001122:	425b      	negs	r3, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2302      	movs	r3, #2
 8001128:	21a2      	movs	r1, #162	; 0xa2
 800112a:	f000 fd39 	bl	8001ba0 <HAL_I2C_Master_Transmit>
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	200000b4 	.word	0x200000b4
 800113c:	200000c8 	.word	0x200000c8

08001140 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <MX_SPI1_Init+0x6c>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_SPI1_Init+0x68>)
 800114c:	2282      	movs	r2, #130	; 0x82
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_SPI1_Init+0x68>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001160:	2202      	movs	r2, #2
 8001162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001166:	2201      	movs	r2, #1
 8001168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_SPI1_Init+0x68>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001174:	2218      	movs	r2, #24
 8001176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_SPI1_Init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_SPI1_Init+0x68>)
 800118c:	2207      	movs	r2, #7
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001192:	0018      	movs	r0, r3
 8001194:	f002 f834 	bl	8003200 <HAL_SPI_Init>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800119c:	f7ff fc02 	bl	80009a4 <Error_Handler>
  }

}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000120 	.word	0x20000120
 80011ac:	40013000 	.word	0x40013000

080011b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	230c      	movs	r3, #12
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	0018      	movs	r0, r3
 80011be:	2314      	movs	r3, #20
 80011c0:	001a      	movs	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f002 fd74 	bl	8003cb0 <memset>
  if(spiHandle->Instance==SPI1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <HAL_SPI_MspInit+0x80>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d129      	bne.n	8001226 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_SPI_MspInit+0x84>)
 80011d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_SPI_MspInit+0x84>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	0149      	lsls	r1, r1, #5
 80011dc:	430a      	orrs	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_SPI_MspInit+0x84>)
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_SPI_MspInit+0x84>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	430a      	orrs	r2, r1
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_SPI_MspInit+0x84>)
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2201      	movs	r2, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011f8:	210c      	movs	r1, #12
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	22e0      	movs	r2, #224	; 0xe0
 80011fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2202      	movs	r2, #2
 8001204:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2203      	movs	r2, #3
 8001210:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	187a      	adds	r2, r7, r1
 800121a:	23a0      	movs	r3, #160	; 0xa0
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	0011      	movs	r1, r2
 8001220:	0018      	movs	r0, r3
 8001222:	f000 fa7f 	bl	8001724 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b008      	add	sp, #32
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	40013000 	.word	0x40013000
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_MspInit+0x24>)
 800123e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x24>)
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <HAL_MspInit+0x24>)
 800124a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_MspInit+0x24>)
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	0549      	lsls	r1, r1, #21
 8001252:	430a      	orrs	r2, r1
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f95c 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f002 fccc 	bl	8003c5c <__errno>
 80012c4:	0003      	movs	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	425b      	negs	r3, r3
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	18d2      	adds	r2, r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b006      	add	sp, #24
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20002000 	.word	0x20002000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	200000bc 	.word	0x200000bc
 80012f8:	200001c0 	.word	0x200001c0

080012fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	2308      	movs	r3, #8
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	0018      	movs	r0, r3
 8001314:	2310      	movs	r3, #16
 8001316:	001a      	movs	r2, r3
 8001318:	2100      	movs	r1, #0
 800131a:	f002 fcc9 	bl	8003cb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	003b      	movs	r3, r7
 8001320:	0018      	movs	r0, r3
 8001322:	2308      	movs	r3, #8
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f002 fcc2 	bl	8003cb0 <memset>

  htim21.Instance = TIM21;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_TIM21_Init+0xa0>)
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <MX_TIM21_Init+0xa4>)
 8001330:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM21_Init+0xa0>)
 8001334:	221f      	movs	r2, #31
 8001336:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM21_Init+0xa0>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_TIM21_Init+0xa0>)
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <MX_TIM21_Init+0xa8>)
 8001342:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM21_Init+0xa0>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_TIM21_Init+0xa0>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_TIM21_Init+0xa0>)
 8001352:	0018      	movs	r0, r3
 8001354:	f002 fa08 	bl	8003768 <HAL_TIM_Base_Init>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 800135c:	f7ff fb22 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001360:	2108      	movs	r1, #8
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	0152      	lsls	r2, r2, #5
 8001368:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800136a:	187a      	adds	r2, r7, r1
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_TIM21_Init+0xa0>)
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f002 fa75 	bl	8003860 <HAL_TIM_ConfigClockSource>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800137a:	f7ff fb13 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	003b      	movs	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	003b      	movs	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800138a:	003a      	movs	r2, r7
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_TIM21_Init+0xa0>)
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f002 fc13 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d001      	beq.n	800139e <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800139a:	f7ff fb03 	bl	80009a4 <Error_Handler>
  }

}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b006      	add	sp, #24
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	20000178 	.word	0x20000178
 80013ac:	40010800 	.word	0x40010800
 80013b0:	0000ffff 	.word	0x0000ffff

080013b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_TIM_Base_MspInit+0x28>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d105      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_TIM_Base_MspInit+0x2c>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_TIM_Base_MspInit+0x2c>)
 80013cc:	2104      	movs	r1, #4
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40021000 	.word	0x40021000

080013e4 <delay_micros>:
}

/* USER CODE BEGIN 1 */

void delay_micros(uint8_t us)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	0002      	movs	r2, r0
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim21, 0);
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <delay_micros+0x2c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim21) < us)
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <delay_micros+0x2c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3f8      	bcc.n	80013fa <delay_micros+0x16>
	{

	}
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000178 	.word	0x20000178

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001416:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001418:	4813      	ldr	r0, [pc, #76]	; (8001468 <LoopForever+0x6>)
    LDR R1, [R0]
 800141a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800141c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <LoopForever+0xa>)
    CMP R1, R2
 8001420:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001422:	d105      	bne.n	8001430 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001426:	4913      	ldr	r1, [pc, #76]	; (8001474 <LoopForever+0x12>)
    STR R1, [R0]
 8001428:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800142a:	4813      	ldr	r0, [pc, #76]	; (8001478 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800142c:	4913      	ldr	r1, [pc, #76]	; (800147c <LoopForever+0x1a>)
    STR R1, [R0]
 800142e:	6001      	str	r1, [r0, #0]

08001430 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001432:	4914      	ldr	r1, [pc, #80]	; (8001484 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <LoopForever+0x26>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001448:	4c11      	ldr	r4, [pc, #68]	; (8001490 <LoopForever+0x2e>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001456:	f7ff ff51 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f002 fc05 	bl	8003c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff f90f 	bl	8000680 <main>

08001462 <LoopForever>:

LoopForever:
    b LoopForever
 8001462:	e7fe      	b.n	8001462 <LoopForever>
   ldr   r0, =_estack
 8001464:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001468:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800146c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001470:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001474:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001478:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800147c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001488:	0800464c 	.word	0x0800464c
  ldr r2, =_sbss
 800148c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001490:	200001c0 	.word	0x200001c0

08001494 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_IRQHandler>
	...

08001498 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_Init+0x3c>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Init+0x3c>)
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 f811 	bl	80014d8 <HAL_InitTick>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	e001      	b.n	80014c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c2:	f7ff feb9 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_InitTick+0x5c>)
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_InitTick+0x60>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	0019      	movs	r1, r3
 80014ea:	23fa      	movs	r3, #250	; 0xfa
 80014ec:	0098      	lsls	r0, r3, #2
 80014ee:	f7fe fe0b 	bl	8000108 <__udivsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	0019      	movs	r1, r3
 80014f6:	0020      	movs	r0, r4
 80014f8:	f7fe fe06 	bl	8000108 <__udivsi3>
 80014fc:	0003      	movs	r3, r0
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 f903 	bl	800170a <HAL_SYSTICK_Config>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e00f      	b.n	800152c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d80b      	bhi.n	800152a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	425b      	negs	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f8e0 	bl	80016e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_InitTick+0x64>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b003      	add	sp, #12
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000018 	.word	0x20000018
 8001538:	20000020 	.word	0x20000020
 800153c:	2000001c 	.word	0x2000001c

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	001a      	movs	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	18d2      	adds	r2, r2, r3
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_IncTick+0x20>)
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	20000020 	.word	0x20000020
 8001560:	200001b8 	.word	0x200001b8

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	200001b8 	.word	0x200001b8

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_Delay+0x40>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	189b      	adds	r3, r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b004      	add	sp, #16
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000020 	.word	0x20000020

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b7f      	cmp	r3, #127	; 0x7f
 80015d0:	d828      	bhi.n	8001624 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <__NVIC_SetPriority+0xd4>)
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	33c0      	adds	r3, #192	; 0xc0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	589b      	ldr	r3, [r3, r2]
 80015e2:	1dfa      	adds	r2, r7, #7
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	0011      	movs	r1, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	400a      	ands	r2, r1
 80015ec:	00d2      	lsls	r2, r2, #3
 80015ee:	21ff      	movs	r1, #255	; 0xff
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	401a      	ands	r2, r3
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	2303      	movs	r3, #3
 800160a:	4003      	ands	r3, r0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <__NVIC_SetPriority+0xd4>)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	430a      	orrs	r2, r1
 800161c:	33c0      	adds	r3, #192	; 0xc0
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001622:	e031      	b.n	8001688 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <__NVIC_SetPriority+0xd8>)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0019      	movs	r1, r3
 800162c:	230f      	movs	r3, #15
 800162e:	400b      	ands	r3, r1
 8001630:	3b08      	subs	r3, #8
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3306      	adds	r3, #6
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	3304      	adds	r3, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1dfa      	adds	r2, r7, #7
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0011      	movs	r1, r2
 8001644:	2203      	movs	r2, #3
 8001646:	400a      	ands	r2, r1
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	401a      	ands	r2, r3
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	2303      	movs	r3, #3
 8001666:	4003      	ands	r3, r0
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	001c      	movs	r4, r3
 8001674:	230f      	movs	r3, #15
 8001676:	4023      	ands	r3, r4
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	430a      	orrs	r2, r1
 800167e:	3306      	adds	r3, #6
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	18c3      	adds	r3, r0, r3
 8001684:	3304      	adds	r3, #4
 8001686:	601a      	str	r2, [r3, #0]
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b003      	add	sp, #12
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <SysTick_Config+0x40>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e010      	b.n	80016d0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <SysTick_Config+0x44>)
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	3a01      	subs	r2, #1
 80016b4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	2301      	movs	r3, #1
 80016b8:	425b      	negs	r3, r3
 80016ba:	2103      	movs	r1, #3
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff ff7d 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SysTick_Config+0x44>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x44>)
 80016ca:	2207      	movs	r2, #7
 80016cc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	00ffffff 	.word	0x00ffffff
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	210f      	movs	r1, #15
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	1c02      	adds	r2, r0, #0
 80016f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ffbf 	bl	8001698 <SysTick_Config>
 800171a:	0003      	movs	r3, r0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800173a:	e149      	b.n	80019d0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4091      	lsls	r1, r2
 8001746:	000a      	movs	r2, r1
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d100      	bne.n	8001754 <HAL_GPIO_Init+0x30>
 8001752:	e13a      	b.n	80019ca <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	4013      	ands	r3, r2
 800175c:	2b01      	cmp	r3, #1
 800175e:	d005      	beq.n	800176c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001768:	2b02      	cmp	r3, #2
 800176a:	d130      	bne.n	80017ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	409a      	lsls	r2, r3
 800177a:	0013      	movs	r3, r2
 800177c:	43da      	mvns	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	0013      	movs	r3, r2
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a2:	2201      	movs	r2, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	43da      	mvns	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	2201      	movs	r2, #1
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2203      	movs	r2, #3
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d017      	beq.n	800180a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2203      	movs	r2, #3
 8001810:	4013      	ands	r3, r2
 8001812:	2b02      	cmp	r3, #2
 8001814:	d123      	bne.n	800185e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	58d3      	ldr	r3, [r2, r3]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2207      	movs	r2, #7
 8001828:	4013      	ands	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2107      	movs	r1, #7
 8001842:	400b      	ands	r3, r1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	6939      	ldr	r1, [r7, #16]
 800185c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2203      	movs	r2, #3
 800187c:	401a      	ands	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	23c0      	movs	r3, #192	; 0xc0
 8001898:	029b      	lsls	r3, r3, #10
 800189a:	4013      	ands	r3, r2
 800189c:	d100      	bne.n	80018a0 <HAL_GPIO_Init+0x17c>
 800189e:	e094      	b.n	80019ca <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x2c4>)
 80018a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_GPIO_Init+0x2c4>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x2c8>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	589b      	ldr	r3, [r3, r2]
 80018b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2203      	movs	r2, #3
 80018be:	4013      	ands	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	409a      	lsls	r2, r3
 80018c6:	0013      	movs	r3, r2
 80018c8:	43da      	mvns	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	23a0      	movs	r3, #160	; 0xa0
 80018d4:	05db      	lsls	r3, r3, #23
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x1de>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_GPIO_Init+0x2cc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1da>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a43      	ldr	r2, [pc, #268]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1d6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_GPIO_Init+0x2d4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1d2>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x1e0>
 80018f6:	2306      	movs	r3, #6
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x1e0>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x1e0>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x1e0>
 8001902:	2300      	movs	r3, #0
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	2103      	movs	r1, #3
 8001908:	400a      	ands	r2, r1
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001914:	4935      	ldr	r1, [pc, #212]	; (80019ec <HAL_GPIO_Init+0x2c8>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	4013      	ands	r3, r2
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43da      	mvns	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	4013      	ands	r3, r2
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43da      	mvns	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	035b      	lsls	r3, r3, #13
 800198e:	4013      	ands	r3, r2
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	039b      	lsls	r3, r3, #14
 80019b8:	4013      	ands	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	40da      	lsrs	r2, r3
 80019d8:	1e13      	subs	r3, r2, #0
 80019da:	d000      	beq.n	80019de <HAL_GPIO_Init+0x2ba>
 80019dc:	e6ae      	b.n	800173c <HAL_GPIO_Init+0x18>
  }
}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b006      	add	sp, #24
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	50000400 	.word	0x50000400
 80019f4:	50000800 	.word	0x50000800
 80019f8:	50001c00 	.word	0x50001c00
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	000a      	movs	r2, r1
 8001a0a:	1cbb      	adds	r3, r7, #2
 8001a0c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	1cba      	adds	r2, r7, #2
 8001a14:	8812      	ldrh	r2, [r2, #0]
 8001a16:	4013      	ands	r3, r2
 8001a18:	d004      	beq.n	8001a24 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	781b      	ldrb	r3, [r3, #0]
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b004      	add	sp, #16
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	0008      	movs	r0, r1
 8001a44:	0011      	movs	r1, r2
 8001a46:	1cbb      	adds	r3, r7, #2
 8001a48:	1c02      	adds	r2, r0, #0
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	1c7b      	adds	r3, r7, #1
 8001a4e:	1c0a      	adds	r2, r1, #0
 8001a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a52:	1c7b      	adds	r3, r7, #1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a5a:	1cbb      	adds	r3, r7, #2
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a64:	1cbb      	adds	r3, r7, #2
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e082      	b.n	8001b8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2241      	movs	r2, #65	; 0x41
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7fe fdab 	bl	80005f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2241      	movs	r2, #65	; 0x41
 8001aa6:	2124      	movs	r1, #36	; 0x24
 8001aa8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	438a      	bics	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4934      	ldr	r1, [pc, #208]	; (8001b94 <HAL_I2C_Init+0x120>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4931      	ldr	r1, [pc, #196]	; (8001b98 <HAL_I2C_Init+0x124>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0209      	lsls	r1, r1, #8
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	e007      	b.n	8001b02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2184      	movs	r1, #132	; 0x84
 8001afc:	0209      	lsls	r1, r1, #8
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d104      	bne.n	8001b14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	491f      	ldr	r1, [pc, #124]	; (8001b9c <HAL_I2C_Init+0x128>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	491a      	ldr	r1, [pc, #104]	; (8001b98 <HAL_I2C_Init+0x124>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69d9      	ldr	r1, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2241      	movs	r2, #65	; 0x41
 8001b78:	2120      	movs	r1, #32
 8001b7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2242      	movs	r2, #66	; 0x42
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	f0ffffff 	.word	0xf0ffffff
 8001b98:	ffff7fff 	.word	0xffff7fff
 8001b9c:	02008000 	.word	0x02008000

08001ba0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	0008      	movs	r0, r1
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	0019      	movs	r1, r3
 8001bae:	230a      	movs	r3, #10
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	1c02      	adds	r2, r0, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	1c0a      	adds	r2, r1, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2241      	movs	r2, #65	; 0x41
 8001bc2:	5c9b      	ldrb	r3, [r3, r2]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d000      	beq.n	8001bcc <HAL_I2C_Master_Transmit+0x2c>
 8001bca:	e0e7      	b.n	8001d9c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	5c9b      	ldrb	r3, [r3, r2]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_I2C_Master_Transmit+0x3a>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e0e1      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1fe>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	2101      	movs	r1, #1
 8001be0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001be2:	f7ff fcbf 	bl	8001564 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	0219      	lsls	r1, r3, #8
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2319      	movs	r3, #25
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f000 fa04 	bl	8002004 <I2C_WaitOnFlagUntilTimeout>
 8001bfc:	1e03      	subs	r3, r0, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0cc      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2241      	movs	r2, #65	; 0x41
 8001c08:	2121      	movs	r1, #33	; 0x21
 8001c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2242      	movs	r2, #66	; 0x42
 8001c10:	2110      	movs	r1, #16
 8001c12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2208      	movs	r2, #8
 8001c24:	18ba      	adds	r2, r7, r2
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2bff      	cmp	r3, #255	; 0xff
 8001c38:	d911      	bls.n	8001c5e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	22ff      	movs	r2, #255	; 0xff
 8001c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	045c      	lsls	r4, r3, #17
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	8819      	ldrh	r1, [r3, #0]
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <HAL_I2C_Master_Transmit+0x208>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	0023      	movs	r3, r4
 8001c58:	f000 fb74 	bl	8002344 <I2C_TransferConfig>
 8001c5c:	e075      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	049c      	lsls	r4, r3, #18
 8001c72:	230a      	movs	r3, #10
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	8819      	ldrh	r1, [r3, #0]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <HAL_I2C_Master_Transmit+0x208>)
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	0023      	movs	r3, r4
 8001c80:	f000 fb60 	bl	8002344 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c84:	e061      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f9f8 	bl	8002082 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e081      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03a      	beq.n	8001d4a <HAL_I2C_Master_Transmit+0x1aa>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d136      	bne.n	8001d4a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	f000 f98b 	bl	8002004 <I2C_WaitOnFlagUntilTimeout>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e053      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2bff      	cmp	r3, #255	; 0xff
 8001cfe:	d911      	bls.n	8001d24 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	22ff      	movs	r2, #255	; 0xff
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	045c      	lsls	r4, r3, #17
 8001d10:	230a      	movs	r3, #10
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	8819      	ldrh	r1, [r3, #0]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	0023      	movs	r3, r4
 8001d1e:	f000 fb11 	bl	8002344 <I2C_TransferConfig>
 8001d22:	e012      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	049c      	lsls	r4, r3, #18
 8001d38:	230a      	movs	r3, #10
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	8819      	ldrh	r1, [r3, #0]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	2300      	movs	r3, #0
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	0023      	movs	r3, r4
 8001d46:	f000 fafd 	bl	8002344 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d198      	bne.n	8001c86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 f9d0 	bl	8002100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e01a      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <HAL_I2C_Master_Transmit+0x20c>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2241      	movs	r2, #65	; 0x41
 8001d84:	2120      	movs	r1, #32
 8001d86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2242      	movs	r2, #66	; 0x42
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	2100      	movs	r1, #0
 8001d96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e000      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
  }
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b007      	add	sp, #28
 8001da4:	bd90      	pop	{r4, r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	80002000 	.word	0x80002000
 8001dac:	fe00e800 	.word	0xfe00e800

08001db0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	0008      	movs	r0, r1
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	1c02      	adds	r2, r0, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	1c0a      	adds	r2, r1, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2241      	movs	r2, #65	; 0x41
 8001dd2:	5c9b      	ldrb	r3, [r3, r2]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d000      	beq.n	8001ddc <HAL_I2C_Master_Receive+0x2c>
 8001dda:	e0e8      	b.n	8001fae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	5c9b      	ldrb	r3, [r3, r2]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Master_Receive+0x3a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0e2      	b.n	8001fb0 <HAL_I2C_Master_Receive+0x200>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2240      	movs	r2, #64	; 0x40
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001df2:	f7ff fbb7 	bl	8001564 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	0219      	lsls	r1, r3, #8
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2319      	movs	r3, #25
 8001e06:	2201      	movs	r2, #1
 8001e08:	f000 f8fc 	bl	8002004 <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	1e03      	subs	r3, r0, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0cd      	b.n	8001fb0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2241      	movs	r2, #65	; 0x41
 8001e18:	2122      	movs	r1, #34	; 0x22
 8001e1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2242      	movs	r2, #66	; 0x42
 8001e20:	2110      	movs	r1, #16
 8001e22:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2208      	movs	r2, #8
 8001e34:	18ba      	adds	r2, r7, r2
 8001e36:	8812      	ldrh	r2, [r2, #0]
 8001e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d911      	bls.n	8001e6e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	045c      	lsls	r4, r3, #17
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	8819      	ldrh	r1, [r3, #0]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <HAL_I2C_Master_Receive+0x208>)
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	0023      	movs	r3, r4
 8001e68:	f000 fa6c 	bl	8002344 <I2C_TransferConfig>
 8001e6c:	e076      	b.n	8001f5c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	049c      	lsls	r4, r3, #18
 8001e82:	230a      	movs	r3, #10
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	8819      	ldrh	r1, [r3, #0]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_I2C_Master_Receive+0x208>)
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	0023      	movs	r3, r4
 8001e90:	f000 fa58 	bl	8002344 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e94:	e062      	b.n	8001f5c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 f96b 	bl	8002178 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e082      	b.n	8001fb0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d03a      	beq.n	8001f5c <HAL_I2C_Master_Receive+0x1ac>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d136      	bne.n	8001f5c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	f000 f882 	bl	8002004 <I2C_WaitOnFlagUntilTimeout>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e053      	b.n	8001fb0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d911      	bls.n	8001f36 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	22ff      	movs	r2, #255	; 0xff
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	045c      	lsls	r4, r3, #17
 8001f22:	230a      	movs	r3, #10
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	8819      	ldrh	r1, [r3, #0]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	0023      	movs	r3, r4
 8001f30:	f000 fa08 	bl	8002344 <I2C_TransferConfig>
 8001f34:	e012      	b.n	8001f5c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	049c      	lsls	r4, r3, #18
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	8819      	ldrh	r1, [r3, #0]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	2300      	movs	r3, #0
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	0023      	movs	r3, r4
 8001f58:	f000 f9f4 	bl	8002344 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d197      	bne.n	8001e96 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 f8c7 	bl	8002100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e01a      	b.n	8001fb0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	490b      	ldr	r1, [pc, #44]	; (8001fbc <HAL_I2C_Master_Receive+0x20c>)
 8001f8e:	400a      	ands	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2241      	movs	r2, #65	; 0x41
 8001f96:	2120      	movs	r1, #32
 8001f98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2242      	movs	r2, #66	; 0x42
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
  }
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b007      	add	sp, #28
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	80002400 	.word	0x80002400
 8001fbc:	fe00e800 	.word	0xfe00e800

08001fc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d103      	bne.n	8001fde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d007      	beq.n	8001ffc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	619a      	str	r2, [r3, #24]
  }
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	1dfb      	adds	r3, r7, #7
 8002012:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002014:	e021      	b.n	800205a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	d01e      	beq.n	800205a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201c:	f7ff faa2 	bl	8001564 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d302      	bcc.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d113      	bne.n	800205a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	2220      	movs	r2, #32
 8002038:	431a      	orrs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2241      	movs	r2, #65	; 0x41
 8002042:	2120      	movs	r1, #32
 8002044:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2242      	movs	r2, #66	; 0x42
 800204a:	2100      	movs	r1, #0
 800204c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	425a      	negs	r2, r3
 800206a:	4153      	adcs	r3, r2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	001a      	movs	r2, r3
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d0ce      	beq.n	8002016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800208e:	e02b      	b.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f8da 	bl	8002250 <I2C_IsAcknowledgeFailed>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e029      	b.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	d01e      	beq.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff fa5b 	bl	8001564 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d113      	bne.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	2220      	movs	r2, #32
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2241      	movs	r2, #65	; 0x41
 80020d0:	2120      	movs	r1, #32
 80020d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2242      	movs	r2, #66	; 0x42
 80020d8:	2100      	movs	r1, #0
 80020da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	2100      	movs	r1, #0
 80020e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e007      	b.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2202      	movs	r2, #2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d1cc      	bne.n	8002090 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210c:	e028      	b.n	8002160 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f89b 	bl	8002250 <I2C_IsAcknowledgeFailed>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e026      	b.n	8002170 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7ff fa1f 	bl	8001564 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d113      	bne.n	8002160 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	2220      	movs	r2, #32
 800213e:	431a      	orrs	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2241      	movs	r2, #65	; 0x41
 8002148:	2120      	movs	r1, #32
 800214a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2242      	movs	r2, #66	; 0x42
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	2100      	movs	r1, #0
 800215a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e007      	b.n	8002170 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2220      	movs	r2, #32
 8002168:	4013      	ands	r3, r2
 800216a:	2b20      	cmp	r3, #32
 800216c:	d1cf      	bne.n	800210e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b004      	add	sp, #16
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002184:	e055      	b.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 f85f 	bl	8002250 <I2C_IsAcknowledgeFailed>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d001      	beq.n	800219a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e053      	b.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2220      	movs	r2, #32
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d129      	bne.n	80021fc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2204      	movs	r2, #4
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d105      	bne.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e03f      	b.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2220      	movs	r2, #32
 80021c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	491d      	ldr	r1, [pc, #116]	; (800224c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2241      	movs	r2, #65	; 0x41
 80021e4:	2120      	movs	r1, #32
 80021e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2242      	movs	r2, #66	; 0x42
 80021ec:	2100      	movs	r1, #0
 80021ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e022      	b.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fc:	f7ff f9b2 	bl	8001564 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	d302      	bcc.n	8002212 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	2220      	movs	r2, #32
 8002218:	431a      	orrs	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2241      	movs	r2, #65	; 0x41
 8002222:	2120      	movs	r1, #32
 8002224:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e007      	b.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2204      	movs	r2, #4
 800223a:	4013      	ands	r3, r2
 800223c:	2b04      	cmp	r3, #4
 800223e:	d1a2      	bne.n	8002186 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b004      	add	sp, #16
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	fe00e800 	.word	0xfe00e800

08002250 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2210      	movs	r2, #16
 8002264:	4013      	ands	r3, r2
 8002266:	2b10      	cmp	r3, #16
 8002268:	d164      	bne.n	8002334 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	049b      	lsls	r3, r3, #18
 8002274:	401a      	ands	r2, r3
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	429a      	cmp	r2, r3
 800227c:	d02b      	beq.n	80022d6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	01c9      	lsls	r1, r1, #7
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002290:	e021      	b.n	80022d6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3301      	adds	r3, #1
 8002296:	d01e      	beq.n	80022d6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002298:	f7ff f964 	bl	8001564 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d302      	bcc.n	80022ae <I2C_IsAcknowledgeFailed+0x5e>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d113      	bne.n	80022d6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	2220      	movs	r2, #32
 80022b4:	431a      	orrs	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2241      	movs	r2, #65	; 0x41
 80022be:	2120      	movs	r1, #32
 80022c0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2242      	movs	r2, #66	; 0x42
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2240      	movs	r2, #64	; 0x40
 80022ce:	2100      	movs	r1, #0
 80022d0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e02f      	b.n	8002336 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2220      	movs	r2, #32
 80022de:	4013      	ands	r3, r2
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d1d6      	bne.n	8002292 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2210      	movs	r2, #16
 80022ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2220      	movs	r2, #32
 80022f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f7ff fe62 	bl	8001fc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	490e      	ldr	r1, [pc, #56]	; (8002340 <I2C_IsAcknowledgeFailed+0xf0>)
 8002308:	400a      	ands	r2, r1
 800230a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	2204      	movs	r2, #4
 8002312:	431a      	orrs	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2241      	movs	r2, #65	; 0x41
 800231c:	2120      	movs	r1, #32
 800231e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2242      	movs	r2, #66	; 0x42
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2240      	movs	r2, #64	; 0x40
 800232c:	2100      	movs	r1, #0
 800232e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	fe00e800 	.word	0xfe00e800

08002344 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	0008      	movs	r0, r1
 800234e:	0011      	movs	r1, r2
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	240a      	movs	r4, #10
 8002354:	193b      	adds	r3, r7, r4
 8002356:	1c02      	adds	r2, r0, #0
 8002358:	801a      	strh	r2, [r3, #0]
 800235a:	2009      	movs	r0, #9
 800235c:	183b      	adds	r3, r7, r0
 800235e:	1c0a      	adds	r2, r1, #0
 8002360:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	6a3a      	ldr	r2, [r7, #32]
 800236a:	0d51      	lsrs	r1, r2, #21
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	00d2      	lsls	r2, r2, #3
 8002370:	400a      	ands	r2, r1
 8002372:	490e      	ldr	r1, [pc, #56]	; (80023ac <I2C_TransferConfig+0x68>)
 8002374:	430a      	orrs	r2, r1
 8002376:	43d2      	mvns	r2, r2
 8002378:	401a      	ands	r2, r3
 800237a:	0011      	movs	r1, r2
 800237c:	193b      	adds	r3, r7, r4
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	059b      	lsls	r3, r3, #22
 8002382:	0d9a      	lsrs	r2, r3, #22
 8002384:	183b      	adds	r3, r7, r0
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	0418      	lsls	r0, r3, #16
 800238a:	23ff      	movs	r3, #255	; 0xff
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	4003      	ands	r3, r0
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	431a      	orrs	r2, r3
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	431a      	orrs	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b005      	add	sp, #20
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	03ff63ff 	.word	0x03ff63ff

080023b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2241      	movs	r2, #65	; 0x41
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d138      	bne.n	8002438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	5c9b      	ldrb	r3, [r3, r2]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e032      	b.n	800243a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2240      	movs	r2, #64	; 0x40
 80023d8:	2101      	movs	r1, #1
 80023da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2241      	movs	r2, #65	; 0x41
 80023e0:	2124      	movs	r1, #36	; 0x24
 80023e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2101      	movs	r1, #1
 80023f0:	438a      	bics	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4911      	ldr	r1, [pc, #68]	; (8002444 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002400:	400a      	ands	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2101      	movs	r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2241      	movs	r2, #65	; 0x41
 8002428:	2120      	movs	r1, #32
 800242a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b002      	add	sp, #8
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	ffffefff 	.word	0xffffefff

08002448 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2241      	movs	r2, #65	; 0x41
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	d139      	bne.n	80024d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2240      	movs	r2, #64	; 0x40
 8002462:	5c9b      	ldrb	r3, [r3, r2]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002468:	2302      	movs	r3, #2
 800246a:	e033      	b.n	80024d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	2101      	movs	r1, #1
 8002472:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2241      	movs	r2, #65	; 0x41
 8002478:	2124      	movs	r1, #36	; 0x24
 800247a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a11      	ldr	r2, [pc, #68]	; (80024dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2241      	movs	r2, #65	; 0x41
 80024c2:	2120      	movs	r1, #32
 80024c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2240      	movs	r2, #64	; 0x40
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fffff0ff 	.word	0xfffff0ff

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b5b0      	push	{r4, r5, r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f000 fb70 	bl	8002bd4 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f4:	4bc9      	ldr	r3, [pc, #804]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	220c      	movs	r2, #12
 80024fa:	4013      	ands	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fe:	4bc7      	ldr	r3, [pc, #796]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	025b      	lsls	r3, r3, #9
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d100      	bne.n	8002516 <HAL_RCC_OscConfig+0x36>
 8002514:	e07d      	b.n	8002612 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d007      	beq.n	800252c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d112      	bne.n	8002548 <HAL_RCC_OscConfig+0x68>
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	025b      	lsls	r3, r3, #9
 8002528:	429a      	cmp	r2, r3
 800252a:	d10d      	bne.n	8002548 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	4bbb      	ldr	r3, [pc, #748]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	d100      	bne.n	800253a <HAL_RCC_OscConfig+0x5a>
 8002538:	e06a      	b.n	8002610 <HAL_RCC_OscConfig+0x130>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d166      	bne.n	8002610 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	f000 fb46 	bl	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x84>
 8002554:	4bb1      	ldr	r3, [pc, #708]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4bb0      	ldr	r3, [pc, #704]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	0249      	lsls	r1, r1, #9
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e027      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	23a0      	movs	r3, #160	; 0xa0
 800256a:	02db      	lsls	r3, r3, #11
 800256c:	429a      	cmp	r2, r3
 800256e:	d10e      	bne.n	800258e <HAL_RCC_OscConfig+0xae>
 8002570:	4baa      	ldr	r3, [pc, #680]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4ba9      	ldr	r3, [pc, #676]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	02c9      	lsls	r1, r1, #11
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4ba7      	ldr	r3, [pc, #668]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4ba6      	ldr	r3, [pc, #664]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	0249      	lsls	r1, r1, #9
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e012      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 800258e:	4ba3      	ldr	r3, [pc, #652]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4ba2      	ldr	r3, [pc, #648]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002594:	49a2      	ldr	r1, [pc, #648]	; (8002820 <HAL_RCC_OscConfig+0x340>)
 8002596:	400a      	ands	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	4ba0      	ldr	r3, [pc, #640]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	025b      	lsls	r3, r3, #9
 80025a2:	4013      	ands	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4b9c      	ldr	r3, [pc, #624]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b9b      	ldr	r3, [pc, #620]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80025ae:	499d      	ldr	r1, [pc, #628]	; (8002824 <HAL_RCC_OscConfig+0x344>)
 80025b0:	400a      	ands	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d014      	beq.n	80025e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe ffd2 	bl	8001564 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c6:	f7fe ffcd 	bl	8001564 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e2fd      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d8:	4b90      	ldr	r3, [pc, #576]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	4013      	ands	r3, r2
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0xe6>
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe ffbd 	bl	8001564 <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe ffb8 	bl	8001564 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2e8      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002602:	4b86      	ldr	r3, [pc, #536]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	029b      	lsls	r3, r3, #10
 800260a:	4013      	ands	r3, r2
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x110>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2202      	movs	r2, #2
 8002618:	4013      	ands	r3, r2
 800261a:	d100      	bne.n	800261e <HAL_RCC_OscConfig+0x13e>
 800261c:	e09a      	b.n	8002754 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	2220      	movs	r2, #32
 8002628:	4013      	ands	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800262c:	4b7b      	ldr	r3, [pc, #492]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b7a      	ldr	r3, [pc, #488]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002632:	2120      	movs	r1, #32
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	2220      	movs	r2, #32
 800263c:	4393      	bics	r3, r2
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d13f      	bne.n	80026cc <HAL_RCC_OscConfig+0x1ec>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d13c      	bne.n	80026cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002652:	4b72      	ldr	r3, [pc, #456]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2204      	movs	r2, #4
 8002658:	4013      	ands	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_RCC_OscConfig+0x186>
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e2b6      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a6f      	ldr	r2, [pc, #444]	; (8002828 <HAL_RCC_OscConfig+0x348>)
 800266c:	4013      	ands	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	021a      	lsls	r2, r3, #8
 8002676:	4b69      	ldr	r3, [pc, #420]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800267c:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2209      	movs	r2, #9
 8002682:	4393      	bics	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268e:	f000 fbef 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002692:	0001      	movs	r1, r0
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	220f      	movs	r2, #15
 800269c:	4013      	ands	r3, r2
 800269e:	4a63      	ldr	r2, [pc, #396]	; (800282c <HAL_RCC_OscConfig+0x34c>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	000a      	movs	r2, r1
 80026a4:	40da      	lsrs	r2, r3
 80026a6:	4b62      	ldr	r3, [pc, #392]	; (8002830 <HAL_RCC_OscConfig+0x350>)
 80026a8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80026aa:	4b62      	ldr	r3, [pc, #392]	; (8002834 <HAL_RCC_OscConfig+0x354>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2513      	movs	r5, #19
 80026b0:	197c      	adds	r4, r7, r5
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7fe ff10 	bl	80014d8 <HAL_InitTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80026bc:	197b      	adds	r3, r7, r5
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d047      	beq.n	8002754 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80026c4:	2313      	movs	r3, #19
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	e283      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d027      	beq.n	8002722 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80026d2:	4b52      	ldr	r3, [pc, #328]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2209      	movs	r2, #9
 80026d8:	4393      	bics	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe ff3e 	bl	8001564 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fe ff39 	bl	8001564 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e269      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2204      	movs	r2, #4
 8002706:	4013      	ands	r3, r2
 8002708:	d0f1      	beq.n	80026ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b44      	ldr	r3, [pc, #272]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a46      	ldr	r2, [pc, #280]	; (8002828 <HAL_RCC_OscConfig+0x348>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	021a      	lsls	r2, r3, #8
 800271a:	4b40      	ldr	r3, [pc, #256]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002728:	2101      	movs	r1, #1
 800272a:	438a      	bics	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe ff19 	bl	8001564 <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe ff14 	bl	8001564 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e244      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2204      	movs	r2, #4
 8002750:	4013      	ands	r3, r2
 8002752:	d1f1      	bne.n	8002738 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2210      	movs	r2, #16
 800275a:	4013      	ands	r3, r2
 800275c:	d100      	bne.n	8002760 <HAL_RCC_OscConfig+0x280>
 800275e:	e0a2      	b.n	80028a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d141      	bne.n	80027ea <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x29e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e22a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_RCC_OscConfig+0x358>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	0a19      	lsrs	r1, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	061a      	lsls	r2, r3, #24
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	0b5b      	lsrs	r3, r3, #13
 80027ac:	3301      	adds	r3, #1
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	0212      	lsls	r2, r2, #8
 80027b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	210f      	movs	r1, #15
 80027bc:	400b      	ands	r3, r1
 80027be:	491b      	ldr	r1, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x34c>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_OscConfig+0x350>)
 80027c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <HAL_RCC_OscConfig+0x354>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2513      	movs	r5, #19
 80027ce:	197c      	adds	r4, r7, r5
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe fe81 	bl	80014d8 <HAL_InitTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80027da:	197b      	adds	r3, r7, r5
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d061      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80027e2:	2313      	movs	r3, #19
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	e1f4      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d03f      	beq.n	8002872 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x33c>)
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	0049      	lsls	r1, r1, #1
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe feb0 	bl	8001564 <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280a:	f7fe feab 	bl	8001564 <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d911      	bls.n	800283c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1db      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
 800281c:	40021000 	.word	0x40021000
 8002820:	fffeffff 	.word	0xfffeffff
 8002824:	fffbffff 	.word	0xfffbffff
 8002828:	ffffe0ff 	.word	0xffffe0ff
 800282c:	080045f0 	.word	0x080045f0
 8002830:	20000018 	.word	0x20000018
 8002834:	2000001c 	.word	0x2000001c
 8002838:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800283c:	4bca      	ldr	r3, [pc, #808]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4013      	ands	r3, r2
 8002846:	d0e0      	beq.n	800280a <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002848:	4bc7      	ldr	r3, [pc, #796]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4ac7      	ldr	r2, [pc, #796]	; (8002b6c <HAL_RCC_OscConfig+0x68c>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1a      	ldr	r2, [r3, #32]
 8002856:	4bc4      	ldr	r3, [pc, #784]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285c:	4bc2      	ldr	r3, [pc, #776]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	0a19      	lsrs	r1, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	061a      	lsls	r2, r3, #24
 800286a:	4bbf      	ldr	r3, [pc, #764]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	e019      	b.n	80028a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002872:	4bbd      	ldr	r3, [pc, #756]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4bbc      	ldr	r3, [pc, #752]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002878:	49bd      	ldr	r1, [pc, #756]	; (8002b70 <HAL_RCC_OscConfig+0x690>)
 800287a:	400a      	ands	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fe71 	bl	8001564 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002888:	f7fe fe6c 	bl	8001564 <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e19c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800289a:	4bb3      	ldr	r3, [pc, #716]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2208      	movs	r2, #8
 80028ac:	4013      	ands	r3, r2
 80028ae:	d036      	beq.n	800291e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d019      	beq.n	80028ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b8:	4bab      	ldr	r3, [pc, #684]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80028ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028bc:	4baa      	ldr	r3, [pc, #680]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fe4e 	bl	8001564 <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7fe fe49 	bl	8001564 <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e179      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028e0:	4ba1      	ldr	r3, [pc, #644]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80028e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d0f1      	beq.n	80028ce <HAL_RCC_OscConfig+0x3ee>
 80028ea:	e018      	b.n	800291e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b9e      	ldr	r3, [pc, #632]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80028ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028f0:	4b9d      	ldr	r3, [pc, #628]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	438a      	bics	r2, r1
 80028f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7fe fe34 	bl	8001564 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe fe2f 	bl	8001564 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e15f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002914:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d1f1      	bne.n	8002902 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2204      	movs	r2, #4
 8002924:	4013      	ands	r3, r2
 8002926:	d100      	bne.n	800292a <HAL_RCC_OscConfig+0x44a>
 8002928:	e0af      	b.n	8002a8a <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2323      	movs	r3, #35	; 0x23
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	055b      	lsls	r3, r3, #21
 800293a:	4013      	ands	r3, r2
 800293c:	d10a      	bne.n	8002954 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	4b8a      	ldr	r3, [pc, #552]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002942:	4b89      	ldr	r3, [pc, #548]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0549      	lsls	r1, r1, #21
 8002948:	430a      	orrs	r2, r1
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800294c:	2323      	movs	r3, #35	; 0x23
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b87      	ldr	r3, [pc, #540]	; (8002b74 <HAL_RCC_OscConfig+0x694>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4013      	ands	r3, r2
 800295e:	d11a      	bne.n	8002996 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002960:	4b84      	ldr	r3, [pc, #528]	; (8002b74 <HAL_RCC_OscConfig+0x694>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b83      	ldr	r3, [pc, #524]	; (8002b74 <HAL_RCC_OscConfig+0x694>)
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	0049      	lsls	r1, r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7fe fdf9 	bl	8001564 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7fe fdf4 	bl	8001564 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e124      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298a:	4b7a      	ldr	r3, [pc, #488]	; (8002b74 <HAL_RCC_OscConfig+0x694>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4013      	ands	r3, r2
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	429a      	cmp	r2, r3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d2>
 80029a2:	4b71      	ldr	r3, [pc, #452]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a6:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	0049      	lsls	r1, r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	651a      	str	r2, [r3, #80]	; 0x50
 80029b0:	e031      	b.n	8002a16 <HAL_RCC_OscConfig+0x536>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4f4>
 80029ba:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029be:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029c0:	496b      	ldr	r1, [pc, #428]	; (8002b70 <HAL_RCC_OscConfig+0x690>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	651a      	str	r2, [r3, #80]	; 0x50
 80029c6:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029cc:	496a      	ldr	r1, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x698>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	651a      	str	r2, [r3, #80]	; 0x50
 80029d2:	e020      	b.n	8002a16 <HAL_RCC_OscConfig+0x536>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	23a0      	movs	r3, #160	; 0xa0
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10e      	bne.n	80029fe <HAL_RCC_OscConfig+0x51e>
 80029e0:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e4:	4b60      	ldr	r3, [pc, #384]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	00c9      	lsls	r1, r1, #3
 80029ea:	430a      	orrs	r2, r1
 80029ec:	651a      	str	r2, [r3, #80]	; 0x50
 80029ee:	4b5e      	ldr	r3, [pc, #376]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f2:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0049      	lsls	r1, r1, #1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	651a      	str	r2, [r3, #80]	; 0x50
 80029fc:	e00b      	b.n	8002a16 <HAL_RCC_OscConfig+0x536>
 80029fe:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a02:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a04:	495a      	ldr	r1, [pc, #360]	; (8002b70 <HAL_RCC_OscConfig+0x690>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	651a      	str	r2, [r3, #80]	; 0x50
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a10:	4959      	ldr	r1, [pc, #356]	; (8002b78 <HAL_RCC_OscConfig+0x698>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d015      	beq.n	8002a4a <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fda1 	bl	8001564 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a26:	e009      	b.n	8002a3c <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe fd9c 	bl	8001564 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_RCC_OscConfig+0x69c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0cb      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCC_OscConfig+0x548>
 8002a48:	e014      	b.n	8002a74 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fd8b 	bl	8001564 <HAL_GetTick>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a52:	e009      	b.n	8002a68 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fd86 	bl	8001564 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	4a47      	ldr	r2, [pc, #284]	; (8002b7c <HAL_RCC_OscConfig+0x69c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0b5      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d1ef      	bne.n	8002a54 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a74:	2323      	movs	r3, #35	; 0x23
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a82:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002a84:	493e      	ldr	r1, [pc, #248]	; (8002b80 <HAL_RCC_OscConfig+0x6a0>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5b4>
 8002a92:	e09e      	b.n	8002bd2 <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d100      	bne.n	8002a9c <HAL_RCC_OscConfig+0x5bc>
 8002a9a:	e077      	b.n	8002b8c <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d145      	bne.n	8002b30 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002aaa:	4936      	ldr	r1, [pc, #216]	; (8002b84 <HAL_RCC_OscConfig+0x6a4>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fd58 	bl	8001564 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe fd53 	bl	8001564 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e083      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	049b      	lsls	r3, r3, #18
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <HAL_RCC_OscConfig+0x6a8>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	431a      	orrs	r2, r3
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	0449      	lsls	r1, r1, #17
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7fe fd2d 	bl	8001564 <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fd28 	bl	8001564 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e058      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	049b      	lsls	r3, r3, #18
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x630>
 8002b2e:	e050      	b.n	8002bd2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002b36:	4913      	ldr	r1, [pc, #76]	; (8002b84 <HAL_RCC_OscConfig+0x6a4>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fd12 	bl	8001564 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fd0d 	bl	8001564 <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e03d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCC_OscConfig+0x688>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	049b      	lsls	r3, r3, #18
 8002b60:	4013      	ands	r3, r2
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x666>
 8002b64:	e035      	b.n	8002bd2 <HAL_RCC_OscConfig+0x6f2>
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	ffff1fff 	.word	0xffff1fff
 8002b70:	fffffeff 	.word	0xfffffeff
 8002b74:	40007000 	.word	0x40007000
 8002b78:	fffffbff 	.word	0xfffffbff
 8002b7c:	00001388 	.word	0x00001388
 8002b80:	efffffff 	.word	0xefffffff
 8002b84:	feffffff 	.word	0xfeffffff
 8002b88:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x6fc>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10f      	bne.n	8002bce <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	23f0      	movs	r3, #240	; 0xf0
 8002bb2:	039b      	lsls	r3, r3, #14
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b00a      	add	sp, #40	; 0x28
 8002bda:	bdb0      	pop	{r4, r5, r7, pc}
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e129      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b96      	ldr	r3, [pc, #600]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d91e      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b93      	ldr	r3, [pc, #588]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4393      	bics	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	4b90      	ldr	r3, [pc, #576]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c14:	f7fe fca6 	bl	8001564 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1c:	e009      	b.n	8002c32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1e:	f7fe fca1 	bl	8001564 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	4a8a      	ldr	r2, [pc, #552]	; (8002e54 <HAL_RCC_ClockConfig+0x274>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e10a      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	4013      	ands	r3, r2
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1ee      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2202      	movs	r2, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4a:	4b83      	ldr	r3, [pc, #524]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	22f0      	movs	r2, #240	; 0xf0
 8002c50:	4393      	bics	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d100      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x8a>
 8002c68:	e089      	b.n	8002d7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c72:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	029b      	lsls	r3, r3, #10
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d120      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0e2      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	049b      	lsls	r3, r3, #18
 8002c92:	4013      	ands	r3, r2
 8002c94:	d114      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0d6      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d109      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0cb      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cb0:	4b69      	ldr	r3, [pc, #420]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0c3      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc0:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	4393      	bics	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4b62      	ldr	r3, [pc, #392]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fc46 	bl	8001564 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d111      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce4:	e009      	b.n	8002cfa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce6:	f7fe fc3d 	bl	8001564 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x274>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0a6      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	220c      	movs	r2, #12
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d1ef      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x106>
 8002d06:	e03a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d111      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d12:	f7fe fc27 	bl	8001564 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x274>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e090      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d26:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d1ef      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x132>
 8002d32:	e024      	b.n	8002d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d11b      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3e:	f7fe fc11 	bl	8001564 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a42      	ldr	r2, [pc, #264]	; (8002e54 <HAL_RCC_ClockConfig+0x274>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e07a      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	220c      	movs	r2, #12
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d1ef      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x15e>
 8002d5e:	e00e      	b.n	8002d7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d60:	f7fe fc00 	bl	8001564 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <HAL_RCC_ClockConfig+0x274>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e069      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d74:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	220c      	movs	r2, #12
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7e:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d21e      	bcs.n	8002dca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8c:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2201      	movs	r2, #1
 8002d92:	4393      	bics	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fbe1 	bl	8001564 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	e009      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe fbdc 	bl	8001564 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <HAL_RCC_ClockConfig+0x274>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e045      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbc:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCC_ClockConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d1ee      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_RCC_ClockConfig+0x27c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2208      	movs	r2, #8
 8002dee:	4013      	ands	r3, r2
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_RCC_ClockConfig+0x280>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	00da      	lsls	r2, r3, #3
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e08:	f000 f832 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e0c:	0001      	movs	r1, r0
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_RCC_ClockConfig+0x278>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	220f      	movs	r2, #15
 8002e16:	4013      	ands	r3, r2
 8002e18:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <HAL_RCC_ClockConfig+0x284>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	000a      	movs	r2, r1
 8002e1e:	40da      	lsrs	r2, r3
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_RCC_ClockConfig+0x288>)
 8002e22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RCC_ClockConfig+0x28c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	250b      	movs	r5, #11
 8002e2a:	197c      	adds	r4, r7, r5
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7fe fb53 	bl	80014d8 <HAL_InitTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e36:	197b      	adds	r3, r7, r5
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8002e3e:	230b      	movs	r3, #11
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	e000      	b.n	8002e48 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b004      	add	sp, #16
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	40022000 	.word	0x40022000
 8002e54:	00001388 	.word	0x00001388
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	fffff8ff 	.word	0xfffff8ff
 8002e60:	ffffc7ff 	.word	0xffffc7ff
 8002e64:	080045f0 	.word	0x080045f0
 8002e68:	20000018 	.word	0x20000018
 8002e6c:	2000001c 	.word	0x2000001c

08002e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e72:	b08f      	sub	sp, #60	; 0x3c
 8002e74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e76:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x130>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e7e:	230c      	movs	r3, #12
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d00f      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x36>
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d010      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x3c>
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d000      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x20>
 8002e8e:	e073      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x130>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2210      	movs	r2, #16
 8002e96:	4013      	ands	r3, r2
 8002e98:	d002      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e9a:	4b42      	ldr	r3, [pc, #264]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e9e:	e079      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ea2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ea4:	e076      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea6:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002eaa:	e073      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	0c9a      	lsrs	r2, r3, #18
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	0d9a      	lsrs	r2, r3, #22
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x130>)
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	025b      	lsls	r3, r3, #9
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002edc:	2300      	movs	r3, #0
 8002ede:	69b8      	ldr	r0, [r7, #24]
 8002ee0:	69f9      	ldr	r1, [r7, #28]
 8002ee2:	f7fd f9bd 	bl	8000260 <__aeabi_lmul>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	000c      	movs	r4, r1
 8002eea:	0018      	movs	r0, r3
 8002eec:	0021      	movs	r1, r4
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f7fd f991 	bl	8000220 <__aeabi_uldivmod>
 8002efe:	0003      	movs	r3, r0
 8002f00:	000c      	movs	r4, r1
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	e035      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x130>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d019      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	68b8      	ldr	r0, [r7, #8]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	f7fd f99e 	bl	8000260 <__aeabi_lmul>
 8002f24:	0003      	movs	r3, r0
 8002f26:	000c      	movs	r4, r1
 8002f28:	0018      	movs	r0, r3
 8002f2a:	0021      	movs	r1, r4
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f7fd f972 	bl	8000220 <__aeabi_uldivmod>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	000c      	movs	r4, r1
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
 8002f42:	e016      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	0018      	movs	r0, r3
 8002f48:	2300      	movs	r3, #0
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f7fd f986 	bl	8000260 <__aeabi_lmul>
 8002f54:	0003      	movs	r3, r0
 8002f56:	000c      	movs	r4, r1
 8002f58:	0018      	movs	r0, r3
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	001d      	movs	r5, r3
 8002f60:	2300      	movs	r3, #0
 8002f62:	001e      	movs	r6, r3
 8002f64:	002a      	movs	r2, r5
 8002f66:	0033      	movs	r3, r6
 8002f68:	f7fd f95a 	bl	8000220 <__aeabi_uldivmod>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	000c      	movs	r4, r1
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f76:	e00d      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x130>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0b5b      	lsrs	r3, r3, #13
 8002f7e:	2207      	movs	r2, #7
 8002f80:	4013      	ands	r3, r2
 8002f82:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	3301      	adds	r3, #1
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	0212      	lsls	r2, r2, #8
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	0013      	movs	r3, r2
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b00f      	add	sp, #60	; 0x3c
 8002f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	003d0900 	.word	0x003d0900
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	08004600 	.word	0x08004600

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002fb8:	2317      	movs	r3, #23
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d100      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002fca:	e0c3      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fcc:	4b82      	ldr	r3, [pc, #520]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	055b      	lsls	r3, r3, #21
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d10a      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fdc:	4b7e      	ldr	r3, [pc, #504]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	0549      	lsls	r1, r1, #21
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002fe6:	2317      	movs	r3, #23
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b7b      	ldr	r3, [pc, #492]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d11a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b78      	ldr	r3, [pc, #480]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b77      	ldr	r3, [pc, #476]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	0049      	lsls	r1, r1, #1
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003008:	f7fe faac 	bl	8001564 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe faa7 	bl	8001564 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0d4      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d0f0      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003030:	4b69      	ldr	r3, [pc, #420]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	23c0      	movs	r3, #192	; 0xc0
 8003036:	039b      	lsls	r3, r3, #14
 8003038:	4013      	ands	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	23c0      	movs	r3, #192	; 0xc0
 8003042:	039b      	lsls	r3, r3, #14
 8003044:	4013      	ands	r3, r2
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d013      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	23c0      	movs	r3, #192	; 0xc0
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	401a      	ands	r2, r3
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	429a      	cmp	r2, r3
 800305c:	d10a      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800305e:	4b5e      	ldr	r3, [pc, #376]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	401a      	ands	r2, r3
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	029b      	lsls	r3, r3, #10
 800306c:	429a      	cmp	r2, r3
 800306e:	d101      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ac      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003074:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003078:	23c0      	movs	r3, #192	; 0xc0
 800307a:	029b      	lsls	r3, r3, #10
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03b      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	23c0      	movs	r3, #192	; 0xc0
 800308c:	029b      	lsls	r3, r3, #10
 800308e:	4013      	ands	r3, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	429a      	cmp	r2, r3
 8003094:	d033      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2220      	movs	r2, #32
 800309c:	4013      	ands	r3, r2
 800309e:	d02e      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030a0:	4b4d      	ldr	r3, [pc, #308]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	4a4e      	ldr	r2, [pc, #312]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030aa:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ae:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	0309      	lsls	r1, r1, #12
 80030b4:	430a      	orrs	r2, r1
 80030b6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030b8:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030bc:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030be:	4949      	ldr	r1, [pc, #292]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80030c4:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4013      	ands	r3, r2
 80030d2:	d014      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fa46 	bl	8001564 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030dc:	e009      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fa41 	bl	8001564 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	4a3f      	ldr	r2, [pc, #252]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e06d      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030f2:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80030f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	d0ef      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	23c0      	movs	r3, #192	; 0xc0
 8003104:	029b      	lsls	r3, r3, #10
 8003106:	401a      	ands	r2, r3
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	029b      	lsls	r3, r3, #10
 800310c:	429a      	cmp	r2, r3
 800310e:	d10c      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a35      	ldr	r2, [pc, #212]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	23c0      	movs	r3, #192	; 0xc0
 8003120:	039b      	lsls	r3, r3, #14
 8003122:	401a      	ands	r2, r3
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800312c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	23c0      	movs	r3, #192	; 0xc0
 8003134:	029b      	lsls	r3, r3, #10
 8003136:	401a      	ands	r2, r3
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800313a:	430a      	orrs	r2, r1
 800313c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800313e:	2317      	movs	r3, #23
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800314a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800314e:	4928      	ldr	r1, [pc, #160]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003150:	400a      	ands	r2, r1
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2202      	movs	r2, #2
 800315a:	4013      	ands	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	220c      	movs	r2, #12
 8003164:	4393      	bics	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800316e:	430a      	orrs	r2, r1
 8003170:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2204      	movs	r2, #4
 8003178:	4013      	ands	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800318c:	430a      	orrs	r2, r1
 800318e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2208      	movs	r2, #8
 8003196:	4013      	ands	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	4013      	ands	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
 80031e0:	fffcffff 	.word	0xfffcffff
 80031e4:	fff7ffff 	.word	0xfff7ffff
 80031e8:	00001388 	.word	0x00001388
 80031ec:	ffcfffff 	.word	0xffcfffff
 80031f0:	efffffff 	.word	0xefffffff
 80031f4:	fffff3ff 	.word	0xfffff3ff
 80031f8:	ffffcfff 	.word	0xffffcfff
 80031fc:	fff3ffff 	.word	0xfff3ffff

08003200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e07b      	b.n	800330a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	2382      	movs	r3, #130	; 0x82
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	429a      	cmp	r2, r3
 8003224:	d009      	beq.n	800323a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	61da      	str	r2, [r3, #28]
 800322c:	e005      	b.n	800323a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2251      	movs	r2, #81	; 0x51
 8003244:	5c9b      	ldrb	r3, [r3, r2]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2250      	movs	r2, #80	; 0x50
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0018      	movs	r0, r3
 8003258:	f7fd ffaa 	bl	80011b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2251      	movs	r2, #81	; 0x51
 8003260:	2102      	movs	r1, #2
 8003262:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	438a      	bics	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	2382      	movs	r3, #130	; 0x82
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	401a      	ands	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	2384      	movs	r3, #132	; 0x84
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	400b      	ands	r3, r1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68d9      	ldr	r1, [r3, #12]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	400b      	ands	r3, r1
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2102      	movs	r1, #2
 800329c:	400b      	ands	r3, r1
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	2101      	movs	r1, #1
 80032a6:	400b      	ands	r3, r1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6999      	ldr	r1, [r3, #24]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	400b      	ands	r3, r1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	2138      	movs	r1, #56	; 0x38
 80032bc:	400b      	ands	r3, r1
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	400b      	ands	r3, r1
 80032c8:	431a      	orrs	r2, r3
 80032ca:	0011      	movs	r1, r2
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	019b      	lsls	r3, r3, #6
 80032d4:	401a      	ands	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	2204      	movs	r2, #4
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2210      	movs	r2, #16
 80032f0:	401a      	ands	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2251      	movs	r2, #81	; 0x51
 8003304:	2101      	movs	r1, #1
 8003306:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b002      	add	sp, #8
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b088      	sub	sp, #32
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	1dbb      	adds	r3, r7, #6
 8003320:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003322:	231f      	movs	r3, #31
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2250      	movs	r2, #80	; 0x50
 800332e:	5c9b      	ldrb	r3, [r3, r2]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_SPI_Transmit+0x26>
 8003334:	2302      	movs	r3, #2
 8003336:	e13e      	b.n	80035b6 <HAL_SPI_Transmit+0x2a4>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2250      	movs	r2, #80	; 0x50
 800333c:	2101      	movs	r1, #1
 800333e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003340:	f7fe f910 	bl	8001564 <HAL_GetTick>
 8003344:	0003      	movs	r3, r0
 8003346:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003348:	2316      	movs	r3, #22
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	1dba      	adds	r2, r7, #6
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2251      	movs	r2, #81	; 0x51
 8003356:	5c9b      	ldrb	r3, [r3, r2]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d004      	beq.n	8003368 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800335e:	231f      	movs	r3, #31
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
    goto error;
 8003366:	e11b      	b.n	80035a0 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_SPI_Transmit+0x64>
 800336e:	1dbb      	adds	r3, r7, #6
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003376:	231f      	movs	r3, #31
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
    goto error;
 800337e:	e10f      	b.n	80035a0 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2251      	movs	r2, #81	; 0x51
 8003384:	2103      	movs	r1, #3
 8003386:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1dba      	adds	r2, r7, #6
 8003398:	8812      	ldrh	r2, [r2, #0]
 800339a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1dba      	adds	r2, r7, #6
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d110      	bne.n	80033f0 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	438a      	bics	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	01c9      	lsls	r1, r1, #7
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d007      	beq.n	800340e <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	429a      	cmp	r2, r3
 8003418:	d14e      	bne.n	80034b8 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_SPI_Transmit+0x11a>
 8003422:	2316      	movs	r3, #22
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d13f      	bne.n	80034ac <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003450:	e02c      	b.n	80034ac <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2202      	movs	r2, #2
 800345a:	4013      	ands	r3, r2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d112      	bne.n	8003486 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	86da      	strh	r2, [r3, #54]	; 0x36
 8003484:	e012      	b.n	80034ac <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003486:	f7fe f86d 	bl	8001564 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d802      	bhi.n	800349c <HAL_SPI_Transmit+0x18a>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_SPI_Transmit+0x190>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80034a2:	231f      	movs	r3, #31
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2203      	movs	r2, #3
 80034a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80034aa:	e079      	b.n	80035a0 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1cd      	bne.n	8003452 <HAL_SPI_Transmit+0x140>
 80034b6:	e04f      	b.n	8003558 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_SPI_Transmit+0x1b8>
 80034c0:	2316      	movs	r3, #22
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d141      	bne.n	800354e <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034f0:	e02d      	b.n	800354e <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2202      	movs	r2, #2
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d113      	bne.n	8003528 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	86da      	strh	r2, [r3, #54]	; 0x36
 8003526:	e012      	b.n	800354e <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003528:	f7fe f81c 	bl	8001564 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d802      	bhi.n	800353e <HAL_SPI_Transmit+0x22c>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Transmit+0x232>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003544:	231f      	movs	r3, #31
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2203      	movs	r2, #3
 800354a:	701a      	strb	r2, [r3, #0]
          goto error;
 800354c:	e028      	b.n	80035a0 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1cc      	bne.n	80034f2 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	6839      	ldr	r1, [r7, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	0018      	movs	r0, r3
 8003560:	f000 f8bc 	bl	80036dc <SPI_EndRxTxTransaction>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d002      	beq.n	800356e <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	2b00      	cmp	r3, #0
 8003592:	d004      	beq.n	800359e <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003594:	231f      	movs	r3, #31
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e000      	b.n	80035a0 <HAL_SPI_Transmit+0x28e>
  }

error:
 800359e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2251      	movs	r2, #81	; 0x51
 80035a4:	2101      	movs	r1, #1
 80035a6:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2250      	movs	r2, #80	; 0x50
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80035b0:	231f      	movs	r3, #31
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	781b      	ldrb	r3, [r3, #0]
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b008      	add	sp, #32
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035d0:	f7fd ffc8 	bl	8001564 <HAL_GetTick>
 80035d4:	0002      	movs	r2, r0
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035e0:	f7fd ffc0 	bl	8001564 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	015b      	lsls	r3, r3, #5
 80035ee:	0d1b      	lsrs	r3, r3, #20
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	4353      	muls	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f6:	e058      	b.n	80036aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	3301      	adds	r3, #1
 80035fc:	d055      	beq.n	80036aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035fe:	f7fd ffb1 	bl	8001564 <HAL_GetTick>
 8003602:	0002      	movs	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	429a      	cmp	r2, r3
 800360c:	d902      	bls.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x54>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d142      	bne.n	800369a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	21e0      	movs	r1, #224	; 0xe0
 8003620:	438a      	bics	r2, r1
 8003622:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	2382      	movs	r3, #130	; 0x82
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	429a      	cmp	r2, r3
 800362e:	d113      	bne.n	8003658 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	429a      	cmp	r2, r3
 800363a:	d005      	beq.n	8003648 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	429a      	cmp	r2, r3
 8003646:	d107      	bne.n	8003658 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2140      	movs	r1, #64	; 0x40
 8003654:	438a      	bics	r2, r1
 8003656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	019b      	lsls	r3, r3, #6
 8003660:	429a      	cmp	r2, r3
 8003662:	d110      	bne.n	8003686 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	491a      	ldr	r1, [pc, #104]	; (80036d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003670:	400a      	ands	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	0189      	lsls	r1, r1, #6
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2251      	movs	r2, #81	; 0x51
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2250      	movs	r2, #80	; 0x50
 8003692:	2100      	movs	r1, #0
 8003694:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e017      	b.n	80036ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4013      	ands	r3, r2
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	425a      	negs	r2, r3
 80036ba:	4153      	adcs	r3, r2
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	001a      	movs	r2, r3
 80036c0:	1dfb      	adds	r3, r7, #7
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d197      	bne.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b008      	add	sp, #32
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	20000018 	.word	0x20000018
 80036d8:	ffffdfff 	.word	0xffffdfff

080036dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <SPI_EndRxTxTransaction+0x84>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	491d      	ldr	r1, [pc, #116]	; (8003764 <SPI_EndRxTxTransaction+0x88>)
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fc fd0a 	bl	8000108 <__udivsi3>
 80036f4:	0003      	movs	r3, r0
 80036f6:	001a      	movs	r2, r3
 80036f8:	0013      	movs	r3, r2
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	189b      	adds	r3, r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	2382      	movs	r3, #130	; 0x82
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	429a      	cmp	r2, r3
 8003710:	d112      	bne.n	8003738 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	0013      	movs	r3, r2
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	f7ff ff4e 	bl	80035c0 <SPI_WaitFlagStateUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d016      	beq.n	8003756 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	2220      	movs	r2, #32
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e00f      	b.n	8003758 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3b01      	subs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	4013      	ands	r3, r2
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d0f2      	beq.n	8003738 <SPI_EndRxTxTransaction+0x5c>
 8003752:	e000      	b.n	8003756 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003754:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000018 	.word	0x20000018
 8003764:	016e3600 	.word	0x016e3600

08003768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e032      	b.n	80037e0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2239      	movs	r2, #57	; 0x39
 800377e:	5c9b      	ldrb	r3, [r3, r2]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2238      	movs	r2, #56	; 0x38
 800378a:	2100      	movs	r1, #0
 800378c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f7fd fe0f 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2239      	movs	r2, #57	; 0x39
 800379a:	2102      	movs	r1, #2
 800379c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	0019      	movs	r1, r3
 80037a8:	0010      	movs	r0, r2
 80037aa:	f000 f923 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	223e      	movs	r2, #62	; 0x3e
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	223a      	movs	r2, #58	; 0x3a
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223b      	movs	r2, #59	; 0x3b
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	223c      	movs	r2, #60	; 0x3c
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223d      	movs	r2, #61	; 0x3d
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2239      	movs	r2, #57	; 0x39
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2239      	movs	r2, #57	; 0x39
 80037f4:	5c9b      	ldrb	r3, [r3, r2]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e029      	b.n	8003854 <HAL_TIM_Base_Start+0x6c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2239      	movs	r2, #57	; 0x39
 8003804:	2102      	movs	r1, #2
 8003806:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	05db      	lsls	r3, r3, #23
 8003810:	429a      	cmp	r2, r3
 8003812:	d004      	beq.n	800381e <HAL_TIM_Base_Start+0x36>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a10      	ldr	r2, [pc, #64]	; (800385c <HAL_TIM_Base_Start+0x74>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d111      	bne.n	8003842 <HAL_TIM_Base_Start+0x5a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2207      	movs	r2, #7
 8003826:	4013      	ands	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b06      	cmp	r3, #6
 800382e:	d010      	beq.n	8003852 <HAL_TIM_Base_Start+0x6a>
    {
      __HAL_TIM_ENABLE(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	e007      	b.n	8003852 <HAL_TIM_Base_Start+0x6a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	430a      	orrs	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40010800 	.word	0x40010800

08003860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	230f      	movs	r3, #15
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2238      	movs	r2, #56	; 0x38
 8003876:	5c9b      	ldrb	r3, [r3, r2]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIM_ConfigClockSource+0x20>
 800387c:	2302      	movs	r3, #2
 800387e:	e0b2      	b.n	80039e6 <HAL_TIM_ConfigClockSource+0x186>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2238      	movs	r2, #56	; 0x38
 8003884:	2101      	movs	r1, #1
 8003886:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2239      	movs	r2, #57	; 0x39
 800388c:	2102      	movs	r1, #2
 800388e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2277      	movs	r2, #119	; 0x77
 800389c:	4393      	bics	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4a53      	ldr	r2, [pc, #332]	; (80039f0 <HAL_TIM_ConfigClockSource+0x190>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d100      	bne.n	80038ba <HAL_TIM_ConfigClockSource+0x5a>
 80038b8:	e06b      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x132>
 80038ba:	d80e      	bhi.n	80038da <HAL_TIM_ConfigClockSource+0x7a>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d100      	bne.n	80038c2 <HAL_TIM_ConfigClockSource+0x62>
 80038c0:	e077      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x152>
 80038c2:	d803      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x6c>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d100      	bne.n	80038ca <HAL_TIM_ConfigClockSource+0x6a>
 80038c8:	e073      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x152>
 80038ca:	e07b      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x164>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d100      	bne.n	80038d2 <HAL_TIM_ConfigClockSource+0x72>
 80038d0:	e06f      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x152>
 80038d2:	2b30      	cmp	r3, #48	; 0x30
 80038d4:	d100      	bne.n	80038d8 <HAL_TIM_ConfigClockSource+0x78>
 80038d6:	e06c      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x152>
 80038d8:	e074      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x164>
 80038da:	2b70      	cmp	r3, #112	; 0x70
 80038dc:	d00e      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x9c>
 80038de:	d804      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x8a>
 80038e0:	2b50      	cmp	r3, #80	; 0x50
 80038e2:	d036      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0xf2>
 80038e4:	2b60      	cmp	r3, #96	; 0x60
 80038e6:	d044      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x112>
 80038e8:	e06c      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x164>
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	0152      	lsls	r2, r2, #5
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d06d      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x16e>
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	0192      	lsls	r2, r2, #6
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d017      	beq.n	800392a <HAL_TIM_ConfigClockSource+0xca>
 80038fa:	e063      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f000 f936 	bl	8003b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2277      	movs	r2, #119	; 0x77
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
      break;
 8003928:	e052      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f000 f91f 	bl	8003b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	01c9      	lsls	r1, r1, #7
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
      break;
 8003950:	e03e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	001a      	movs	r2, r3
 8003960:	f000 f892 	bl	8003a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2150      	movs	r1, #80	; 0x50
 800396a:	0018      	movs	r0, r3
 800396c:	f000 f8ec 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003970:	e02e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	001a      	movs	r2, r3
 8003980:	f000 f8b0 	bl	8003ae4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2160      	movs	r1, #96	; 0x60
 800398a:	0018      	movs	r0, r3
 800398c:	f000 f8dc 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003990:	e01e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	001a      	movs	r2, r3
 80039a0:	f000 f872 	bl	8003a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2140      	movs	r1, #64	; 0x40
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 f8cc 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e00e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0019      	movs	r1, r3
 80039bc:	0010      	movs	r0, r2
 80039be:	f000 f8c3 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 80039c2:	e005      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
      break;
 80039cc:	e000      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x170>
      break;
 80039ce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2239      	movs	r2, #57	; 0x39
 80039d4:	2101      	movs	r1, #1
 80039d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2238      	movs	r2, #56	; 0x38
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]

  return status;
 80039e0:	230f      	movs	r3, #15
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	781b      	ldrb	r3, [r3, #0]
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	ffff00ff 	.word	0xffff00ff

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	05db      	lsls	r3, r3, #23
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0x22>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <TIM_Base_SetConfig+0x8c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2270      	movs	r2, #112	; 0x70
 8003a1a:	4393      	bics	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d003      	beq.n	8003a3a <TIM_Base_SetConfig+0x46>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <TIM_Base_SetConfig+0x8c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d108      	bne.n	8003a4c <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a11      	ldr	r2, [pc, #68]	; (8003a84 <TIM_Base_SetConfig+0x90>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	4393      	bics	r3, r2
 8003a52:	001a      	movs	r2, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	615a      	str	r2, [r3, #20]
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010800 	.word	0x40010800
 8003a84:	fffffcff 	.word	0xfffffcff

08003a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	22f0      	movs	r2, #240	; 0xf0
 8003ab2:	4393      	bics	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b006      	add	sp, #24
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2210      	movs	r2, #16
 8003af6:	4393      	bics	r3, r2
 8003af8:	001a      	movs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <TIM_TI2_ConfigInputStage+0x60>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	031b      	lsls	r3, r3, #12
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	22a0      	movs	r2, #160	; 0xa0
 8003b20:	4393      	bics	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b006      	add	sp, #24
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	ffff0fff 	.word	0xffff0fff

08003b48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2270      	movs	r2, #112	; 0x70
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	2207      	movs	r2, #7
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <TIM_ETR_SetConfig+0x3c>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	021a      	lsls	r2, r3, #8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	609a      	str	r2, [r3, #8]
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b006      	add	sp, #24
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	ffff00ff 	.word	0xffff00ff

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2238      	movs	r2, #56	; 0x38
 8003bca:	5c9b      	ldrb	r3, [r3, r2]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e03d      	b.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2238      	movs	r2, #56	; 0x38
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2239      	movs	r2, #57	; 0x39
 8003be0:	2102      	movs	r1, #2
 8003be2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2270      	movs	r2, #112	; 0x70
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	05db      	lsls	r3, r3, #23
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d004      	beq.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d10c      	bne.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	4393      	bics	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2239      	movs	r2, #57	; 0x39
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2238      	movs	r2, #56	; 0x38
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40010800 	.word	0x40010800

08003c5c <__errno>:
 8003c5c:	4b01      	ldr	r3, [pc, #4]	; (8003c64 <__errno+0x8>)
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	4770      	bx	lr
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000024 	.word	0x20000024

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	4d0c      	ldr	r5, [pc, #48]	; (8003ca0 <__libc_init_array+0x38>)
 8003c6e:	4c0d      	ldr	r4, [pc, #52]	; (8003ca4 <__libc_init_array+0x3c>)
 8003c70:	1b64      	subs	r4, r4, r5
 8003c72:	10a4      	asrs	r4, r4, #2
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	2600      	movs	r6, #0
 8003c7a:	f000 fc29 	bl	80044d0 <_init>
 8003c7e:	4d0a      	ldr	r5, [pc, #40]	; (8003ca8 <__libc_init_array+0x40>)
 8003c80:	4c0a      	ldr	r4, [pc, #40]	; (8003cac <__libc_init_array+0x44>)
 8003c82:	1b64      	subs	r4, r4, r5
 8003c84:	10a4      	asrs	r4, r4, #2
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	00b3      	lsls	r3, r6, #2
 8003c8e:	58eb      	ldr	r3, [r5, r3]
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	00b3      	lsls	r3, r6, #2
 8003c98:	58eb      	ldr	r3, [r5, r3]
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08004644 	.word	0x08004644
 8003ca4:	08004644 	.word	0x08004644
 8003ca8:	08004644 	.word	0x08004644
 8003cac:	08004648 	.word	0x08004648

08003cb0 <memset>:
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	1812      	adds	r2, r2, r0
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d100      	bne.n	8003cba <memset+0xa>
 8003cb8:	4770      	bx	lr
 8003cba:	7019      	strb	r1, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	e7f9      	b.n	8003cb4 <memset+0x4>

08003cc0 <siprintf>:
 8003cc0:	b40e      	push	{r1, r2, r3}
 8003cc2:	b500      	push	{lr}
 8003cc4:	490b      	ldr	r1, [pc, #44]	; (8003cf4 <siprintf+0x34>)
 8003cc6:	b09c      	sub	sp, #112	; 0x70
 8003cc8:	ab1d      	add	r3, sp, #116	; 0x74
 8003cca:	9002      	str	r0, [sp, #8]
 8003ccc:	9006      	str	r0, [sp, #24]
 8003cce:	9107      	str	r1, [sp, #28]
 8003cd0:	9104      	str	r1, [sp, #16]
 8003cd2:	4809      	ldr	r0, [pc, #36]	; (8003cf8 <siprintf+0x38>)
 8003cd4:	4909      	ldr	r1, [pc, #36]	; (8003cfc <siprintf+0x3c>)
 8003cd6:	cb04      	ldmia	r3!, {r2}
 8003cd8:	9105      	str	r1, [sp, #20]
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	a902      	add	r1, sp, #8
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	f000 f870 	bl	8003dc4 <_svfiprintf_r>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9a02      	ldr	r2, [sp, #8]
 8003ce8:	7013      	strb	r3, [r2, #0]
 8003cea:	b01c      	add	sp, #112	; 0x70
 8003cec:	bc08      	pop	{r3}
 8003cee:	b003      	add	sp, #12
 8003cf0:	4718      	bx	r3
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	7fffffff 	.word	0x7fffffff
 8003cf8:	20000024 	.word	0x20000024
 8003cfc:	ffff0208 	.word	0xffff0208

08003d00 <__ssputs_r>:
 8003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d02:	688e      	ldr	r6, [r1, #8]
 8003d04:	b085      	sub	sp, #20
 8003d06:	0007      	movs	r7, r0
 8003d08:	000c      	movs	r4, r1
 8003d0a:	9203      	str	r2, [sp, #12]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	429e      	cmp	r6, r3
 8003d10:	d83c      	bhi.n	8003d8c <__ssputs_r+0x8c>
 8003d12:	2390      	movs	r3, #144	; 0x90
 8003d14:	898a      	ldrh	r2, [r1, #12]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	421a      	tst	r2, r3
 8003d1a:	d034      	beq.n	8003d86 <__ssputs_r+0x86>
 8003d1c:	2503      	movs	r5, #3
 8003d1e:	6909      	ldr	r1, [r1, #16]
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	1a5b      	subs	r3, r3, r1
 8003d24:	9302      	str	r3, [sp, #8]
 8003d26:	6963      	ldr	r3, [r4, #20]
 8003d28:	9802      	ldr	r0, [sp, #8]
 8003d2a:	435d      	muls	r5, r3
 8003d2c:	0feb      	lsrs	r3, r5, #31
 8003d2e:	195d      	adds	r5, r3, r5
 8003d30:	9b01      	ldr	r3, [sp, #4]
 8003d32:	106d      	asrs	r5, r5, #1
 8003d34:	3301      	adds	r3, #1
 8003d36:	181b      	adds	r3, r3, r0
 8003d38:	42ab      	cmp	r3, r5
 8003d3a:	d900      	bls.n	8003d3e <__ssputs_r+0x3e>
 8003d3c:	001d      	movs	r5, r3
 8003d3e:	0553      	lsls	r3, r2, #21
 8003d40:	d532      	bpl.n	8003da8 <__ssputs_r+0xa8>
 8003d42:	0029      	movs	r1, r5
 8003d44:	0038      	movs	r0, r7
 8003d46:	f000 fb23 	bl	8004390 <_malloc_r>
 8003d4a:	1e06      	subs	r6, r0, #0
 8003d4c:	d109      	bne.n	8003d62 <__ssputs_r+0x62>
 8003d4e:	230c      	movs	r3, #12
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	2340      	movs	r3, #64	; 0x40
 8003d54:	2001      	movs	r0, #1
 8003d56:	89a2      	ldrh	r2, [r4, #12]
 8003d58:	4240      	negs	r0, r0
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	b005      	add	sp, #20
 8003d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d62:	9a02      	ldr	r2, [sp, #8]
 8003d64:	6921      	ldr	r1, [r4, #16]
 8003d66:	f000 faac 	bl	80042c2 <memcpy>
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <__ssputs_r+0xc0>)
 8003d6e:	401a      	ands	r2, r3
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	4313      	orrs	r3, r2
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	9b02      	ldr	r3, [sp, #8]
 8003d78:	6126      	str	r6, [r4, #16]
 8003d7a:	18f6      	adds	r6, r6, r3
 8003d7c:	6026      	str	r6, [r4, #0]
 8003d7e:	6165      	str	r5, [r4, #20]
 8003d80:	9e01      	ldr	r6, [sp, #4]
 8003d82:	1aed      	subs	r5, r5, r3
 8003d84:	60a5      	str	r5, [r4, #8]
 8003d86:	9b01      	ldr	r3, [sp, #4]
 8003d88:	429e      	cmp	r6, r3
 8003d8a:	d900      	bls.n	8003d8e <__ssputs_r+0x8e>
 8003d8c:	9e01      	ldr	r6, [sp, #4]
 8003d8e:	0032      	movs	r2, r6
 8003d90:	9903      	ldr	r1, [sp, #12]
 8003d92:	6820      	ldr	r0, [r4, #0]
 8003d94:	f000 fa9e 	bl	80042d4 <memmove>
 8003d98:	68a3      	ldr	r3, [r4, #8]
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	1b9b      	subs	r3, r3, r6
 8003d9e:	60a3      	str	r3, [r4, #8]
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	199e      	adds	r6, r3, r6
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	e7da      	b.n	8003d5e <__ssputs_r+0x5e>
 8003da8:	002a      	movs	r2, r5
 8003daa:	0038      	movs	r0, r7
 8003dac:	f000 fb4e 	bl	800444c <_realloc_r>
 8003db0:	1e06      	subs	r6, r0, #0
 8003db2:	d1e0      	bne.n	8003d76 <__ssputs_r+0x76>
 8003db4:	6921      	ldr	r1, [r4, #16]
 8003db6:	0038      	movs	r0, r7
 8003db8:	f000 faa0 	bl	80042fc <_free_r>
 8003dbc:	e7c7      	b.n	8003d4e <__ssputs_r+0x4e>
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	fffffb7f 	.word	0xfffffb7f

08003dc4 <_svfiprintf_r>:
 8003dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc6:	b0a1      	sub	sp, #132	; 0x84
 8003dc8:	9003      	str	r0, [sp, #12]
 8003dca:	001d      	movs	r5, r3
 8003dcc:	898b      	ldrh	r3, [r1, #12]
 8003dce:	000f      	movs	r7, r1
 8003dd0:	0016      	movs	r6, r2
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	d511      	bpl.n	8003dfa <_svfiprintf_r+0x36>
 8003dd6:	690b      	ldr	r3, [r1, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10e      	bne.n	8003dfa <_svfiprintf_r+0x36>
 8003ddc:	2140      	movs	r1, #64	; 0x40
 8003dde:	f000 fad7 	bl	8004390 <_malloc_r>
 8003de2:	6038      	str	r0, [r7, #0]
 8003de4:	6138      	str	r0, [r7, #16]
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d105      	bne.n	8003df6 <_svfiprintf_r+0x32>
 8003dea:	230c      	movs	r3, #12
 8003dec:	9a03      	ldr	r2, [sp, #12]
 8003dee:	3801      	subs	r0, #1
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	b021      	add	sp, #132	; 0x84
 8003df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df6:	2340      	movs	r3, #64	; 0x40
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	ac08      	add	r4, sp, #32
 8003dfe:	6163      	str	r3, [r4, #20]
 8003e00:	3320      	adds	r3, #32
 8003e02:	7663      	strb	r3, [r4, #25]
 8003e04:	3310      	adds	r3, #16
 8003e06:	76a3      	strb	r3, [r4, #26]
 8003e08:	9507      	str	r5, [sp, #28]
 8003e0a:	0035      	movs	r5, r6
 8003e0c:	782b      	ldrb	r3, [r5, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <_svfiprintf_r+0x52>
 8003e12:	2b25      	cmp	r3, #37	; 0x25
 8003e14:	d146      	bne.n	8003ea4 <_svfiprintf_r+0xe0>
 8003e16:	1bab      	subs	r3, r5, r6
 8003e18:	9305      	str	r3, [sp, #20]
 8003e1a:	d00c      	beq.n	8003e36 <_svfiprintf_r+0x72>
 8003e1c:	0032      	movs	r2, r6
 8003e1e:	0039      	movs	r1, r7
 8003e20:	9803      	ldr	r0, [sp, #12]
 8003e22:	f7ff ff6d 	bl	8003d00 <__ssputs_r>
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	d100      	bne.n	8003e2c <_svfiprintf_r+0x68>
 8003e2a:	e0ae      	b.n	8003f8a <_svfiprintf_r+0x1c6>
 8003e2c:	6962      	ldr	r2, [r4, #20]
 8003e2e:	9b05      	ldr	r3, [sp, #20]
 8003e30:	4694      	mov	ip, r2
 8003e32:	4463      	add	r3, ip
 8003e34:	6163      	str	r3, [r4, #20]
 8003e36:	782b      	ldrb	r3, [r5, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d100      	bne.n	8003e3e <_svfiprintf_r+0x7a>
 8003e3c:	e0a5      	b.n	8003f8a <_svfiprintf_r+0x1c6>
 8003e3e:	2201      	movs	r2, #1
 8003e40:	2300      	movs	r3, #0
 8003e42:	4252      	negs	r2, r2
 8003e44:	6062      	str	r2, [r4, #4]
 8003e46:	a904      	add	r1, sp, #16
 8003e48:	3254      	adds	r2, #84	; 0x54
 8003e4a:	1852      	adds	r2, r2, r1
 8003e4c:	1c6e      	adds	r6, r5, #1
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	60e3      	str	r3, [r4, #12]
 8003e52:	60a3      	str	r3, [r4, #8]
 8003e54:	7013      	strb	r3, [r2, #0]
 8003e56:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e58:	7831      	ldrb	r1, [r6, #0]
 8003e5a:	2205      	movs	r2, #5
 8003e5c:	4853      	ldr	r0, [pc, #332]	; (8003fac <_svfiprintf_r+0x1e8>)
 8003e5e:	f000 fa25 	bl	80042ac <memchr>
 8003e62:	1c75      	adds	r5, r6, #1
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d11f      	bne.n	8003ea8 <_svfiprintf_r+0xe4>
 8003e68:	6822      	ldr	r2, [r4, #0]
 8003e6a:	06d3      	lsls	r3, r2, #27
 8003e6c:	d504      	bpl.n	8003e78 <_svfiprintf_r+0xb4>
 8003e6e:	2353      	movs	r3, #83	; 0x53
 8003e70:	a904      	add	r1, sp, #16
 8003e72:	185b      	adds	r3, r3, r1
 8003e74:	2120      	movs	r1, #32
 8003e76:	7019      	strb	r1, [r3, #0]
 8003e78:	0713      	lsls	r3, r2, #28
 8003e7a:	d504      	bpl.n	8003e86 <_svfiprintf_r+0xc2>
 8003e7c:	2353      	movs	r3, #83	; 0x53
 8003e7e:	a904      	add	r1, sp, #16
 8003e80:	185b      	adds	r3, r3, r1
 8003e82:	212b      	movs	r1, #43	; 0x2b
 8003e84:	7019      	strb	r1, [r3, #0]
 8003e86:	7833      	ldrb	r3, [r6, #0]
 8003e88:	2b2a      	cmp	r3, #42	; 0x2a
 8003e8a:	d016      	beq.n	8003eba <_svfiprintf_r+0xf6>
 8003e8c:	0035      	movs	r5, r6
 8003e8e:	2100      	movs	r1, #0
 8003e90:	200a      	movs	r0, #10
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	782a      	ldrb	r2, [r5, #0]
 8003e96:	1c6e      	adds	r6, r5, #1
 8003e98:	3a30      	subs	r2, #48	; 0x30
 8003e9a:	2a09      	cmp	r2, #9
 8003e9c:	d94e      	bls.n	8003f3c <_svfiprintf_r+0x178>
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d018      	beq.n	8003ed4 <_svfiprintf_r+0x110>
 8003ea2:	e010      	b.n	8003ec6 <_svfiprintf_r+0x102>
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	e7b1      	b.n	8003e0c <_svfiprintf_r+0x48>
 8003ea8:	4b40      	ldr	r3, [pc, #256]	; (8003fac <_svfiprintf_r+0x1e8>)
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	1ac0      	subs	r0, r0, r3
 8003eae:	2301      	movs	r3, #1
 8003eb0:	4083      	lsls	r3, r0
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	002e      	movs	r6, r5
 8003eb8:	e7ce      	b.n	8003e58 <_svfiprintf_r+0x94>
 8003eba:	9b07      	ldr	r3, [sp, #28]
 8003ebc:	1d19      	adds	r1, r3, #4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	9107      	str	r1, [sp, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db01      	blt.n	8003eca <_svfiprintf_r+0x106>
 8003ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ec8:	e004      	b.n	8003ed4 <_svfiprintf_r+0x110>
 8003eca:	425b      	negs	r3, r3
 8003ecc:	60e3      	str	r3, [r4, #12]
 8003ece:	2302      	movs	r3, #2
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	782b      	ldrb	r3, [r5, #0]
 8003ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ed8:	d10a      	bne.n	8003ef0 <_svfiprintf_r+0x12c>
 8003eda:	786b      	ldrb	r3, [r5, #1]
 8003edc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ede:	d135      	bne.n	8003f4c <_svfiprintf_r+0x188>
 8003ee0:	9b07      	ldr	r3, [sp, #28]
 8003ee2:	3502      	adds	r5, #2
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	9207      	str	r2, [sp, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db2b      	blt.n	8003f46 <_svfiprintf_r+0x182>
 8003eee:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef0:	4e2f      	ldr	r6, [pc, #188]	; (8003fb0 <_svfiprintf_r+0x1ec>)
 8003ef2:	7829      	ldrb	r1, [r5, #0]
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	0030      	movs	r0, r6
 8003ef8:	f000 f9d8 	bl	80042ac <memchr>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d006      	beq.n	8003f0e <_svfiprintf_r+0x14a>
 8003f00:	2340      	movs	r3, #64	; 0x40
 8003f02:	1b80      	subs	r0, r0, r6
 8003f04:	4083      	lsls	r3, r0
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	3501      	adds	r5, #1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	7829      	ldrb	r1, [r5, #0]
 8003f10:	2206      	movs	r2, #6
 8003f12:	4828      	ldr	r0, [pc, #160]	; (8003fb4 <_svfiprintf_r+0x1f0>)
 8003f14:	1c6e      	adds	r6, r5, #1
 8003f16:	7621      	strb	r1, [r4, #24]
 8003f18:	f000 f9c8 	bl	80042ac <memchr>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d03c      	beq.n	8003f9a <_svfiprintf_r+0x1d6>
 8003f20:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <_svfiprintf_r+0x1f4>)
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d125      	bne.n	8003f72 <_svfiprintf_r+0x1ae>
 8003f26:	2207      	movs	r2, #7
 8003f28:	9b07      	ldr	r3, [sp, #28]
 8003f2a:	3307      	adds	r3, #7
 8003f2c:	4393      	bics	r3, r2
 8003f2e:	3308      	adds	r3, #8
 8003f30:	9307      	str	r3, [sp, #28]
 8003f32:	6963      	ldr	r3, [r4, #20]
 8003f34:	9a04      	ldr	r2, [sp, #16]
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	6163      	str	r3, [r4, #20]
 8003f3a:	e766      	b.n	8003e0a <_svfiprintf_r+0x46>
 8003f3c:	4343      	muls	r3, r0
 8003f3e:	2101      	movs	r1, #1
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	0035      	movs	r5, r6
 8003f44:	e7a6      	b.n	8003e94 <_svfiprintf_r+0xd0>
 8003f46:	2301      	movs	r3, #1
 8003f48:	425b      	negs	r3, r3
 8003f4a:	e7d0      	b.n	8003eee <_svfiprintf_r+0x12a>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	200a      	movs	r0, #10
 8003f50:	001a      	movs	r2, r3
 8003f52:	3501      	adds	r5, #1
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	7829      	ldrb	r1, [r5, #0]
 8003f58:	1c6e      	adds	r6, r5, #1
 8003f5a:	3930      	subs	r1, #48	; 0x30
 8003f5c:	2909      	cmp	r1, #9
 8003f5e:	d903      	bls.n	8003f68 <_svfiprintf_r+0x1a4>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0c5      	beq.n	8003ef0 <_svfiprintf_r+0x12c>
 8003f64:	9209      	str	r2, [sp, #36]	; 0x24
 8003f66:	e7c3      	b.n	8003ef0 <_svfiprintf_r+0x12c>
 8003f68:	4342      	muls	r2, r0
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	1852      	adds	r2, r2, r1
 8003f6e:	0035      	movs	r5, r6
 8003f70:	e7f1      	b.n	8003f56 <_svfiprintf_r+0x192>
 8003f72:	ab07      	add	r3, sp, #28
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	003a      	movs	r2, r7
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <_svfiprintf_r+0x1f8>)
 8003f7a:	0021      	movs	r1, r4
 8003f7c:	9803      	ldr	r0, [sp, #12]
 8003f7e:	e000      	b.n	8003f82 <_svfiprintf_r+0x1be>
 8003f80:	bf00      	nop
 8003f82:	9004      	str	r0, [sp, #16]
 8003f84:	9b04      	ldr	r3, [sp, #16]
 8003f86:	3301      	adds	r3, #1
 8003f88:	d1d3      	bne.n	8003f32 <_svfiprintf_r+0x16e>
 8003f8a:	89bb      	ldrh	r3, [r7, #12]
 8003f8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f8e:	065b      	lsls	r3, r3, #25
 8003f90:	d400      	bmi.n	8003f94 <_svfiprintf_r+0x1d0>
 8003f92:	e72e      	b.n	8003df2 <_svfiprintf_r+0x2e>
 8003f94:	2001      	movs	r0, #1
 8003f96:	4240      	negs	r0, r0
 8003f98:	e72b      	b.n	8003df2 <_svfiprintf_r+0x2e>
 8003f9a:	ab07      	add	r3, sp, #28
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	003a      	movs	r2, r7
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <_svfiprintf_r+0x1f8>)
 8003fa2:	0021      	movs	r1, r4
 8003fa4:	9803      	ldr	r0, [sp, #12]
 8003fa6:	f000 f879 	bl	800409c <_printf_i>
 8003faa:	e7ea      	b.n	8003f82 <_svfiprintf_r+0x1be>
 8003fac:	08004609 	.word	0x08004609
 8003fb0:	0800460f 	.word	0x0800460f
 8003fb4:	08004613 	.word	0x08004613
 8003fb8:	00000000 	.word	0x00000000
 8003fbc:	08003d01 	.word	0x08003d01

08003fc0 <_printf_common>:
 8003fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fc2:	0015      	movs	r5, r2
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	688a      	ldr	r2, [r1, #8]
 8003fc8:	690b      	ldr	r3, [r1, #16]
 8003fca:	9000      	str	r0, [sp, #0]
 8003fcc:	000c      	movs	r4, r1
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	da00      	bge.n	8003fd4 <_printf_common+0x14>
 8003fd2:	0013      	movs	r3, r2
 8003fd4:	0022      	movs	r2, r4
 8003fd6:	602b      	str	r3, [r5, #0]
 8003fd8:	3243      	adds	r2, #67	; 0x43
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	d001      	beq.n	8003fe4 <_printf_common+0x24>
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	069b      	lsls	r3, r3, #26
 8003fe8:	d502      	bpl.n	8003ff0 <_printf_common+0x30>
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	3302      	adds	r3, #2
 8003fee:	602b      	str	r3, [r5, #0]
 8003ff0:	2706      	movs	r7, #6
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	401f      	ands	r7, r3
 8003ff6:	d027      	beq.n	8004048 <_printf_common+0x88>
 8003ff8:	0023      	movs	r3, r4
 8003ffa:	3343      	adds	r3, #67	; 0x43
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	1e5a      	subs	r2, r3, #1
 8004000:	4193      	sbcs	r3, r2
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	0692      	lsls	r2, r2, #26
 8004006:	d430      	bmi.n	800406a <_printf_common+0xaa>
 8004008:	0022      	movs	r2, r4
 800400a:	9901      	ldr	r1, [sp, #4]
 800400c:	3243      	adds	r2, #67	; 0x43
 800400e:	9800      	ldr	r0, [sp, #0]
 8004010:	9e08      	ldr	r6, [sp, #32]
 8004012:	47b0      	blx	r6
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d025      	beq.n	8004064 <_printf_common+0xa4>
 8004018:	2306      	movs	r3, #6
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	682a      	ldr	r2, [r5, #0]
 800401e:	68e1      	ldr	r1, [r4, #12]
 8004020:	4003      	ands	r3, r0
 8004022:	2500      	movs	r5, #0
 8004024:	2b04      	cmp	r3, #4
 8004026:	d103      	bne.n	8004030 <_printf_common+0x70>
 8004028:	1a8d      	subs	r5, r1, r2
 800402a:	43eb      	mvns	r3, r5
 800402c:	17db      	asrs	r3, r3, #31
 800402e:	401d      	ands	r5, r3
 8004030:	68a3      	ldr	r3, [r4, #8]
 8004032:	6922      	ldr	r2, [r4, #16]
 8004034:	4293      	cmp	r3, r2
 8004036:	dd01      	ble.n	800403c <_printf_common+0x7c>
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	18ed      	adds	r5, r5, r3
 800403c:	2700      	movs	r7, #0
 800403e:	42bd      	cmp	r5, r7
 8004040:	d120      	bne.n	8004084 <_printf_common+0xc4>
 8004042:	2000      	movs	r0, #0
 8004044:	e010      	b.n	8004068 <_printf_common+0xa8>
 8004046:	3701      	adds	r7, #1
 8004048:	68e3      	ldr	r3, [r4, #12]
 800404a:	682a      	ldr	r2, [r5, #0]
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	42bb      	cmp	r3, r7
 8004050:	ddd2      	ble.n	8003ff8 <_printf_common+0x38>
 8004052:	0022      	movs	r2, r4
 8004054:	2301      	movs	r3, #1
 8004056:	3219      	adds	r2, #25
 8004058:	9901      	ldr	r1, [sp, #4]
 800405a:	9800      	ldr	r0, [sp, #0]
 800405c:	9e08      	ldr	r6, [sp, #32]
 800405e:	47b0      	blx	r6
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d1f0      	bne.n	8004046 <_printf_common+0x86>
 8004064:	2001      	movs	r0, #1
 8004066:	4240      	negs	r0, r0
 8004068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800406a:	2030      	movs	r0, #48	; 0x30
 800406c:	18e1      	adds	r1, r4, r3
 800406e:	3143      	adds	r1, #67	; 0x43
 8004070:	7008      	strb	r0, [r1, #0]
 8004072:	0021      	movs	r1, r4
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	3145      	adds	r1, #69	; 0x45
 8004078:	7809      	ldrb	r1, [r1, #0]
 800407a:	18a2      	adds	r2, r4, r2
 800407c:	3243      	adds	r2, #67	; 0x43
 800407e:	3302      	adds	r3, #2
 8004080:	7011      	strb	r1, [r2, #0]
 8004082:	e7c1      	b.n	8004008 <_printf_common+0x48>
 8004084:	0022      	movs	r2, r4
 8004086:	2301      	movs	r3, #1
 8004088:	321a      	adds	r2, #26
 800408a:	9901      	ldr	r1, [sp, #4]
 800408c:	9800      	ldr	r0, [sp, #0]
 800408e:	9e08      	ldr	r6, [sp, #32]
 8004090:	47b0      	blx	r6
 8004092:	1c43      	adds	r3, r0, #1
 8004094:	d0e6      	beq.n	8004064 <_printf_common+0xa4>
 8004096:	3701      	adds	r7, #1
 8004098:	e7d1      	b.n	800403e <_printf_common+0x7e>
	...

0800409c <_printf_i>:
 800409c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	9204      	str	r2, [sp, #16]
 80040a2:	000a      	movs	r2, r1
 80040a4:	3243      	adds	r2, #67	; 0x43
 80040a6:	9305      	str	r3, [sp, #20]
 80040a8:	9003      	str	r0, [sp, #12]
 80040aa:	9202      	str	r2, [sp, #8]
 80040ac:	7e0a      	ldrb	r2, [r1, #24]
 80040ae:	000c      	movs	r4, r1
 80040b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040b2:	2a6e      	cmp	r2, #110	; 0x6e
 80040b4:	d100      	bne.n	80040b8 <_printf_i+0x1c>
 80040b6:	e086      	b.n	80041c6 <_printf_i+0x12a>
 80040b8:	d81f      	bhi.n	80040fa <_printf_i+0x5e>
 80040ba:	2a63      	cmp	r2, #99	; 0x63
 80040bc:	d033      	beq.n	8004126 <_printf_i+0x8a>
 80040be:	d808      	bhi.n	80040d2 <_printf_i+0x36>
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	d100      	bne.n	80040c6 <_printf_i+0x2a>
 80040c4:	e08c      	b.n	80041e0 <_printf_i+0x144>
 80040c6:	2a58      	cmp	r2, #88	; 0x58
 80040c8:	d04d      	beq.n	8004166 <_printf_i+0xca>
 80040ca:	0025      	movs	r5, r4
 80040cc:	3542      	adds	r5, #66	; 0x42
 80040ce:	702a      	strb	r2, [r5, #0]
 80040d0:	e030      	b.n	8004134 <_printf_i+0x98>
 80040d2:	2a64      	cmp	r2, #100	; 0x64
 80040d4:	d001      	beq.n	80040da <_printf_i+0x3e>
 80040d6:	2a69      	cmp	r2, #105	; 0x69
 80040d8:	d1f7      	bne.n	80040ca <_printf_i+0x2e>
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	6825      	ldr	r5, [r4, #0]
 80040de:	1d0a      	adds	r2, r1, #4
 80040e0:	0628      	lsls	r0, r5, #24
 80040e2:	d529      	bpl.n	8004138 <_printf_i+0x9c>
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	2800      	cmp	r0, #0
 80040ea:	da03      	bge.n	80040f4 <_printf_i+0x58>
 80040ec:	232d      	movs	r3, #45	; 0x2d
 80040ee:	9a02      	ldr	r2, [sp, #8]
 80040f0:	4240      	negs	r0, r0
 80040f2:	7013      	strb	r3, [r2, #0]
 80040f4:	4e6b      	ldr	r6, [pc, #428]	; (80042a4 <_printf_i+0x208>)
 80040f6:	270a      	movs	r7, #10
 80040f8:	e04f      	b.n	800419a <_printf_i+0xfe>
 80040fa:	2a73      	cmp	r2, #115	; 0x73
 80040fc:	d074      	beq.n	80041e8 <_printf_i+0x14c>
 80040fe:	d808      	bhi.n	8004112 <_printf_i+0x76>
 8004100:	2a6f      	cmp	r2, #111	; 0x6f
 8004102:	d01f      	beq.n	8004144 <_printf_i+0xa8>
 8004104:	2a70      	cmp	r2, #112	; 0x70
 8004106:	d1e0      	bne.n	80040ca <_printf_i+0x2e>
 8004108:	2220      	movs	r2, #32
 800410a:	6809      	ldr	r1, [r1, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	e003      	b.n	800411a <_printf_i+0x7e>
 8004112:	2a75      	cmp	r2, #117	; 0x75
 8004114:	d016      	beq.n	8004144 <_printf_i+0xa8>
 8004116:	2a78      	cmp	r2, #120	; 0x78
 8004118:	d1d7      	bne.n	80040ca <_printf_i+0x2e>
 800411a:	0022      	movs	r2, r4
 800411c:	2178      	movs	r1, #120	; 0x78
 800411e:	3245      	adds	r2, #69	; 0x45
 8004120:	7011      	strb	r1, [r2, #0]
 8004122:	4e61      	ldr	r6, [pc, #388]	; (80042a8 <_printf_i+0x20c>)
 8004124:	e022      	b.n	800416c <_printf_i+0xd0>
 8004126:	0025      	movs	r5, r4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	3542      	adds	r5, #66	; 0x42
 800412c:	1d11      	adds	r1, r2, #4
 800412e:	6019      	str	r1, [r3, #0]
 8004130:	6813      	ldr	r3, [r2, #0]
 8004132:	702b      	strb	r3, [r5, #0]
 8004134:	2301      	movs	r3, #1
 8004136:	e065      	b.n	8004204 <_printf_i+0x168>
 8004138:	6808      	ldr	r0, [r1, #0]
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	0669      	lsls	r1, r5, #25
 800413e:	d5d3      	bpl.n	80040e8 <_printf_i+0x4c>
 8004140:	b200      	sxth	r0, r0
 8004142:	e7d1      	b.n	80040e8 <_printf_i+0x4c>
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	6825      	ldr	r5, [r4, #0]
 8004148:	1d08      	adds	r0, r1, #4
 800414a:	6018      	str	r0, [r3, #0]
 800414c:	6808      	ldr	r0, [r1, #0]
 800414e:	062e      	lsls	r6, r5, #24
 8004150:	d505      	bpl.n	800415e <_printf_i+0xc2>
 8004152:	4e54      	ldr	r6, [pc, #336]	; (80042a4 <_printf_i+0x208>)
 8004154:	2708      	movs	r7, #8
 8004156:	2a6f      	cmp	r2, #111	; 0x6f
 8004158:	d01b      	beq.n	8004192 <_printf_i+0xf6>
 800415a:	270a      	movs	r7, #10
 800415c:	e019      	b.n	8004192 <_printf_i+0xf6>
 800415e:	066d      	lsls	r5, r5, #25
 8004160:	d5f7      	bpl.n	8004152 <_printf_i+0xb6>
 8004162:	b280      	uxth	r0, r0
 8004164:	e7f5      	b.n	8004152 <_printf_i+0xb6>
 8004166:	3145      	adds	r1, #69	; 0x45
 8004168:	4e4e      	ldr	r6, [pc, #312]	; (80042a4 <_printf_i+0x208>)
 800416a:	700a      	strb	r2, [r1, #0]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	1d01      	adds	r1, r0, #4
 8004172:	6800      	ldr	r0, [r0, #0]
 8004174:	6019      	str	r1, [r3, #0]
 8004176:	0615      	lsls	r5, r2, #24
 8004178:	d521      	bpl.n	80041be <_printf_i+0x122>
 800417a:	07d3      	lsls	r3, r2, #31
 800417c:	d502      	bpl.n	8004184 <_printf_i+0xe8>
 800417e:	2320      	movs	r3, #32
 8004180:	431a      	orrs	r2, r3
 8004182:	6022      	str	r2, [r4, #0]
 8004184:	2710      	movs	r7, #16
 8004186:	2800      	cmp	r0, #0
 8004188:	d103      	bne.n	8004192 <_printf_i+0xf6>
 800418a:	2320      	movs	r3, #32
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	439a      	bics	r2, r3
 8004190:	6022      	str	r2, [r4, #0]
 8004192:	0023      	movs	r3, r4
 8004194:	2200      	movs	r2, #0
 8004196:	3343      	adds	r3, #67	; 0x43
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db58      	blt.n	8004254 <_printf_i+0x1b8>
 80041a2:	2204      	movs	r2, #4
 80041a4:	6821      	ldr	r1, [r4, #0]
 80041a6:	4391      	bics	r1, r2
 80041a8:	6021      	str	r1, [r4, #0]
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d154      	bne.n	8004258 <_printf_i+0x1bc>
 80041ae:	9d02      	ldr	r5, [sp, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05a      	beq.n	800426a <_printf_i+0x1ce>
 80041b4:	0025      	movs	r5, r4
 80041b6:	7833      	ldrb	r3, [r6, #0]
 80041b8:	3542      	adds	r5, #66	; 0x42
 80041ba:	702b      	strb	r3, [r5, #0]
 80041bc:	e055      	b.n	800426a <_printf_i+0x1ce>
 80041be:	0655      	lsls	r5, r2, #25
 80041c0:	d5db      	bpl.n	800417a <_printf_i+0xde>
 80041c2:	b280      	uxth	r0, r0
 80041c4:	e7d9      	b.n	800417a <_printf_i+0xde>
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	680d      	ldr	r5, [r1, #0]
 80041ca:	1d10      	adds	r0, r2, #4
 80041cc:	6949      	ldr	r1, [r1, #20]
 80041ce:	6018      	str	r0, [r3, #0]
 80041d0:	6813      	ldr	r3, [r2, #0]
 80041d2:	062e      	lsls	r6, r5, #24
 80041d4:	d501      	bpl.n	80041da <_printf_i+0x13e>
 80041d6:	6019      	str	r1, [r3, #0]
 80041d8:	e002      	b.n	80041e0 <_printf_i+0x144>
 80041da:	066d      	lsls	r5, r5, #25
 80041dc:	d5fb      	bpl.n	80041d6 <_printf_i+0x13a>
 80041de:	8019      	strh	r1, [r3, #0]
 80041e0:	2300      	movs	r3, #0
 80041e2:	9d02      	ldr	r5, [sp, #8]
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	e04f      	b.n	8004288 <_printf_i+0x1ec>
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	1d11      	adds	r1, r2, #4
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	6815      	ldr	r5, [r2, #0]
 80041f0:	2100      	movs	r1, #0
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	0028      	movs	r0, r5
 80041f6:	f000 f859 	bl	80042ac <memchr>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d001      	beq.n	8004202 <_printf_i+0x166>
 80041fe:	1b40      	subs	r0, r0, r5
 8004200:	6060      	str	r0, [r4, #4]
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	6123      	str	r3, [r4, #16]
 8004206:	2300      	movs	r3, #0
 8004208:	9a02      	ldr	r2, [sp, #8]
 800420a:	7013      	strb	r3, [r2, #0]
 800420c:	e03c      	b.n	8004288 <_printf_i+0x1ec>
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	002a      	movs	r2, r5
 8004212:	9904      	ldr	r1, [sp, #16]
 8004214:	9803      	ldr	r0, [sp, #12]
 8004216:	9d05      	ldr	r5, [sp, #20]
 8004218:	47a8      	blx	r5
 800421a:	1c43      	adds	r3, r0, #1
 800421c:	d03e      	beq.n	800429c <_printf_i+0x200>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	079b      	lsls	r3, r3, #30
 8004222:	d415      	bmi.n	8004250 <_printf_i+0x1b4>
 8004224:	9b07      	ldr	r3, [sp, #28]
 8004226:	68e0      	ldr	r0, [r4, #12]
 8004228:	4298      	cmp	r0, r3
 800422a:	da39      	bge.n	80042a0 <_printf_i+0x204>
 800422c:	0018      	movs	r0, r3
 800422e:	e037      	b.n	80042a0 <_printf_i+0x204>
 8004230:	0022      	movs	r2, r4
 8004232:	2301      	movs	r3, #1
 8004234:	3219      	adds	r2, #25
 8004236:	9904      	ldr	r1, [sp, #16]
 8004238:	9803      	ldr	r0, [sp, #12]
 800423a:	9e05      	ldr	r6, [sp, #20]
 800423c:	47b0      	blx	r6
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d02c      	beq.n	800429c <_printf_i+0x200>
 8004242:	3501      	adds	r5, #1
 8004244:	68e3      	ldr	r3, [r4, #12]
 8004246:	9a07      	ldr	r2, [sp, #28]
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	42ab      	cmp	r3, r5
 800424c:	dcf0      	bgt.n	8004230 <_printf_i+0x194>
 800424e:	e7e9      	b.n	8004224 <_printf_i+0x188>
 8004250:	2500      	movs	r5, #0
 8004252:	e7f7      	b.n	8004244 <_printf_i+0x1a8>
 8004254:	2800      	cmp	r0, #0
 8004256:	d0ad      	beq.n	80041b4 <_printf_i+0x118>
 8004258:	9d02      	ldr	r5, [sp, #8]
 800425a:	0039      	movs	r1, r7
 800425c:	f7fb ffda 	bl	8000214 <__aeabi_uidivmod>
 8004260:	5c73      	ldrb	r3, [r6, r1]
 8004262:	3d01      	subs	r5, #1
 8004264:	702b      	strb	r3, [r5, #0]
 8004266:	2800      	cmp	r0, #0
 8004268:	d1f7      	bne.n	800425a <_printf_i+0x1be>
 800426a:	2f08      	cmp	r7, #8
 800426c:	d109      	bne.n	8004282 <_printf_i+0x1e6>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	07db      	lsls	r3, r3, #31
 8004272:	d506      	bpl.n	8004282 <_printf_i+0x1e6>
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	6922      	ldr	r2, [r4, #16]
 8004278:	4293      	cmp	r3, r2
 800427a:	dc02      	bgt.n	8004282 <_printf_i+0x1e6>
 800427c:	2330      	movs	r3, #48	; 0x30
 800427e:	3d01      	subs	r5, #1
 8004280:	702b      	strb	r3, [r5, #0]
 8004282:	9b02      	ldr	r3, [sp, #8]
 8004284:	1b5b      	subs	r3, r3, r5
 8004286:	6123      	str	r3, [r4, #16]
 8004288:	9b05      	ldr	r3, [sp, #20]
 800428a:	aa07      	add	r2, sp, #28
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	0021      	movs	r1, r4
 8004290:	9b04      	ldr	r3, [sp, #16]
 8004292:	9803      	ldr	r0, [sp, #12]
 8004294:	f7ff fe94 	bl	8003fc0 <_printf_common>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d1b8      	bne.n	800420e <_printf_i+0x172>
 800429c:	2001      	movs	r0, #1
 800429e:	4240      	negs	r0, r0
 80042a0:	b009      	add	sp, #36	; 0x24
 80042a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a4:	0800461a 	.word	0x0800461a
 80042a8:	0800462b 	.word	0x0800462b

080042ac <memchr>:
 80042ac:	b2c9      	uxtb	r1, r1
 80042ae:	1882      	adds	r2, r0, r2
 80042b0:	4290      	cmp	r0, r2
 80042b2:	d101      	bne.n	80042b8 <memchr+0xc>
 80042b4:	2000      	movs	r0, #0
 80042b6:	4770      	bx	lr
 80042b8:	7803      	ldrb	r3, [r0, #0]
 80042ba:	428b      	cmp	r3, r1
 80042bc:	d0fb      	beq.n	80042b6 <memchr+0xa>
 80042be:	3001      	adds	r0, #1
 80042c0:	e7f6      	b.n	80042b0 <memchr+0x4>

080042c2 <memcpy>:
 80042c2:	2300      	movs	r3, #0
 80042c4:	b510      	push	{r4, lr}
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d100      	bne.n	80042cc <memcpy+0xa>
 80042ca:	bd10      	pop	{r4, pc}
 80042cc:	5ccc      	ldrb	r4, [r1, r3]
 80042ce:	54c4      	strb	r4, [r0, r3]
 80042d0:	3301      	adds	r3, #1
 80042d2:	e7f8      	b.n	80042c6 <memcpy+0x4>

080042d4 <memmove>:
 80042d4:	b510      	push	{r4, lr}
 80042d6:	4288      	cmp	r0, r1
 80042d8:	d902      	bls.n	80042e0 <memmove+0xc>
 80042da:	188b      	adds	r3, r1, r2
 80042dc:	4298      	cmp	r0, r3
 80042de:	d303      	bcc.n	80042e8 <memmove+0x14>
 80042e0:	2300      	movs	r3, #0
 80042e2:	e007      	b.n	80042f4 <memmove+0x20>
 80042e4:	5c8b      	ldrb	r3, [r1, r2]
 80042e6:	5483      	strb	r3, [r0, r2]
 80042e8:	3a01      	subs	r2, #1
 80042ea:	d2fb      	bcs.n	80042e4 <memmove+0x10>
 80042ec:	bd10      	pop	{r4, pc}
 80042ee:	5ccc      	ldrb	r4, [r1, r3]
 80042f0:	54c4      	strb	r4, [r0, r3]
 80042f2:	3301      	adds	r3, #1
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1fa      	bne.n	80042ee <memmove+0x1a>
 80042f8:	e7f8      	b.n	80042ec <memmove+0x18>
	...

080042fc <_free_r>:
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	0005      	movs	r5, r0
 8004300:	2900      	cmp	r1, #0
 8004302:	d010      	beq.n	8004326 <_free_r+0x2a>
 8004304:	1f0c      	subs	r4, r1, #4
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da00      	bge.n	800430e <_free_r+0x12>
 800430c:	18e4      	adds	r4, r4, r3
 800430e:	0028      	movs	r0, r5
 8004310:	f000 f8d4 	bl	80044bc <__malloc_lock>
 8004314:	4a1d      	ldr	r2, [pc, #116]	; (800438c <_free_r+0x90>)
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <_free_r+0x2c>
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	6014      	str	r4, [r2, #0]
 8004320:	0028      	movs	r0, r5
 8004322:	f000 f8cc 	bl	80044be <__malloc_unlock>
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	42a3      	cmp	r3, r4
 800432a:	d909      	bls.n	8004340 <_free_r+0x44>
 800432c:	6821      	ldr	r1, [r4, #0]
 800432e:	1860      	adds	r0, r4, r1
 8004330:	4283      	cmp	r3, r0
 8004332:	d1f3      	bne.n	800431c <_free_r+0x20>
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	1841      	adds	r1, r0, r1
 800433a:	6021      	str	r1, [r4, #0]
 800433c:	e7ee      	b.n	800431c <_free_r+0x20>
 800433e:	0013      	movs	r3, r2
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	2a00      	cmp	r2, #0
 8004344:	d001      	beq.n	800434a <_free_r+0x4e>
 8004346:	42a2      	cmp	r2, r4
 8004348:	d9f9      	bls.n	800433e <_free_r+0x42>
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	1858      	adds	r0, r3, r1
 800434e:	42a0      	cmp	r0, r4
 8004350:	d10b      	bne.n	800436a <_free_r+0x6e>
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	1809      	adds	r1, r1, r0
 8004356:	1858      	adds	r0, r3, r1
 8004358:	6019      	str	r1, [r3, #0]
 800435a:	4282      	cmp	r2, r0
 800435c:	d1e0      	bne.n	8004320 <_free_r+0x24>
 800435e:	6810      	ldr	r0, [r2, #0]
 8004360:	6852      	ldr	r2, [r2, #4]
 8004362:	1841      	adds	r1, r0, r1
 8004364:	6019      	str	r1, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	e7da      	b.n	8004320 <_free_r+0x24>
 800436a:	42a0      	cmp	r0, r4
 800436c:	d902      	bls.n	8004374 <_free_r+0x78>
 800436e:	230c      	movs	r3, #12
 8004370:	602b      	str	r3, [r5, #0]
 8004372:	e7d5      	b.n	8004320 <_free_r+0x24>
 8004374:	6821      	ldr	r1, [r4, #0]
 8004376:	1860      	adds	r0, r4, r1
 8004378:	4282      	cmp	r2, r0
 800437a:	d103      	bne.n	8004384 <_free_r+0x88>
 800437c:	6810      	ldr	r0, [r2, #0]
 800437e:	6852      	ldr	r2, [r2, #4]
 8004380:	1841      	adds	r1, r0, r1
 8004382:	6021      	str	r1, [r4, #0]
 8004384:	6062      	str	r2, [r4, #4]
 8004386:	605c      	str	r4, [r3, #4]
 8004388:	e7ca      	b.n	8004320 <_free_r+0x24>
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	200000c0 	.word	0x200000c0

08004390 <_malloc_r>:
 8004390:	2303      	movs	r3, #3
 8004392:	b570      	push	{r4, r5, r6, lr}
 8004394:	1ccd      	adds	r5, r1, #3
 8004396:	439d      	bics	r5, r3
 8004398:	3508      	adds	r5, #8
 800439a:	0006      	movs	r6, r0
 800439c:	2d0c      	cmp	r5, #12
 800439e:	d21e      	bcs.n	80043de <_malloc_r+0x4e>
 80043a0:	250c      	movs	r5, #12
 80043a2:	42a9      	cmp	r1, r5
 80043a4:	d81d      	bhi.n	80043e2 <_malloc_r+0x52>
 80043a6:	0030      	movs	r0, r6
 80043a8:	f000 f888 	bl	80044bc <__malloc_lock>
 80043ac:	4a25      	ldr	r2, [pc, #148]	; (8004444 <_malloc_r+0xb4>)
 80043ae:	6814      	ldr	r4, [r2, #0]
 80043b0:	0021      	movs	r1, r4
 80043b2:	2900      	cmp	r1, #0
 80043b4:	d119      	bne.n	80043ea <_malloc_r+0x5a>
 80043b6:	4c24      	ldr	r4, [pc, #144]	; (8004448 <_malloc_r+0xb8>)
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <_malloc_r+0x36>
 80043be:	0030      	movs	r0, r6
 80043c0:	f000 f86a 	bl	8004498 <_sbrk_r>
 80043c4:	6020      	str	r0, [r4, #0]
 80043c6:	0029      	movs	r1, r5
 80043c8:	0030      	movs	r0, r6
 80043ca:	f000 f865 	bl	8004498 <_sbrk_r>
 80043ce:	1c43      	adds	r3, r0, #1
 80043d0:	d12b      	bne.n	800442a <_malloc_r+0x9a>
 80043d2:	230c      	movs	r3, #12
 80043d4:	0030      	movs	r0, r6
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	f000 f871 	bl	80044be <__malloc_unlock>
 80043dc:	e003      	b.n	80043e6 <_malloc_r+0x56>
 80043de:	2d00      	cmp	r5, #0
 80043e0:	dadf      	bge.n	80043a2 <_malloc_r+0x12>
 80043e2:	230c      	movs	r3, #12
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	2000      	movs	r0, #0
 80043e8:	bd70      	pop	{r4, r5, r6, pc}
 80043ea:	680b      	ldr	r3, [r1, #0]
 80043ec:	1b5b      	subs	r3, r3, r5
 80043ee:	d419      	bmi.n	8004424 <_malloc_r+0x94>
 80043f0:	2b0b      	cmp	r3, #11
 80043f2:	d903      	bls.n	80043fc <_malloc_r+0x6c>
 80043f4:	600b      	str	r3, [r1, #0]
 80043f6:	18cc      	adds	r4, r1, r3
 80043f8:	6025      	str	r5, [r4, #0]
 80043fa:	e003      	b.n	8004404 <_malloc_r+0x74>
 80043fc:	684b      	ldr	r3, [r1, #4]
 80043fe:	428c      	cmp	r4, r1
 8004400:	d10d      	bne.n	800441e <_malloc_r+0x8e>
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	0030      	movs	r0, r6
 8004406:	f000 f85a 	bl	80044be <__malloc_unlock>
 800440a:	0020      	movs	r0, r4
 800440c:	2207      	movs	r2, #7
 800440e:	300b      	adds	r0, #11
 8004410:	1d23      	adds	r3, r4, #4
 8004412:	4390      	bics	r0, r2
 8004414:	1ac3      	subs	r3, r0, r3
 8004416:	d0e7      	beq.n	80043e8 <_malloc_r+0x58>
 8004418:	425a      	negs	r2, r3
 800441a:	50e2      	str	r2, [r4, r3]
 800441c:	e7e4      	b.n	80043e8 <_malloc_r+0x58>
 800441e:	6063      	str	r3, [r4, #4]
 8004420:	000c      	movs	r4, r1
 8004422:	e7ef      	b.n	8004404 <_malloc_r+0x74>
 8004424:	000c      	movs	r4, r1
 8004426:	6849      	ldr	r1, [r1, #4]
 8004428:	e7c3      	b.n	80043b2 <_malloc_r+0x22>
 800442a:	2303      	movs	r3, #3
 800442c:	1cc4      	adds	r4, r0, #3
 800442e:	439c      	bics	r4, r3
 8004430:	42a0      	cmp	r0, r4
 8004432:	d0e1      	beq.n	80043f8 <_malloc_r+0x68>
 8004434:	1a21      	subs	r1, r4, r0
 8004436:	0030      	movs	r0, r6
 8004438:	f000 f82e 	bl	8004498 <_sbrk_r>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d1db      	bne.n	80043f8 <_malloc_r+0x68>
 8004440:	e7c7      	b.n	80043d2 <_malloc_r+0x42>
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	200000c0 	.word	0x200000c0
 8004448:	200000c4 	.word	0x200000c4

0800444c <_realloc_r>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	0007      	movs	r7, r0
 8004450:	000d      	movs	r5, r1
 8004452:	0016      	movs	r6, r2
 8004454:	2900      	cmp	r1, #0
 8004456:	d105      	bne.n	8004464 <_realloc_r+0x18>
 8004458:	0011      	movs	r1, r2
 800445a:	f7ff ff99 	bl	8004390 <_malloc_r>
 800445e:	0004      	movs	r4, r0
 8004460:	0020      	movs	r0, r4
 8004462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004464:	2a00      	cmp	r2, #0
 8004466:	d103      	bne.n	8004470 <_realloc_r+0x24>
 8004468:	f7ff ff48 	bl	80042fc <_free_r>
 800446c:	0034      	movs	r4, r6
 800446e:	e7f7      	b.n	8004460 <_realloc_r+0x14>
 8004470:	f000 f826 	bl	80044c0 <_malloc_usable_size_r>
 8004474:	002c      	movs	r4, r5
 8004476:	42b0      	cmp	r0, r6
 8004478:	d2f2      	bcs.n	8004460 <_realloc_r+0x14>
 800447a:	0031      	movs	r1, r6
 800447c:	0038      	movs	r0, r7
 800447e:	f7ff ff87 	bl	8004390 <_malloc_r>
 8004482:	1e04      	subs	r4, r0, #0
 8004484:	d0ec      	beq.n	8004460 <_realloc_r+0x14>
 8004486:	0029      	movs	r1, r5
 8004488:	0032      	movs	r2, r6
 800448a:	f7ff ff1a 	bl	80042c2 <memcpy>
 800448e:	0029      	movs	r1, r5
 8004490:	0038      	movs	r0, r7
 8004492:	f7ff ff33 	bl	80042fc <_free_r>
 8004496:	e7e3      	b.n	8004460 <_realloc_r+0x14>

08004498 <_sbrk_r>:
 8004498:	2300      	movs	r3, #0
 800449a:	b570      	push	{r4, r5, r6, lr}
 800449c:	4c06      	ldr	r4, [pc, #24]	; (80044b8 <_sbrk_r+0x20>)
 800449e:	0005      	movs	r5, r0
 80044a0:	0008      	movs	r0, r1
 80044a2:	6023      	str	r3, [r4, #0]
 80044a4:	f7fc fef4 	bl	8001290 <_sbrk>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d103      	bne.n	80044b4 <_sbrk_r+0x1c>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d000      	beq.n	80044b4 <_sbrk_r+0x1c>
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	200001bc 	.word	0x200001bc

080044bc <__malloc_lock>:
 80044bc:	4770      	bx	lr

080044be <__malloc_unlock>:
 80044be:	4770      	bx	lr

080044c0 <_malloc_usable_size_r>:
 80044c0:	1f0b      	subs	r3, r1, #4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1f18      	subs	r0, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da01      	bge.n	80044ce <_malloc_usable_size_r+0xe>
 80044ca:	580b      	ldr	r3, [r1, r0]
 80044cc:	18c0      	adds	r0, r0, r3
 80044ce:	4770      	bx	lr

080044d0 <_init>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr

080044dc <_fini>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr
