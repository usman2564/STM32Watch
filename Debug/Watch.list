
Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c14  08004c14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004c8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004c8c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f727  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025bc  00000000  00000000  0002f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00031d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000116b1  00000000  00000000  00033938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d7d9  00000000  00000000  00044fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00067126  00000000  00000000  000527c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b98e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000361c  00000000  00000000  000b9964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800484c 	.word	0x0800484c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800484c 	.word	0x0800484c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	; 0x24
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f003 fdc5 	bl	800402c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b32      	ldr	r3, [pc, #200]	; (800056c <MX_GPIO_Init+0xe0>)
 80004a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a6:	4b31      	ldr	r3, [pc, #196]	; (800056c <MX_GPIO_Init+0xe0>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	4b2f      	ldr	r3, [pc, #188]	; (800056c <MX_GPIO_Init+0xe0>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b2c      	ldr	r3, [pc, #176]	; (800056c <MX_GPIO_Init+0xe0>)
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <MX_GPIO_Init+0xe0>)
 80004c0:	2102      	movs	r1, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	4b29      	ldr	r3, [pc, #164]	; (800056c <MX_GPIO_Init+0xe0>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	2202      	movs	r2, #2
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_RESET);
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <MX_GPIO_Init+0xe4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fc6b 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_RESET);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	0059      	lsls	r1, r3, #1
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fc63 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D_C_Pin;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D_C_GPIO_Port, &GPIO_InitStruct);
 8000508:	000c      	movs	r4, r1
 800050a:	187b      	adds	r3, r7, r1
 800050c:	4a18      	ldr	r2, [pc, #96]	; (8000570 <MX_GPIO_Init+0xe4>)
 800050e:	0019      	movs	r1, r3
 8000510:	0010      	movs	r0, r2
 8000512:	f001 fae1 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_GPIO_Init+0xe8>)
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	000c      	movs	r4, r1
 800052c:	187b      	adds	r3, r7, r1
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <MX_GPIO_Init+0xe4>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f001 fad0 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NOT_CS_Pin;
 8000538:	0021      	movs	r1, r4
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NOT_CS_GPIO_Port, &GPIO_InitStruct);
 8000554:	187a      	adds	r2, r7, r1
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fabb 	bl	8001ad8 <HAL_GPIO_Init>

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b009      	add	sp, #36	; 0x24
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000
 8000570:	50000400 	.word	0x50000400
 8000574:	00000c04 	.word	0x00000c04

08000578 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_I2C1_Init+0x74>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <MX_I2C1_Init+0x78>)
 8000580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_I2C1_Init+0x74>)
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x7c>)
 8000586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_I2C1_Init+0x74>)
 8000590:	2201      	movs	r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_I2C1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_I2C1_Init+0x74>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fc1b 	bl	8001df0 <HAL_I2C_Init>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005be:	f000 f90f 	bl	80007e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_I2C1_Init+0x74>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 f8b0 	bl	800272c <HAL_I2CEx_ConfigAnalogFilter>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d0:	f000 f906 	bl	80007e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <MX_I2C1_Init+0x74>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 f8f3 	bl	80027c4 <HAL_I2CEx_ConfigDigitalFilter>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f000 f8fd 	bl	80007e0 <Error_Handler>
  }

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000098 	.word	0x20000098
 80005f0:	40005400 	.word	0x40005400
 80005f4:	00707cbb 	.word	0x00707cbb

080005f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	230c      	movs	r3, #12
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f003 fd0e 	bl	800402c <memset>
  if(i2cHandle->Instance==I2C1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a18      	ldr	r2, [pc, #96]	; (8000678 <HAL_I2C_MspInit+0x80>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d12a      	bne.n	8000670 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_I2C_MspInit+0x84>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000632:	210c      	movs	r1, #12
 8000634:	187b      	adds	r3, r7, r1
 8000636:	22c0      	movs	r2, #192	; 0xc0
 8000638:	00d2      	lsls	r2, r2, #3
 800063a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2212      	movs	r2, #18
 8000640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2203      	movs	r2, #3
 800064c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2201      	movs	r2, #1
 8000652:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	187a      	adds	r2, r7, r1
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fa3b 	bl	8001ad8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_I2C_MspInit+0x84>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0389      	lsls	r1, r1, #14
 800066c:	430a      	orrs	r2, r1
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b008      	add	sp, #32
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40005400 	.word	0x40005400
 800067c:	40021000 	.word	0x40021000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b092      	sub	sp, #72	; 0x48
 8000684:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f001 f8e1 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f837 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f7ff fefd 	bl	800048c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000692:	f7ff ff71 	bl	8000578 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000696:	f000 fdd5 	bl	8001244 <MX_SPI1_Init>
  MX_TIM21_Init();
 800069a:	f001 f80f 	bl	80016bc <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  struct Watch Watch;
  Watch_init(&Watch, 0x30, 0x21, 5, 0x23, 0x09, 0x22);
 800069e:	0038      	movs	r0, r7
 80006a0:	2322      	movs	r3, #34	; 0x22
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	2309      	movs	r3, #9
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	2323      	movs	r3, #35	; 0x23
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2305      	movs	r3, #5
 80006ae:	2221      	movs	r2, #33	; 0x21
 80006b0:	2130      	movs	r1, #48	; 0x30
 80006b2:	f000 fe43 	bl	800133c <Watch_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	switch(Watch.WatchState)
 80006b6:	003b      	movs	r3, r7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d00d      	beq.n	80006da <main+0x5a>
 80006be:	dc02      	bgt.n	80006c6 <main+0x46>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d005      	beq.n	80006d0 <main+0x50>
 80006c4:	e7f7      	b.n	80006b6 <main+0x36>
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d00c      	beq.n	80006e4 <main+0x64>
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d00f      	beq.n	80006ee <main+0x6e>
 80006ce:	e7f2      	b.n	80006b6 <main+0x36>
	{

		case Get_Time:
			Watch_Get_Time_State(&Watch);
 80006d0:	003b      	movs	r3, r7
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fe6c 	bl	80013b0 <Watch_Get_Time_State>
			break;
 80006d8:	e00e      	b.n	80006f8 <main+0x78>
		case Display_Time:
			Watch_Display_Time_State(&Watch);
 80006da:	003b      	movs	r3, r7
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fe81 	bl	80013e4 <Watch_Display_Time_State>
			break;
 80006e2:	e009      	b.n	80006f8 <main+0x78>
		case Get_Date:
			Watch_Get_Date_State(&Watch);
 80006e4:	003b      	movs	r3, r7
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 feba 	bl	8001460 <Watch_Get_Date_State>
			break;
 80006ec:	e004      	b.n	80006f8 <main+0x78>
		case Display_Date:
			Watch_Display_Date_State(&Watch);
 80006ee:	003b      	movs	r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fecf 	bl	8001494 <Watch_Display_Date_State>
			break;
 80006f6:	46c0      	nop			; (mov r8, r8)
	switch(Watch.WatchState)
 80006f8:	e7dd      	b.n	80006b6 <main+0x36>
	...

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b099      	sub	sp, #100	; 0x64
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	242c      	movs	r4, #44	; 0x2c
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2334      	movs	r3, #52	; 0x34
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f003 fc8d 	bl	800402c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2318      	movs	r3, #24
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	0018      	movs	r0, r3
 8000718:	2314      	movs	r3, #20
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f003 fc85 	bl	800402c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000722:	003b      	movs	r3, r7
 8000724:	0018      	movs	r0, r3
 8000726:	2318      	movs	r3, #24
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f003 fc7e 	bl	800402c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <SystemClock_Config+0xdc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a29      	ldr	r2, [pc, #164]	; (80007dc <SystemClock_Config+0xe0>)
 8000736:	401a      	ands	r2, r3
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <SystemClock_Config+0xdc>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0109      	lsls	r1, r1, #4
 800073e:	430a      	orrs	r2, r1
 8000740:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2202      	movs	r2, #2
 8000748:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2210      	movs	r2, #16
 8000754:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2202      	movs	r2, #2
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	02d2      	lsls	r2, r2, #11
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	03d2      	lsls	r2, r2, #15
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	187b      	adds	r3, r7, r1
 8000774:	0018      	movs	r0, r3
 8000776:	f002 f871 	bl	800285c <HAL_RCC_OscConfig>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800077e:	f000 f82f 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	2118      	movs	r1, #24
 8000784:	187b      	adds	r3, r7, r1
 8000786:	220f      	movs	r2, #15
 8000788:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2203      	movs	r2, #3
 800078e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2101      	movs	r1, #1
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fbd8 	bl	8002f5c <HAL_RCC_ClockConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007b0:	f000 f816 	bl	80007e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007b4:	003b      	movs	r3, r7
 80007b6:	2208      	movs	r2, #8
 80007b8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c0:	003b      	movs	r3, r7
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fdb2 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007cc:	f000 f808 	bl	80007e0 <Error_Handler>
  }
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b019      	add	sp, #100	; 0x64
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	40007000 	.word	0x40007000
 80007dc:	ffffe7ff 	.word	0xffffe7ff

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <Error_Handler+0x6>

080007e8 <OLED_init>:
const uint8_t OLED_FONTCOLOR[2] = {0xFF, 0xFF};
const uint8_t OLED_BACKCOLOR[2] = {0x00, 0x00};


void OLED_init(struct OLED *OLED)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af04      	add	r7, sp, #16
 80007ee:	6078      	str	r0, [r7, #4]

	OLED->OLED_SETCOLUMN[0] = 0x15;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2215      	movs	r2, #21
 80007f4:	705a      	strb	r2, [r3, #1]
	OLED->OLED_SETROW[0] = 0x75;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2275      	movs	r2, #117	; 0x75
 80007fa:	711a      	strb	r2, [r3, #4]
	OLED->RECTANGLE_FILL_CONFIG[0] = 0x26;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2226      	movs	r2, #38	; 0x26
 8000800:	71da      	strb	r2, [r3, #7]
	OLED->RECTANGLE_FILL_CONFIG[1] = 0x01;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	721a      	strb	r2, [r3, #8]


	//active low CS pin should default high, place OLED in command mode
	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_SET);
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	0059      	lsls	r1, r3, #1
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	2201      	movs	r2, #1
 8000812:	0018      	movs	r0, r3
 8000814:	f001 face 	bl	8001db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_SET);
 8000818:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <OLED_init+0x1d8>)
 800081a:	2201      	movs	r2, #1
 800081c:	2101      	movs	r1, #1
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fac8 	bl	8001db4 <HAL_GPIO_WritePin>

	OLED_sendCommand(&OLED_OFF, 1);
 8000824:	4b67      	ldr	r3, [pc, #412]	; (80009c4 <OLED_init+0x1dc>)
 8000826:	2101      	movs	r1, #1
 8000828:	0018      	movs	r0, r3
 800082a:	f000 f8ed 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f001 f87c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_ADDRESSMODE, 2);
 8000834:	4b64      	ldr	r3, [pc, #400]	; (80009c8 <OLED_init+0x1e0>)
 8000836:	2102      	movs	r1, #2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 f8e5 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800083e:	2064      	movs	r0, #100	; 0x64
 8000840:	f001 f874 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_STARTLINE, 2);
 8000844:	4b61      	ldr	r3, [pc, #388]	; (80009cc <OLED_init+0x1e4>)
 8000846:	2102      	movs	r1, #2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 f8dd 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800084e:	2064      	movs	r0, #100	; 0x64
 8000850:	f001 f86c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_OFFSET, 2);
 8000854:	4b5e      	ldr	r3, [pc, #376]	; (80009d0 <OLED_init+0x1e8>)
 8000856:	2102      	movs	r1, #2
 8000858:	0018      	movs	r0, r3
 800085a:	f000 f8d5 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f001 f864 	bl	800192c <HAL_Delay>
	OLED_sendCommand(&OLED_NORMALMODE, 1);
 8000864:	4b5b      	ldr	r3, [pc, #364]	; (80009d4 <OLED_init+0x1ec>)
 8000866:	2101      	movs	r1, #1
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f8cd 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f001 f85c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_SETMULTIPLEX, 2);
 8000874:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <OLED_init+0x1f0>)
 8000876:	2102      	movs	r1, #2
 8000878:	0018      	movs	r0, r3
 800087a:	f000 f8c5 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800087e:	2064      	movs	r0, #100	; 0x64
 8000880:	f001 f854 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_MASTER_CONFIG, 2);
 8000884:	4b55      	ldr	r3, [pc, #340]	; (80009dc <OLED_init+0x1f4>)
 8000886:	2102      	movs	r1, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f000 f8bd 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800088e:	2064      	movs	r0, #100	; 0x64
 8000890:	f001 f84c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_POWERMODE, 2);
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <OLED_init+0x1f8>)
 8000896:	2102      	movs	r1, #2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 f8b5 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800089e:	2064      	movs	r0, #100	; 0x64
 80008a0:	f001 f844 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_PRECHARGE, 2);
 80008a4:	4b4f      	ldr	r3, [pc, #316]	; (80009e4 <OLED_init+0x1fc>)
 80008a6:	2102      	movs	r1, #2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 f8ad 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 80008ae:	2064      	movs	r0, #100	; 0x64
 80008b0:	f001 f83c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_SETFREQ, 2);
 80008b4:	4b4c      	ldr	r3, [pc, #304]	; (80009e8 <OLED_init+0x200>)
 80008b6:	2102      	movs	r1, #2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 f8a5 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 80008be:	2064      	movs	r0, #100	; 0x64
 80008c0:	f001 f834 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_PRECHARGEA, 2);
 80008c4:	4b49      	ldr	r3, [pc, #292]	; (80009ec <OLED_init+0x204>)
 80008c6:	2102      	movs	r1, #2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f89d 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f001 f82c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_PRECHARGEB, 2);
 80008d4:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <OLED_init+0x208>)
 80008d6:	2102      	movs	r1, #2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 f895 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 80008de:	2064      	movs	r0, #100	; 0x64
 80008e0:	f001 f824 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_PRECHARGEC, 2);
 80008e4:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <OLED_init+0x20c>)
 80008e6:	2102      	movs	r1, #2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 f88d 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 80008ee:	2064      	movs	r0, #100	; 0x64
 80008f0:	f001 f81c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_PRECHARGELEVEL, 2);
 80008f4:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <OLED_init+0x210>)
 80008f6:	2102      	movs	r1, #2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 f885 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 80008fe:	2064      	movs	r0, #100	; 0x64
 8000900:	f001 f814 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_MASTER_CURRENT, 2);
 8000904:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <OLED_init+0x214>)
 8000906:	2102      	movs	r1, #2
 8000908:	0018      	movs	r0, r3
 800090a:	f000 f87d 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800090e:	2064      	movs	r0, #100	; 0x64
 8000910:	f001 f80c 	bl	800192c <HAL_Delay>
	OLED_sendCommand(OLED_CONTRAST, 6);
 8000914:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <OLED_init+0x218>)
 8000916:	2106      	movs	r1, #6
 8000918:	0018      	movs	r0, r3
 800091a:	f000 f875 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800091e:	2064      	movs	r0, #100	; 0x64
 8000920:	f001 f804 	bl	800192c <HAL_Delay>
	OLED_sendCommand(&OLED_ON, 1);
 8000924:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <OLED_init+0x21c>)
 8000926:	2101      	movs	r1, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f000 f86d 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 800092e:	2064      	movs	r0, #100	; 0x64
 8000930:	f000 fffc 	bl	800192c <HAL_Delay>


	OLED_setFillColor(OLED->OLED_DRAW_RECTANGLE_BUFFER, OLED->OLED_DRAW_LINE_BUFFER, 0, 0, 0);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3309      	adds	r3, #9
 8000938:	0018      	movs	r0, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3313      	adds	r3, #19
 800093e:	0019      	movs	r1, r3
 8000940:	2300      	movs	r3, #0
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	f000 f8c0 	bl	8000acc <OLED_setFillColor>
	HAL_Delay(50);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 ffed 	bl	800192c <HAL_Delay>
	OLED_drawRect(OLED->OLED_DRAW_RECTANGLE_BUFFER, OLED->RECTANGLE_FILL_CONFIG, 0, 0, 95, 63, OLED_FILL_TRUE);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3309      	adds	r3, #9
 8000956:	0018      	movs	r0, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1dd9      	adds	r1, r3, #7
 800095c:	2301      	movs	r3, #1
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	233f      	movs	r3, #63	; 0x3f
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	235f      	movs	r3, #95	; 0x5f
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	f000 f8ec 	bl	8000b48 <OLED_drawRect>
	HAL_Delay(50);
 8000970:	2032      	movs	r0, #50	; 0x32
 8000972:	f000 ffdb 	bl	800192c <HAL_Delay>
	OLED_setFillColor(OLED->OLED_DRAW_RECTANGLE_BUFFER, OLED->OLED_DRAW_LINE_BUFFER, 40, 40, 40);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3309      	adds	r3, #9
 800097a:	0018      	movs	r0, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3313      	adds	r3, #19
 8000980:	0019      	movs	r1, r3
 8000982:	2328      	movs	r3, #40	; 0x28
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2328      	movs	r3, #40	; 0x28
 8000988:	2228      	movs	r2, #40	; 0x28
 800098a:	f000 f89f 	bl	8000acc <OLED_setFillColor>
	HAL_Delay(50);
 800098e:	2032      	movs	r0, #50	; 0x32
 8000990:	f000 ffcc 	bl	800192c <HAL_Delay>
	OLED_drawRect(OLED->OLED_DRAW_RECTANGLE_BUFFER, OLED->RECTANGLE_FILL_CONFIG, 12, 28, 83, 54, OLED_FILL_FALSE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3309      	adds	r3, #9
 8000998:	0018      	movs	r0, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	1dd9      	adds	r1, r3, #7
 800099e:	2300      	movs	r3, #0
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	2336      	movs	r3, #54	; 0x36
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2353      	movs	r3, #83	; 0x53
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	231c      	movs	r3, #28
 80009ac:	220c      	movs	r2, #12
 80009ae:	f000 f8cb 	bl	8000b48 <OLED_drawRect>
	HAL_Delay(50);
 80009b2:	2032      	movs	r0, #50	; 0x32
 80009b4:	f000 ffba 	bl	800192c <HAL_Delay>

}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	50000400 	.word	0x50000400
 80009c4:	08004b78 	.word	0x08004b78
 80009c8:	08004b7c 	.word	0x08004b7c
 80009cc:	08004b80 	.word	0x08004b80
 80009d0:	08004b84 	.word	0x08004b84
 80009d4:	08004b86 	.word	0x08004b86
 80009d8:	08004b88 	.word	0x08004b88
 80009dc:	08004b8c 	.word	0x08004b8c
 80009e0:	08004b90 	.word	0x08004b90
 80009e4:	08004b94 	.word	0x08004b94
 80009e8:	08004b98 	.word	0x08004b98
 80009ec:	08004b9c 	.word	0x08004b9c
 80009f0:	08004ba0 	.word	0x08004ba0
 80009f4:	08004ba4 	.word	0x08004ba4
 80009f8:	08004ba8 	.word	0x08004ba8
 80009fc:	08004bac 	.word	0x08004bac
 8000a00:	08004bb0 	.word	0x08004bb0
 8000a04:	08004bb6 	.word	0x08004bb6

08000a08 <OLED_sendCommand>:

void OLED_sendCommand(uint8_t *OLED_COMMAND, uint8_t number_of_bytes)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	000a      	movs	r2, r1
 8000a12:	1cfb      	adds	r3, r7, #3
 8000a14:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_RESET);
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	0059      	lsls	r1, r3, #1
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2200      	movs	r2, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 f9c7 	bl	8001db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_RESET);
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <OLED_sendCommand+0x68>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 f9c1 	bl	8001db4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, OLED_COMMAND, number_of_bytes, HAL_MAX_DELAY);
 8000a32:	1cfb      	adds	r3, r7, #3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <OLED_sendCommand+0x6c>)
 8000a40:	f002 fe25 	bl	800368e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_SET);
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	0059      	lsls	r1, r3, #1
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f001 f9b0 	bl	8001db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_SET);
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <OLED_sendCommand+0x68>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	2101      	movs	r1, #1
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 f9aa 	bl	8001db4 <HAL_GPIO_WritePin>
	delay_micros(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f000 fe99 	bl	8001798 <delay_micros>

}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	50000400 	.word	0x50000400
 8000a74:	200000e4 	.word	0x200000e4

08000a78 <OLED_sendData>:

void OLED_sendData(uint8_t *OLED_DATA, uint8_t number_of_bytes)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	000a      	movs	r2, r1
 8000a82:	1cfb      	adds	r3, r7, #3
 8000a84:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_RESET);
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	0059      	lsls	r1, r3, #1
 8000a8a:	23a0      	movs	r3, #160	; 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	2200      	movs	r2, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 f98f 	bl	8001db4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, OLED_DATA, number_of_bytes, HAL_MAX_DELAY);
 8000a96:	1cfb      	adds	r3, r7, #3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <OLED_sendData+0x50>)
 8000aa4:	f002 fdf3 	bl	800368e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NOT_CS_GPIO_Port, NOT_CS_Pin, GPIO_PIN_SET);
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	0059      	lsls	r1, r3, #1
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 f97e 	bl	8001db4 <HAL_GPIO_WritePin>
	delay_micros(100);
 8000ab8:	2064      	movs	r0, #100	; 0x64
 8000aba:	f000 fe6d 	bl	8001798 <delay_micros>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	200000e4 	.word	0x200000e4

08000acc <OLED_setFillColor>:

void OLED_setFillColor(uint8_t *rectangle_buffer, uint8_t *line_buffer, uint8_t colorR, uint8_t colorG, uint8_t colorB)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	1c0a      	adds	r2, r1, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

	rectangle_buffer[4] = colorR;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	1dfa      	adds	r2, r7, #7
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	701a      	strb	r2, [r3, #0]
	rectangle_buffer[5] = colorG;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3305      	adds	r3, #5
 8000af0:	1dba      	adds	r2, r7, #6
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	701a      	strb	r2, [r3, #0]
	rectangle_buffer[6] = colorB;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3306      	adds	r3, #6
 8000afa:	2118      	movs	r1, #24
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	701a      	strb	r2, [r3, #0]

	rectangle_buffer[7] = colorR;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3307      	adds	r3, #7
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
	rectangle_buffer[8] = colorG;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	1dba      	adds	r2, r7, #6
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	701a      	strb	r2, [r3, #0]
	rectangle_buffer[9] = colorB;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3309      	adds	r3, #9
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	701a      	strb	r2, [r3, #0]



	line_buffer[4] = colorR;
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3304      	adds	r3, #4
 8000b24:	1dfa      	adds	r2, r7, #7
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	701a      	strb	r2, [r3, #0]
	line_buffer[5] = colorG;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3305      	adds	r3, #5
 8000b2e:	1dba      	adds	r2, r7, #6
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	701a      	strb	r2, [r3, #0]
	line_buffer[6] = colorB;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3306      	adds	r3, #6
 8000b38:	187a      	adds	r2, r7, r1
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	701a      	strb	r2, [r3, #0]

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <OLED_drawRect>:

void OLED_drawRect(uint8_t *rectangle_buffer, uint8_t *fill_buffer, uint8_t startX, uint8_t startY, uint8_t endX, uint8_t endY, uint8_t fill_flag)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	0019      	movs	r1, r3
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	1c0a      	adds	r2, r1, #0
 8000b5c:	701a      	strb	r2, [r3, #0]

	rectangle_buffer[0] = startX;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	1dfa      	adds	r2, r7, #7
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	701a      	strb	r2, [r3, #0]
	rectangle_buffer[1] = startY;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	1dba      	adds	r2, r7, #6
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	701a      	strb	r2, [r3, #0]
	rectangle_buffer[2] = endX;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3302      	adds	r3, #2
 8000b74:	2218      	movs	r2, #24
 8000b76:	18ba      	adds	r2, r7, r2
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	701a      	strb	r2, [r3, #0]
	rectangle_buffer[3] = endY;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3303      	adds	r3, #3
 8000b80:	221c      	movs	r2, #28
 8000b82:	18ba      	adds	r2, r7, r2
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	701a      	strb	r2, [r3, #0]


	if(fill_flag == OLED_FILL_TRUE)
 8000b88:	2320      	movs	r3, #32
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d104      	bne.n	8000b9c <OLED_drawRect+0x54>
		fill_buffer[1] = 0x01;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	3301      	adds	r3, #1
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e003      	b.n	8000ba4 <OLED_drawRect+0x5c>
	else
		fill_buffer[1] = 0x00;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]

	OLED_sendCommand(fill_buffer, 2);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff ff2d 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 8000bae:	2064      	movs	r0, #100	; 0x64
 8000bb0:	f000 febc 	bl	800192c <HAL_Delay>
	OLED_sendCommand(&OLED_DRAW_RECTANGLE, 1);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <OLED_drawRect+0x90>)
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff25 	bl	8000a08 <OLED_sendCommand>
	HAL_Delay(100);
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	f000 feb4 	bl	800192c <HAL_Delay>
	OLED_sendCommand(rectangle_buffer, DRAW_RECTANGLE_BUFFER_SIZE);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	210a      	movs	r1, #10
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff1d 	bl	8000a08 <OLED_sendCommand>

}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	08004bb7 	.word	0x08004bb7

08000bdc <OLED_setCursor>:

void OLED_setCursor(uint8_t x, uint8_t y, uint8_t *OLED_SETCOLUMN, uint8_t *OLED_SETROW)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60ba      	str	r2, [r7, #8]
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	240f      	movs	r4, #15
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	1c02      	adds	r2, r0, #0
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	200e      	movs	r0, #14
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	1c0a      	adds	r2, r1, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	OLED_SETCOLUMN[1] = x;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	193a      	adds	r2, r7, r4
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	701a      	strb	r2, [r3, #0]
	OLED_SETCOLUMN[2] = x+CHAR_WIDTH-1;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3302      	adds	r3, #2
 8000c04:	193a      	adds	r2, r7, r4
 8000c06:	7812      	ldrb	r2, [r2, #0]
 8000c08:	3207      	adds	r2, #7
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	701a      	strb	r2, [r3, #0]
	OLED_SETROW[1] = y;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	183a      	adds	r2, r7, r0
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	701a      	strb	r2, [r3, #0]
	OLED_SETROW[2] = y+CHAR_HEIGHT-1;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	183a      	adds	r2, r7, r0
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	320f      	adds	r2, #15
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	701a      	strb	r2, [r3, #0]

	OLED_sendCommand(OLED_SETCOLUMN, 3);
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	2103      	movs	r1, #3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff feec 	bl	8000a08 <OLED_sendCommand>
	OLED_sendCommand(OLED_SETROW, 3);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2103      	movs	r1, #3
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fee7 	bl	8000a08 <OLED_sendCommand>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b005      	add	sp, #20
 8000c40:	bd90      	pop	{r4, r7, pc}
	...

08000c44 <OLED_drawChar_CMD>:


void OLED_drawChar_CMD(char c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < CHAR_WIDTH; i++)
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e035      	b.n	8000cc6 <OLED_drawChar_CMD+0x82>
	{

		for(uint8_t j = 0; j < CHAR_HEIGHT; j++)
 8000c5a:	230e      	movs	r3, #14
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e025      	b.n	8000cb0 <OLED_drawChar_CMD+0x6c>
		{
			if(((charMap[c - 0x30][i])<<j) & (0x8000))
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3b30      	subs	r3, #48	; 0x30
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <OLED_drawChar_CMD+0x94>)
 8000c74:	00c9      	lsls	r1, r1, #3
 8000c76:	188a      	adds	r2, r1, r2
 8000c78:	0052      	lsls	r2, r2, #1
 8000c7a:	5ad3      	ldrh	r3, [r2, r3]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	230e      	movs	r3, #14
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	409a      	lsls	r2, r3
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d005      	beq.n	8000c9a <OLED_drawChar_CMD+0x56>
				OLED_sendData(OLED_FONTCOLOR, 2);
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <OLED_drawChar_CMD+0x98>)
 8000c90:	2102      	movs	r1, #2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fef0 	bl	8000a78 <OLED_sendData>
 8000c98:	e004      	b.n	8000ca4 <OLED_drawChar_CMD+0x60>
			else
				OLED_sendData(OLED_BACKCOLOR, 2);
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <OLED_drawChar_CMD+0x9c>)
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff feea 	bl	8000a78 <OLED_sendData>
		for(uint8_t j = 0; j < CHAR_HEIGHT; j++)
 8000ca4:	210e      	movs	r1, #14
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	3201      	adds	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	230e      	movs	r3, #14
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d9d4      	bls.n	8000c64 <OLED_drawChar_CMD+0x20>
	for(uint8_t i = 0; i < CHAR_WIDTH; i++)
 8000cba:	210f      	movs	r1, #15
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	3201      	adds	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d9c4      	bls.n	8000c5a <OLED_drawChar_CMD+0x16>
		}

	}

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b004      	add	sp, #16
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	080048c8 	.word	0x080048c8
 8000cdc:	08004bb8 	.word	0x08004bb8
 8000ce0:	08004bbc 	.word	0x08004bbc

08000ce4 <OLED_drawString>:

void OLED_drawString(char *string_buffer, uint8_t x, uint8_t y, uint8_t *OLED_SETCOLUMN, uint8_t *OLED_SETROW)
{
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	0008      	movs	r0, r1
 8000cee:	0011      	movs	r1, r2
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	1c02      	adds	r2, r0, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	1c0a      	adds	r2, r1, #0
 8000d00:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 8000d02:	2317      	movs	r3, #23
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	while(string_buffer[i] != 0)
 8000d0a:	e01e      	b.n	8000d4a <OLED_drawString+0x66>
	{
		OLED_drawChar(x+(i*CHAR_WIDTH), y, string_buffer[i], OLED_SETCOLUMN, OLED_SETROW);
 8000d0c:	2117      	movs	r1, #23
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	230b      	movs	r3, #11
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	000d      	movs	r5, r1
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	18d3      	adds	r3, r2, r3
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	687c      	ldr	r4, [r7, #4]
 8000d2e:	230a      	movs	r3, #10
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	7819      	ldrb	r1, [r3, #0]
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	0023      	movs	r3, r4
 8000d3a:	f000 f812 	bl	8000d62 <OLED_drawChar>
		i++;
 8000d3e:	0029      	movs	r1, r5
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	3201      	adds	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
	while(string_buffer[i] != 0)
 8000d4a:	2317      	movs	r3, #23
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1d8      	bne.n	8000d0c <OLED_drawString+0x28>
	}
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b006      	add	sp, #24
 8000d60:	bdb0      	pop	{r4, r5, r7, pc}

08000d62 <OLED_drawChar>:

void OLED_drawChar(uint8_t x, uint8_t y, char c, uint8_t *OLED_SETCOLUMN, uint8_t *OLED_SETROW)
{
 8000d62:	b590      	push	{r4, r7, lr}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	0004      	movs	r4, r0
 8000d6a:	0008      	movs	r0, r1
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	1c22      	adds	r2, r4, #0
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	1dbb      	adds	r3, r7, #6
 8000d78:	1c02      	adds	r2, r0, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
 8000d7c:	1d7b      	adds	r3, r7, #5
 8000d7e:	1c0a      	adds	r2, r1, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	OLED_setCursor(x, y, OLED_SETCOLUMN, OLED_SETROW);
 8000d82:	69bc      	ldr	r4, [r7, #24]
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	1dbb      	adds	r3, r7, #6
 8000d88:	7819      	ldrb	r1, [r3, #0]
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	7818      	ldrb	r0, [r3, #0]
 8000d8e:	0023      	movs	r3, r4
 8000d90:	f7ff ff24 	bl	8000bdc <OLED_setCursor>
	OLED_drawChar_CMD(c);
 8000d94:	1d7b      	adds	r3, r7, #5
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff ff53 	bl	8000c44 <OLED_drawChar_CMD>
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b003      	add	sp, #12
 8000da4:	bd90      	pop	{r4, r7, pc}
	...

08000da8 <RTC_getSeconds>:
#include "rtc.h"
#include "i2c.h"


uint8_t RTC_getSeconds(uint8_t *i2c_data_buf)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	6078      	str	r0, [r7, #4]

	i2c_data_buf[0] = RTC_SEC_REG_ADDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2202      	movs	r2, #2
 8000db4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <RTC_getSeconds+0x40>)
 8000dba:	2301      	movs	r3, #1
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	21a2      	movs	r1, #162	; 0xa2
 8000dc4:	f001 f8aa 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <RTC_getSeconds+0x40>)
 8000dcc:	2301      	movs	r3, #1
 8000dce:	425b      	negs	r3, r3
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	21a2      	movs	r1, #162	; 0xa2
 8000dd6:	f001 f9a9 	bl	800212c <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000098 	.word	0x20000098

08000dec <RTC_getMins>:

uint8_t RTC_getMins(uint8_t *i2c_data_buf)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]

	i2c_data_buf[0] = RTC_MIN_REG_ADDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <RTC_getMins+0x40>)
 8000dfe:	2301      	movs	r3, #1
 8000e00:	425b      	negs	r3, r3
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	21a2      	movs	r1, #162	; 0xa2
 8000e08:	f001 f888 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <RTC_getMins+0x40>)
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	21a2      	movs	r1, #162	; 0xa2
 8000e1a:	f001 f987 	bl	800212c <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]

}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000098 	.word	0x20000098

08000e30 <RTC_getHours>:

uint8_t RTC_getHours(uint8_t *i2c_data_buf)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]

	i2c_data_buf[0] = RTC_HOUR_REG_ADDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <RTC_getHours+0x40>)
 8000e42:	2301      	movs	r3, #1
 8000e44:	425b      	negs	r3, r3
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	21a2      	movs	r1, #162	; 0xa2
 8000e4c:	f001 f866 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <RTC_getHours+0x40>)
 8000e54:	2301      	movs	r3, #1
 8000e56:	425b      	negs	r3, r3
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	21a2      	movs	r1, #162	; 0xa2
 8000e5e:	f001 f965 	bl	800212c <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]

}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	20000098 	.word	0x20000098

08000e74 <RTC_getWeekday>:

uint8_t RTC_getWeekday(uint8_t *i2c_data_buf)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
	i2c_data_buf[0] = RTC_WEEKDAY_REG_ADDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2206      	movs	r2, #6
 8000e80:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <RTC_getWeekday+0x40>)
 8000e86:	2301      	movs	r3, #1
 8000e88:	425b      	negs	r3, r3
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	21a2      	movs	r1, #162	; 0xa2
 8000e90:	f001 f844 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <RTC_getWeekday+0x40>)
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	21a2      	movs	r1, #162	; 0xa2
 8000ea2:	f001 f943 	bl	800212c <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000098 	.word	0x20000098

08000eb8 <RTC_getDate>:

uint8_t RTC_getDate(uint8_t *i2c_data_buf)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
	i2c_data_buf[0] = RTC_DATE_REG_ADDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <RTC_getDate+0x40>)
 8000eca:	2301      	movs	r3, #1
 8000ecc:	425b      	negs	r3, r3
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	21a2      	movs	r1, #162	; 0xa2
 8000ed4:	f001 f822 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <RTC_getDate+0x40>)
 8000edc:	2301      	movs	r3, #1
 8000ede:	425b      	negs	r3, r3
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	21a2      	movs	r1, #162	; 0xa2
 8000ee6:	f001 f921 	bl	800212c <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	20000098 	.word	0x20000098

08000efc <RTC_getMonth>:

uint8_t RTC_getMonth(uint8_t *i2c_data_buf)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]
	i2c_data_buf[0] = RTC_MONTH_REG_ADDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2207      	movs	r2, #7
 8000f08:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <RTC_getMonth+0x40>)
 8000f0e:	2301      	movs	r3, #1
 8000f10:	425b      	negs	r3, r3
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	21a2      	movs	r1, #162	; 0xa2
 8000f18:	f001 f800 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <RTC_getMonth+0x40>)
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	21a2      	movs	r1, #162	; 0xa2
 8000f2a:	f001 f8ff 	bl	800212c <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	20000098 	.word	0x20000098

08000f40 <RTC_getYear>:

uint8_t RTC_getYear(uint8_t *i2c_data_buf)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	6078      	str	r0, [r7, #4]
	i2c_data_buf[0] = RTC_YEAR_REG_ADDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <RTC_getYear+0x40>)
 8000f52:	2301      	movs	r3, #1
 8000f54:	425b      	negs	r3, r3
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	21a2      	movs	r1, #162	; 0xa2
 8000f5c:	f000 ffde 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, i2c_data_buf, 1, HAL_MAX_DELAY);
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <RTC_getYear+0x40>)
 8000f64:	2301      	movs	r3, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	21a2      	movs	r1, #162	; 0xa2
 8000f6e:	f001 f8dd 	bl	800212c <HAL_I2C_Master_Receive>

	return i2c_data_buf[0];
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	20000098 	.word	0x20000098

08000f84 <RTC_getTime>:


void RTC_getTime(uint8_t *time_array, uint8_t *i2c_data_buf)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	time_array[0] = RTC_getSeconds(i2c_data_buf);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ff09 	bl	8000da8 <RTC_getSeconds>
 8000f96:	0003      	movs	r3, r0
 8000f98:	001a      	movs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	701a      	strb	r2, [r3, #0]
	time_array[1] = RTC_getMins(i2c_data_buf);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	1c5c      	adds	r4, r3, #1
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ff21 	bl	8000dec <RTC_getMins>
 8000faa:	0003      	movs	r3, r0
 8000fac:	7023      	strb	r3, [r4, #0]
	time_array[2] = RTC_getHours(i2c_data_buf);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	1c9c      	adds	r4, r3, #2
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff3b 	bl	8000e30 <RTC_getHours>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	7023      	strb	r3, [r4, #0]
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b003      	add	sp, #12
 8000fc4:	bd90      	pop	{r4, r7, pc}

08000fc6 <RTC_getFullDate>:

void RTC_getFullDate(uint8_t *date_array, uint8_t *i2c_data_buf)
{
 8000fc6:	b590      	push	{r4, r7, lr}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
	date_array[0] = RTC_getWeekday(i2c_data_buf);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff ff4e 	bl	8000e74 <RTC_getWeekday>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	001a      	movs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	701a      	strb	r2, [r3, #0]
	date_array[1] = RTC_getDate(i2c_data_buf);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	1c5c      	adds	r4, r3, #1
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ff66 	bl	8000eb8 <RTC_getDate>
 8000fec:	0003      	movs	r3, r0
 8000fee:	7023      	strb	r3, [r4, #0]
	date_array[2] = RTC_getMonth(i2c_data_buf);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1c9c      	adds	r4, r3, #2
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff80 	bl	8000efc <RTC_getMonth>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	7023      	strb	r3, [r4, #0]
	date_array[3] = RTC_getYear(i2c_data_buf);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1cdc      	adds	r4, r3, #3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff ff9a 	bl	8000f40 <RTC_getYear>
 800100c:	0003      	movs	r3, r0
 800100e:	7023      	strb	r3, [r4, #0]
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b003      	add	sp, #12
 8001016:	bd90      	pop	{r4, r7, pc}

08001018 <conv_time_BCD>:

void conv_time_BCD(uint8_t *time_array)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	uint8_t BCD_sec = time_array[0];
 8001020:	210f      	movs	r1, #15
 8001022:	187b      	adds	r3, r7, r1
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	701a      	strb	r2, [r3, #0]
	uint8_t BCD_min = time_array[1];
 800102a:	200e      	movs	r0, #14
 800102c:	183b      	adds	r3, r7, r0
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	7852      	ldrb	r2, [r2, #1]
 8001032:	701a      	strb	r2, [r3, #0]
	uint8_t BCD_hour = time_array[2];
 8001034:	240d      	movs	r4, #13
 8001036:	193b      	adds	r3, r7, r4
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	7892      	ldrb	r2, [r2, #2]
 800103c:	701a      	strb	r2, [r3, #0]

	time_array[0] = ((BCD_sec>>4) & 0b00000111);
 800103e:	187b      	adds	r3, r7, r1
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2207      	movs	r2, #7
 8001048:	4013      	ands	r3, r2
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	701a      	strb	r2, [r3, #0]
	time_array[1] = (BCD_sec & 0b00001111);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	187a      	adds	r2, r7, r1
 8001056:	7812      	ldrb	r2, [r2, #0]
 8001058:	210f      	movs	r1, #15
 800105a:	400a      	ands	r2, r1
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	701a      	strb	r2, [r3, #0]

	time_array[2] = ((BCD_min>>4) & 0b00000111);
 8001060:	183b      	adds	r3, r7, r0
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	b2da      	uxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	2107      	movs	r1, #7
 800106e:	400a      	ands	r2, r1
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	701a      	strb	r2, [r3, #0]
	time_array[3] = (BCD_min & 0b00001111);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3303      	adds	r3, #3
 8001078:	183a      	adds	r2, r7, r0
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	210f      	movs	r1, #15
 800107e:	400a      	ands	r2, r1
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	701a      	strb	r2, [r3, #0]

	time_array[4] = ((BCD_hour>>4) & 0b00000011);
 8001084:	193b      	adds	r3, r7, r4
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	2103      	movs	r1, #3
 8001092:	400a      	ands	r2, r1
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	701a      	strb	r2, [r3, #0]
	time_array[5] = (BCD_hour & 0b00001111);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3305      	adds	r3, #5
 800109c:	193a      	adds	r2, r7, r4
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	210f      	movs	r1, #15
 80010a2:	400a      	ands	r2, r1
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	701a      	strb	r2, [r3, #0]

}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b005      	add	sp, #20
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <conv_date_BCD>:

void conv_date_BCD(uint8_t *date_array)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	uint8_t BCD_date = date_array[1];
 80010b8:	200f      	movs	r0, #15
 80010ba:	183b      	adds	r3, r7, r0
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	7852      	ldrb	r2, [r2, #1]
 80010c0:	701a      	strb	r2, [r3, #0]
	uint8_t BCD_month = date_array[2];
 80010c2:	240e      	movs	r4, #14
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	7892      	ldrb	r2, [r2, #2]
 80010ca:	701a      	strb	r2, [r3, #0]
	uint8_t BCD_year = date_array[3];
 80010cc:	250d      	movs	r5, #13
 80010ce:	197b      	adds	r3, r7, r5
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	78d2      	ldrb	r2, [r2, #3]
 80010d4:	701a      	strb	r2, [r3, #0]

	date_array[1] = ((BCD_date>>4) & 0b00000011); //date in tens
 80010d6:	183b      	adds	r3, r7, r0
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	2103      	movs	r1, #3
 80010e4:	400a      	ands	r2, r1
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]
	date_array[2] = (BCD_date & 0b00001111); //date in ones
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3302      	adds	r3, #2
 80010ee:	183a      	adds	r2, r7, r0
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	210f      	movs	r1, #15
 80010f4:	400a      	ands	r2, r1
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
	date_array[3] = ((BCD_month>>4) & 0b00000001); //month in tens
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	b2da      	uxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3303      	adds	r3, #3
 8001106:	2101      	movs	r1, #1
 8001108:	400a      	ands	r2, r1
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
	date_array[4] = (BCD_month & 0b00001111); //month in ones
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3304      	adds	r3, #4
 8001112:	193a      	adds	r2, r7, r4
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	210f      	movs	r1, #15
 8001118:	400a      	ands	r2, r1
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
	date_array[5] = ((BCD_year>>4) & 0b00001111); //year in tens
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3305      	adds	r3, #5
 8001122:	197a      	adds	r2, r7, r5
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	0912      	lsrs	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	701a      	strb	r2, [r3, #0]
	date_array[6] = BCD_year & 0b00001111; //year in ones
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3306      	adds	r3, #6
 8001130:	197a      	adds	r2, r7, r5
 8001132:	7812      	ldrb	r2, [r2, #0]
 8001134:	210f      	movs	r1, #15
 8001136:	400a      	ands	r2, r1
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	701a      	strb	r2, [r3, #0]

}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b004      	add	sp, #16
 8001142:	bdb0      	pop	{r4, r5, r7, pc}

08001144 <RTC_init>:
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
}

void RTC_init(uint8_t *i2c_data_buf, uint8_t current_min_BCD, uint8_t current_hour_BCD, uint8_t current_weekday,
		uint8_t current_date_BCD, uint8_t current_month_BCD, uint8_t current_year_BCD)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	000c      	movs	r4, r1
 800114e:	0010      	movs	r0, r2
 8001150:	0019      	movs	r1, r3
 8001152:	1cfb      	adds	r3, r7, #3
 8001154:	1c22      	adds	r2, r4, #0
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	1cbb      	adds	r3, r7, #2
 800115a:	1c02      	adds	r2, r0, #0
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	1c7b      	adds	r3, r7, #1
 8001160:	1c0a      	adds	r2, r1, #0
 8001162:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[0] = RTC_MIN_REG_ADDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_min_BCD;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	1cfa      	adds	r2, r7, #3
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <RTC_init+0xfc>)
 8001178:	2301      	movs	r3, #1
 800117a:	425b      	negs	r3, r3
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2302      	movs	r3, #2
 8001180:	21a2      	movs	r1, #162	; 0xa2
 8001182:	f000 fecb 	bl	8001f1c <HAL_I2C_Master_Transmit>
	i2c_data_buf[0] = RTC_HOUR_REG_ADDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2204      	movs	r2, #4
 800118a:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_hour_BCD;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	1cba      	adds	r2, r7, #2
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4829      	ldr	r0, [pc, #164]	; (8001240 <RTC_init+0xfc>)
 800119a:	2301      	movs	r3, #1
 800119c:	425b      	negs	r3, r3
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2302      	movs	r3, #2
 80011a2:	21a2      	movs	r1, #162	; 0xa2
 80011a4:	f000 feba 	bl	8001f1c <HAL_I2C_Master_Transmit>
	i2c_data_buf[0] = RTC_WEEKDAY_REG_ADDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2206      	movs	r2, #6
 80011ac:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_weekday;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3301      	adds	r3, #1
 80011b2:	1c7a      	adds	r2, r7, #1
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4821      	ldr	r0, [pc, #132]	; (8001240 <RTC_init+0xfc>)
 80011bc:	2301      	movs	r3, #1
 80011be:	425b      	negs	r3, r3
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2302      	movs	r3, #2
 80011c4:	21a2      	movs	r1, #162	; 0xa2
 80011c6:	f000 fea9 	bl	8001f1c <HAL_I2C_Master_Transmit>
	i2c_data_buf[0] = RTC_DATE_REG_ADDR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2205      	movs	r2, #5
 80011ce:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_date_BCD;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3301      	adds	r3, #1
 80011d4:	2218      	movs	r2, #24
 80011d6:	18ba      	adds	r2, r7, r2
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4818      	ldr	r0, [pc, #96]	; (8001240 <RTC_init+0xfc>)
 80011e0:	2301      	movs	r3, #1
 80011e2:	425b      	negs	r3, r3
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2302      	movs	r3, #2
 80011e8:	21a2      	movs	r1, #162	; 0xa2
 80011ea:	f000 fe97 	bl	8001f1c <HAL_I2C_Master_Transmit>
	i2c_data_buf[0] = RTC_MONTH_REG_ADDR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2207      	movs	r2, #7
 80011f2:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_month_BCD;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	221c      	movs	r2, #28
 80011fa:	18ba      	adds	r2, r7, r2
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	480f      	ldr	r0, [pc, #60]	; (8001240 <RTC_init+0xfc>)
 8001204:	2301      	movs	r3, #1
 8001206:	425b      	negs	r3, r3
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	21a2      	movs	r1, #162	; 0xa2
 800120e:	f000 fe85 	bl	8001f1c <HAL_I2C_Master_Transmit>
	i2c_data_buf[0] = RTC_YEAR_REG_ADDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2208      	movs	r2, #8
 8001216:	701a      	strb	r2, [r3, #0]
	i2c_data_buf[1] = current_year_BCD;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	2220      	movs	r2, #32
 800121e:	18ba      	adds	r2, r7, r2
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, i2c_data_buf, 2, HAL_MAX_DELAY);
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <RTC_init+0xfc>)
 8001228:	2301      	movs	r3, #1
 800122a:	425b      	negs	r3, r3
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2302      	movs	r3, #2
 8001230:	21a2      	movs	r1, #162	; 0xa2
 8001232:	f000 fe73 	bl	8001f1c <HAL_I2C_Master_Transmit>
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b003      	add	sp, #12
 800123c:	bd90      	pop	{r4, r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	20000098 	.word	0x20000098

08001244 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_SPI1_Init+0x68>)
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <MX_SPI1_Init+0x6c>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_SPI1_Init+0x68>)
 8001250:	2282      	movs	r2, #130	; 0x82
 8001252:	0052      	lsls	r2, r2, #1
 8001254:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_SPI1_Init+0x68>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_SPI1_Init+0x68>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_SPI1_Init+0x68>)
 8001264:	2202      	movs	r2, #2
 8001266:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_SPI1_Init+0x68>)
 800126a:	2201      	movs	r2, #1
 800126c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SPI1_Init+0x68>)
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <MX_SPI1_Init+0x68>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_SPI1_Init+0x68>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_SPI1_Init+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_SPI1_Init+0x68>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_SPI1_Init+0x68>)
 8001290:	2207      	movs	r2, #7
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <MX_SPI1_Init+0x68>)
 8001296:	0018      	movs	r0, r3
 8001298:	f002 f970 	bl	800357c <HAL_SPI_Init>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d001      	beq.n	80012a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012a0:	f7ff fa9e 	bl	80007e0 <Error_Handler>
  }

}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	200000e4 	.word	0x200000e4
 80012b0:	40013000 	.word	0x40013000

080012b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	230c      	movs	r3, #12
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	0018      	movs	r0, r3
 80012c2:	2314      	movs	r3, #20
 80012c4:	001a      	movs	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	f002 feb0 	bl	800402c <memset>
  if(spiHandle->Instance==SPI1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a18      	ldr	r2, [pc, #96]	; (8001334 <HAL_SPI_MspInit+0x80>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d129      	bne.n	800132a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0149      	lsls	r1, r1, #5
 80012e0:	430a      	orrs	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012ea:	2101      	movs	r1, #1
 80012ec:	430a      	orrs	r2, r1
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	2201      	movs	r2, #1
 80012f6:	4013      	ands	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012fc:	210c      	movs	r1, #12
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	22e0      	movs	r2, #224	; 0xe0
 8001302:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2202      	movs	r2, #2
 8001308:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2203      	movs	r2, #3
 8001314:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	187a      	adds	r2, r7, r1
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f000 fbd7 	bl	8001ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b008      	add	sp, #32
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40013000 	.word	0x40013000
 8001338:	40021000 	.word	0x40021000

0800133c <Watch_init>:
 */

#include "statemachine.h"

void Watch_init(struct Watch *Watch, uint8_t minutes_BCD, uint8_t hours_BCD, uint8_t weekday_BCD, uint8_t date_BCD, uint8_t month_BCD, uint8_t year_BCD)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b087      	sub	sp, #28
 8001340:	af04      	add	r7, sp, #16
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	000c      	movs	r4, r1
 8001346:	0010      	movs	r0, r2
 8001348:	0019      	movs	r1, r3
 800134a:	1cfb      	adds	r3, r7, #3
 800134c:	1c22      	adds	r2, r4, #0
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	1c02      	adds	r2, r0, #0
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	1c7b      	adds	r3, r7, #1
 8001358:	1c0a      	adds	r2, r1, #0
 800135a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim21);
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <Watch_init+0x70>)
 800135e:	0018      	movs	r0, r3
 8001360:	f002 fc00 	bl	8003b64 <HAL_TIM_Base_Start>
	OLED_init(&(Watch->OLED));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3301      	adds	r3, #1
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fa3d 	bl	80007e8 <OLED_init>
	RTC_init(Watch->RTC_MOD.RTC_I2C_BUF, minutes_BCD, hours_BCD, weekday_BCD, date_BCD, month_BCD, year_BCD);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3325      	adds	r3, #37	; 0x25
 8001372:	0018      	movs	r0, r3
 8001374:	1c7b      	adds	r3, r7, #1
 8001376:	781c      	ldrb	r4, [r3, #0]
 8001378:	1cbb      	adds	r3, r7, #2
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	1cfb      	adds	r3, r7, #3
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	2320      	movs	r3, #32
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	231c      	movs	r3, #28
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	2318      	movs	r3, #24
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	0023      	movs	r3, r4
 800139a:	f7ff fed3 	bl	8001144 <RTC_init>


	Watch->WatchState = Get_Time;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]

}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b003      	add	sp, #12
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	2000013c 	.word	0x2000013c

080013b0 <Watch_Get_Time_State>:

void Watch_Get_Time_State(struct Watch *Watch)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

	RTC_getTime(&(Watch->RTC_MOD.time_array), &(Watch->RTC_MOD.RTC_I2C_BUF));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	332a      	adds	r3, #42	; 0x2a
 80013bc:	001a      	movs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3325      	adds	r3, #37	; 0x25
 80013c2:	0019      	movs	r1, r3
 80013c4:	0010      	movs	r0, r2
 80013c6:	f7ff fddd 	bl	8000f84 <RTC_getTime>
	conv_time_BCD(&(Watch->RTC_MOD.time_array[0]));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	332a      	adds	r3, #42	; 0x2a
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff fe22 	bl	8001018 <conv_time_BCD>

	Watch->WatchState = Display_Time;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]

}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <Watch_Display_Time_State>:

void Watch_Display_Time_State(struct Watch *Watch)
{
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	60f8      	str	r0, [r7, #12]

	sprintf(Watch->OLED.string_buffer, "%d%d:%d%d:%d%d", Watch->RTC_MOD.time_array[4] , Watch->RTC_MOD.time_array[5], Watch->RTC_MOD.time_array[2],
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	331b      	adds	r3, #27
 80013f0:	0018      	movs	r0, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	222e      	movs	r2, #46	; 0x2e
 80013f6:	5c9b      	ldrb	r3, [r3, r2]
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	222f      	movs	r2, #47	; 0x2f
 80013fe:	5c9b      	ldrb	r3, [r3, r2]
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	222c      	movs	r2, #44	; 0x2c
 8001406:	5c9b      	ldrb	r3, [r3, r2]
 8001408:	001c      	movs	r4, r3
			Watch->RTC_MOD.time_array[3], Watch->RTC_MOD.time_array[0], Watch->RTC_MOD.time_array[1]);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	222d      	movs	r2, #45	; 0x2d
 800140e:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(Watch->OLED.string_buffer, "%d%d:%d%d:%d%d", Watch->RTC_MOD.time_array[4] , Watch->RTC_MOD.time_array[5], Watch->RTC_MOD.time_array[2],
 8001410:	001d      	movs	r5, r3
			Watch->RTC_MOD.time_array[3], Watch->RTC_MOD.time_array[0], Watch->RTC_MOD.time_array[1]);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	222a      	movs	r2, #42	; 0x2a
 8001416:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(Watch->OLED.string_buffer, "%d%d:%d%d:%d%d", Watch->RTC_MOD.time_array[4] , Watch->RTC_MOD.time_array[5], Watch->RTC_MOD.time_array[2],
 8001418:	001e      	movs	r6, r3
			Watch->RTC_MOD.time_array[3], Watch->RTC_MOD.time_array[0], Watch->RTC_MOD.time_array[1]);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	222b      	movs	r2, #43	; 0x2b
 800141e:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(Watch->OLED.string_buffer, "%d%d:%d%d:%d%d", Watch->RTC_MOD.time_array[4] , Watch->RTC_MOD.time_array[5], Watch->RTC_MOD.time_array[2],
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <Watch_Display_Time_State+0x78>)
 8001422:	9303      	str	r3, [sp, #12]
 8001424:	9602      	str	r6, [sp, #8]
 8001426:	9501      	str	r5, [sp, #4]
 8001428:	9400      	str	r4, [sp, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	f002 fe05 	bl	800403c <siprintf>
	OLED_drawString(Watch->OLED.string_buffer, 16, 35, &(Watch->OLED.OLED_SETCOLUMN[0]), &(Watch->OLED.OLED_SETROW[0]));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	331b      	adds	r3, #27
 8001436:	0018      	movs	r0, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1c9a      	adds	r2, r3, #2
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3305      	adds	r3, #5
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	0013      	movs	r3, r2
 8001444:	2223      	movs	r2, #35	; 0x23
 8001446:	2110      	movs	r1, #16
 8001448:	f7ff fc4c 	bl	8000ce4 <OLED_drawString>

	Watch->WatchState = Get_Date;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2202      	movs	r2, #2
 8001450:	701a      	strb	r2, [r3, #0]

}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b005      	add	sp, #20
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	08004864 	.word	0x08004864

08001460 <Watch_Get_Date_State>:

void Watch_Get_Date_State(struct Watch *Watch)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

	RTC_getFullDate(Watch->RTC_MOD.date_array, Watch->RTC_MOD.RTC_I2C_BUF);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3330      	adds	r3, #48	; 0x30
 800146c:	001a      	movs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3325      	adds	r3, #37	; 0x25
 8001472:	0019      	movs	r1, r3
 8001474:	0010      	movs	r0, r2
 8001476:	f7ff fda6 	bl	8000fc6 <RTC_getFullDate>
	conv_date_BCD(Watch->RTC_MOD.date_array);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3330      	adds	r3, #48	; 0x30
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fe16 	bl	80010b0 <conv_date_BCD>

	Watch->WatchState = Display_Date;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	701a      	strb	r2, [r3, #0]

}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <Watch_Display_Date_State>:

void Watch_Display_Date_State(struct Watch *Watch)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]

	if(Watch->RTC_MOD.date_array[0] == 0)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2230      	movs	r2, #48	; 0x30
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10e      	bne.n	80014c4 <Watch_Display_Date_State+0x30>
		sprintf(Watch->OLED.string_buffer, "SUN;;;%d%d", Watch->RTC_MOD.date_array[1] , Watch->RTC_MOD.date_array[2]);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	331b      	adds	r3, #27
 80014aa:	0018      	movs	r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2231      	movs	r2, #49	; 0x31
 80014b0:	5c9b      	ldrb	r3, [r3, r2]
 80014b2:	001c      	movs	r4, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2232      	movs	r2, #50	; 0x32
 80014b8:	5c9b      	ldrb	r3, [r3, r2]
 80014ba:	4945      	ldr	r1, [pc, #276]	; (80015d0 <Watch_Display_Date_State+0x13c>)
 80014bc:	0022      	movs	r2, r4
 80014be:	f002 fdbd 	bl	800403c <siprintf>
 80014c2:	e071      	b.n	80015a8 <Watch_Display_Date_State+0x114>
	else if(Watch->RTC_MOD.date_array[0] == 1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	5c9b      	ldrb	r3, [r3, r2]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10e      	bne.n	80014ec <Watch_Display_Date_State+0x58>
		sprintf(Watch->OLED.string_buffer, "MON;;;%d%d", Watch->RTC_MOD.date_array[1] , Watch->RTC_MOD.date_array[2]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	331b      	adds	r3, #27
 80014d2:	0018      	movs	r0, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2231      	movs	r2, #49	; 0x31
 80014d8:	5c9b      	ldrb	r3, [r3, r2]
 80014da:	001c      	movs	r4, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	5c9b      	ldrb	r3, [r3, r2]
 80014e2:	493c      	ldr	r1, [pc, #240]	; (80015d4 <Watch_Display_Date_State+0x140>)
 80014e4:	0022      	movs	r2, r4
 80014e6:	f002 fda9 	bl	800403c <siprintf>
 80014ea:	e05d      	b.n	80015a8 <Watch_Display_Date_State+0x114>
	else if(Watch->RTC_MOD.date_array[0] == 2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2230      	movs	r2, #48	; 0x30
 80014f0:	5c9b      	ldrb	r3, [r3, r2]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d10e      	bne.n	8001514 <Watch_Display_Date_State+0x80>
		sprintf(Watch->OLED.string_buffer, "TUE;;;%d%d", Watch->RTC_MOD.date_array[1] , Watch->RTC_MOD.date_array[2]);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	331b      	adds	r3, #27
 80014fa:	0018      	movs	r0, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2231      	movs	r2, #49	; 0x31
 8001500:	5c9b      	ldrb	r3, [r3, r2]
 8001502:	001c      	movs	r4, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2232      	movs	r2, #50	; 0x32
 8001508:	5c9b      	ldrb	r3, [r3, r2]
 800150a:	4933      	ldr	r1, [pc, #204]	; (80015d8 <Watch_Display_Date_State+0x144>)
 800150c:	0022      	movs	r2, r4
 800150e:	f002 fd95 	bl	800403c <siprintf>
 8001512:	e049      	b.n	80015a8 <Watch_Display_Date_State+0x114>
	else if(Watch->RTC_MOD.date_array[0] == 3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2230      	movs	r2, #48	; 0x30
 8001518:	5c9b      	ldrb	r3, [r3, r2]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d10e      	bne.n	800153c <Watch_Display_Date_State+0xa8>
		sprintf(Watch->OLED.string_buffer, "WED;;;%d%d", Watch->RTC_MOD.date_array[1] , Watch->RTC_MOD.date_array[2]);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	331b      	adds	r3, #27
 8001522:	0018      	movs	r0, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2231      	movs	r2, #49	; 0x31
 8001528:	5c9b      	ldrb	r3, [r3, r2]
 800152a:	001c      	movs	r4, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2232      	movs	r2, #50	; 0x32
 8001530:	5c9b      	ldrb	r3, [r3, r2]
 8001532:	492a      	ldr	r1, [pc, #168]	; (80015dc <Watch_Display_Date_State+0x148>)
 8001534:	0022      	movs	r2, r4
 8001536:	f002 fd81 	bl	800403c <siprintf>
 800153a:	e035      	b.n	80015a8 <Watch_Display_Date_State+0x114>
	else if(Watch->RTC_MOD.date_array[0] == 4)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2230      	movs	r2, #48	; 0x30
 8001540:	5c9b      	ldrb	r3, [r3, r2]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d10e      	bne.n	8001564 <Watch_Display_Date_State+0xd0>
		sprintf(Watch->OLED.string_buffer, "THU;;;%d%d", Watch->RTC_MOD.date_array[1] , Watch->RTC_MOD.date_array[2]);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	331b      	adds	r3, #27
 800154a:	0018      	movs	r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2231      	movs	r2, #49	; 0x31
 8001550:	5c9b      	ldrb	r3, [r3, r2]
 8001552:	001c      	movs	r4, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2232      	movs	r2, #50	; 0x32
 8001558:	5c9b      	ldrb	r3, [r3, r2]
 800155a:	4921      	ldr	r1, [pc, #132]	; (80015e0 <Watch_Display_Date_State+0x14c>)
 800155c:	0022      	movs	r2, r4
 800155e:	f002 fd6d 	bl	800403c <siprintf>
 8001562:	e021      	b.n	80015a8 <Watch_Display_Date_State+0x114>
	else if(Watch->RTC_MOD.date_array[0] == 5)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	5c9b      	ldrb	r3, [r3, r2]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d10e      	bne.n	800158c <Watch_Display_Date_State+0xf8>
		sprintf(Watch->OLED.string_buffer, "FRI;;;%d%d", Watch->RTC_MOD.date_array[1] , Watch->RTC_MOD.date_array[2]);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	331b      	adds	r3, #27
 8001572:	0018      	movs	r0, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2231      	movs	r2, #49	; 0x31
 8001578:	5c9b      	ldrb	r3, [r3, r2]
 800157a:	001c      	movs	r4, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2232      	movs	r2, #50	; 0x32
 8001580:	5c9b      	ldrb	r3, [r3, r2]
 8001582:	4918      	ldr	r1, [pc, #96]	; (80015e4 <Watch_Display_Date_State+0x150>)
 8001584:	0022      	movs	r2, r4
 8001586:	f002 fd59 	bl	800403c <siprintf>
 800158a:	e00d      	b.n	80015a8 <Watch_Display_Date_State+0x114>
	else
		sprintf(Watch->OLED.string_buffer, "SAT;;;%d%d", Watch->RTC_MOD.date_array[1] , Watch->RTC_MOD.date_array[2]);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	331b      	adds	r3, #27
 8001590:	0018      	movs	r0, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2231      	movs	r2, #49	; 0x31
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	001c      	movs	r4, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2232      	movs	r2, #50	; 0x32
 800159e:	5c9b      	ldrb	r3, [r3, r2]
 80015a0:	4911      	ldr	r1, [pc, #68]	; (80015e8 <Watch_Display_Date_State+0x154>)
 80015a2:	0022      	movs	r2, r4
 80015a4:	f002 fd4a 	bl	800403c <siprintf>
	OLED_drawString(Watch->OLED.string_buffer, 16, 5, &(Watch->OLED.OLED_SETCOLUMN[0]), &(Watch->OLED.OLED_SETROW[0]));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	331b      	adds	r3, #27
 80015ac:	0018      	movs	r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1c9a      	adds	r2, r3, #2
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3305      	adds	r3, #5
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	0013      	movs	r3, r2
 80015ba:	2205      	movs	r2, #5
 80015bc:	2110      	movs	r1, #16
 80015be:	f7ff fb91 	bl	8000ce4 <OLED_drawString>

	Watch->WatchState = Get_Time;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b003      	add	sp, #12
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	08004874 	.word	0x08004874
 80015d4:	08004880 	.word	0x08004880
 80015d8:	0800488c 	.word	0x0800488c
 80015dc:	08004898 	.word	0x08004898
 80015e0:	080048a4 	.word	0x080048a4
 80015e4:	080048b0 	.word	0x080048b0
 80015e8:	080048bc 	.word	0x080048bc

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_MspInit+0x24>)
 80015f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_MspInit+0x24>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	430a      	orrs	r2, r1
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_MspInit+0x24>)
 80015fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_MspInit+0x24>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0549      	lsls	r1, r1, #21
 8001606:	430a      	orrs	r2, r1
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f95c 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <_sbrk>:
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
 8001674:	f002 fcb0 	bl	8003fd8 <__errno>
 8001678:	0003      	movs	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	425b      	negs	r3, r3
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	18d2      	adds	r2, r2, r3
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b006      	add	sp, #24
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20002000 	.word	0x20002000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	2000008c 	.word	0x2000008c
 80016ac:	20000188 	.word	0x20000188

080016b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	2308      	movs	r3, #8
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	0018      	movs	r0, r3
 80016c8:	2310      	movs	r3, #16
 80016ca:	001a      	movs	r2, r3
 80016cc:	2100      	movs	r1, #0
 80016ce:	f002 fcad 	bl	800402c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d2:	003b      	movs	r3, r7
 80016d4:	0018      	movs	r0, r3
 80016d6:	2308      	movs	r3, #8
 80016d8:	001a      	movs	r2, r3
 80016da:	2100      	movs	r1, #0
 80016dc:	f002 fca6 	bl	800402c <memset>

  htim21.Instance = TIM21;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_TIM21_Init+0xa0>)
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <MX_TIM21_Init+0xa4>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_TIM21_Init+0xa0>)
 80016e8:	221f      	movs	r2, #31
 80016ea:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_TIM21_Init+0xa0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_TIM21_Init+0xa0>)
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <MX_TIM21_Init+0xa8>)
 80016f6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_TIM21_Init+0xa0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_TIM21_Init+0xa0>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_TIM21_Init+0xa0>)
 8001706:	0018      	movs	r0, r3
 8001708:	f002 f9ec 	bl	8003ae4 <HAL_TIM_Base_Init>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8001710:	f7ff f866 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	2108      	movs	r1, #8
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	0152      	lsls	r2, r2, #5
 800171c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800171e:	187a      	adds	r2, r7, r1
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_TIM21_Init+0xa0>)
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f002 fa59 	bl	8003bdc <HAL_TIM_ConfigClockSource>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800172e:	f7ff f857 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	003b      	movs	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	003b      	movs	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800173e:	003a      	movs	r2, r7
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_TIM21_Init+0xa0>)
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f002 fbf7 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800174e:	f7ff f847 	bl	80007e0 <Error_Handler>
  }

}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b006      	add	sp, #24
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	2000013c 	.word	0x2000013c
 8001760:	40010800 	.word	0x40010800
 8001764:	0000ffff 	.word	0x0000ffff

08001768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_TIM_Base_MspInit+0x28>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d105      	bne.n	8001786 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_Base_MspInit+0x2c>)
 800177c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_TIM_Base_MspInit+0x2c>)
 8001780:	2104      	movs	r1, #4
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40010800 	.word	0x40010800
 8001794:	40021000 	.word	0x40021000

08001798 <delay_micros>:
}

/* USER CODE BEGIN 1 */

void delay_micros(uint8_t us)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	0002      	movs	r2, r0
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim21, 0);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <delay_micros+0x2c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim21) < us)
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <delay_micros+0x2c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3f8      	bcc.n	80017ae <delay_micros+0x16>
	{

	}
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000013c 	.word	0x2000013c

080017c8 <Reset_Handler>:
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <LoopForever+0x2>)
 80017ca:	4685      	mov	sp, r0
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <LoopForever+0x6>)
 80017ce:	6801      	ldr	r1, [r0, #0]
 80017d0:	0e09      	lsrs	r1, r1, #24
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <LoopForever+0xa>)
 80017d4:	4291      	cmp	r1, r2
 80017d6:	d105      	bne.n	80017e4 <ApplicationStart>
 80017d8:	4812      	ldr	r0, [pc, #72]	; (8001824 <LoopForever+0xe>)
 80017da:	4913      	ldr	r1, [pc, #76]	; (8001828 <LoopForever+0x12>)
 80017dc:	6001      	str	r1, [r0, #0]
 80017de:	4813      	ldr	r0, [pc, #76]	; (800182c <LoopForever+0x16>)
 80017e0:	4913      	ldr	r1, [pc, #76]	; (8001830 <LoopForever+0x1a>)
 80017e2:	6001      	str	r1, [r0, #0]

080017e4 <ApplicationStart>:
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <LoopForever+0x1e>)
 80017e6:	4914      	ldr	r1, [pc, #80]	; (8001838 <LoopForever+0x22>)
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <LoopForever+0x26>)
 80017ea:	2300      	movs	r3, #0
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:
 80017ee:	58d4      	ldr	r4, [r2, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:
 80017f4:	18c4      	adds	r4, r0, r3
 80017f6:	428c      	cmp	r4, r1
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <LoopForever+0x2a>)
 80017fc:	4c11      	ldr	r4, [pc, #68]	; (8001844 <LoopForever+0x2e>)
 80017fe:	2300      	movs	r3, #0
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:
 8001806:	42a2      	cmp	r2, r4
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>
 800180a:	f7ff ff51 	bl	80016b0 <SystemInit>
 800180e:	f002 fbe9 	bl	8003fe4 <__libc_init_array>
 8001812:	f7fe ff35 	bl	8000680 <main>

08001816 <LoopForever>:
 8001816:	e7fe      	b.n	8001816 <LoopForever>
 8001818:	20002000 	.word	0x20002000
 800181c:	00000004 	.word	0x00000004
 8001820:	0000001f 	.word	0x0000001f
 8001824:	40021034 	.word	0x40021034
 8001828:	00000001 	.word	0x00000001
 800182c:	40010000 	.word	0x40010000
 8001830:	00000000 	.word	0x00000000
 8001834:	20000000 	.word	0x20000000
 8001838:	20000070 	.word	0x20000070
 800183c:	08004c1c 	.word	0x08004c1c
 8001840:	20000070 	.word	0x20000070
 8001844:	20000184 	.word	0x20000184

08001848 <ADC1_IRQHandler>:
 8001848:	e7fe      	b.n	8001848 <ADC1_IRQHandler>
	...

0800184c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_Init+0x3c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_Init+0x3c>)
 800185e:	2140      	movs	r1, #64	; 0x40
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001864:	2000      	movs	r0, #0
 8001866:	f000 f811 	bl	800188c <HAL_InitTick>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d003      	beq.n	8001876 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e001      	b.n	800187a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001876:	f7ff feb9 	bl	80015ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	40022000 	.word	0x40022000

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_InitTick+0x5c>)
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_InitTick+0x60>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	0019      	movs	r1, r3
 800189e:	23fa      	movs	r3, #250	; 0xfa
 80018a0:	0098      	lsls	r0, r3, #2
 80018a2:	f7fe fc31 	bl	8000108 <__udivsi3>
 80018a6:	0003      	movs	r3, r0
 80018a8:	0019      	movs	r1, r3
 80018aa:	0020      	movs	r0, r4
 80018ac:	f7fe fc2c 	bl	8000108 <__udivsi3>
 80018b0:	0003      	movs	r3, r0
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 f903 	bl	8001abe <HAL_SYSTICK_Config>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e00f      	b.n	80018e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d80b      	bhi.n	80018de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	2301      	movs	r3, #1
 80018ca:	425b      	negs	r3, r3
 80018cc:	2200      	movs	r2, #0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 f8e0 	bl	8001a94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_InitTick+0x64>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b003      	add	sp, #12
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_IncTick+0x1c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	001a      	movs	r2, r3
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x20>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	18d2      	adds	r2, r2, r3
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_IncTick+0x20>)
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	20000008 	.word	0x20000008
 8001914:	2000017c 	.word	0x2000017c

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <HAL_GetTick+0x10>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	2000017c 	.word	0x2000017c

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fff0 	bl	8001918 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_Delay+0x40>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	001a      	movs	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	189b      	adds	r3, r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	f7ff ffe0 	bl	8001918 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b004      	add	sp, #16
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000008 	.word	0x20000008

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	0002      	movs	r2, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b7f      	cmp	r3, #127	; 0x7f
 8001984:	d828      	bhi.n	80019d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001986:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <__NVIC_SetPriority+0xd4>)
 8001988:	1dfb      	adds	r3, r7, #7
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b25b      	sxtb	r3, r3
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	33c0      	adds	r3, #192	; 0xc0
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	589b      	ldr	r3, [r3, r2]
 8001996:	1dfa      	adds	r2, r7, #7
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	0011      	movs	r1, r2
 800199c:	2203      	movs	r2, #3
 800199e:	400a      	ands	r2, r1
 80019a0:	00d2      	lsls	r2, r2, #3
 80019a2:	21ff      	movs	r1, #255	; 0xff
 80019a4:	4091      	lsls	r1, r2
 80019a6:	000a      	movs	r2, r1
 80019a8:	43d2      	mvns	r2, r2
 80019aa:	401a      	ands	r2, r3
 80019ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	401a      	ands	r2, r3
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	0018      	movs	r0, r3
 80019bc:	2303      	movs	r3, #3
 80019be:	4003      	ands	r3, r0
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c4:	481f      	ldr	r0, [pc, #124]	; (8001a44 <__NVIC_SetPriority+0xd4>)
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	430a      	orrs	r2, r1
 80019d0:	33c0      	adds	r3, #192	; 0xc0
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019d6:	e031      	b.n	8001a3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <__NVIC_SetPriority+0xd8>)
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	0019      	movs	r1, r3
 80019e0:	230f      	movs	r3, #15
 80019e2:	400b      	ands	r3, r1
 80019e4:	3b08      	subs	r3, #8
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3306      	adds	r3, #6
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	1dfa      	adds	r2, r7, #7
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	0011      	movs	r1, r2
 80019f8:	2203      	movs	r2, #3
 80019fa:	400a      	ands	r2, r1
 80019fc:	00d2      	lsls	r2, r2, #3
 80019fe:	21ff      	movs	r1, #255	; 0xff
 8001a00:	4091      	lsls	r1, r2
 8001a02:	000a      	movs	r2, r1
 8001a04:	43d2      	mvns	r2, r2
 8001a06:	401a      	ands	r2, r3
 8001a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	401a      	ands	r2, r3
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	0018      	movs	r0, r3
 8001a18:	2303      	movs	r3, #3
 8001a1a:	4003      	ands	r3, r0
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <__NVIC_SetPriority+0xd8>)
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	001c      	movs	r4, r3
 8001a28:	230f      	movs	r3, #15
 8001a2a:	4023      	ands	r3, r4
 8001a2c:	3b08      	subs	r3, #8
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	430a      	orrs	r2, r1
 8001a32:	3306      	adds	r3, #6
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	18c3      	adds	r3, r0, r3
 8001a38:	3304      	adds	r3, #4
 8001a3a:	601a      	str	r2, [r3, #0]
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b003      	add	sp, #12
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <SysTick_Config+0x40>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e010      	b.n	8001a84 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <SysTick_Config+0x44>)
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	3a01      	subs	r2, #1
 8001a68:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	2103      	movs	r1, #3
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff ff7d 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <SysTick_Config+0x44>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x44>)
 8001a7e:	2207      	movs	r2, #7
 8001a80:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	00ffffff 	.word	0x00ffffff
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	1c02      	adds	r2, r0, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff ff5d 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b004      	add	sp, #16
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff ffbf 	bl	8001a4c <SysTick_Config>
 8001ace:	0003      	movs	r3, r0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001aee:	e149      	b.n	8001d84 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4091      	lsls	r1, r2
 8001afa:	000a      	movs	r2, r1
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d100      	bne.n	8001b08 <HAL_GPIO_Init+0x30>
 8001b06:	e13a      	b.n	8001d7e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d005      	beq.n	8001b20 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d130      	bne.n	8001b82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	0013      	movs	r3, r2
 8001b30:	43da      	mvns	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	409a      	lsls	r2, r3
 8001b42:	0013      	movs	r3, r2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b56:	2201      	movs	r2, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2203      	movs	r2, #3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d017      	beq.n	8001bbe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d123      	bne.n	8001c12 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	58d3      	ldr	r3, [r2, r3]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2207      	movs	r2, #7
 8001bdc:	4013      	ands	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	43da      	mvns	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2107      	movs	r1, #7
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	0013      	movs	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	401a      	ands	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	23c0      	movs	r3, #192	; 0xc0
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d100      	bne.n	8001c54 <HAL_GPIO_Init+0x17c>
 8001c52:	e094      	b.n	8001d7e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	4b51      	ldr	r3, [pc, #324]	; (8001d9c <HAL_GPIO_Init+0x2c4>)
 8001c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_GPIO_Init+0x2c4>)
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c60:	4a4f      	ldr	r2, [pc, #316]	; (8001da0 <HAL_GPIO_Init+0x2c8>)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	589b      	ldr	r3, [r3, r2]
 8001c6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4013      	ands	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	23a0      	movs	r3, #160	; 0xa0
 8001c88:	05db      	lsls	r3, r3, #23
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x1de>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a44      	ldr	r2, [pc, #272]	; (8001da4 <HAL_GPIO_Init+0x2cc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x1da>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a43      	ldr	r2, [pc, #268]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x1d6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a42      	ldr	r2, [pc, #264]	; (8001dac <HAL_GPIO_Init+0x2d4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x1d2>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	2103      	movs	r1, #3
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc8:	4935      	ldr	r1, [pc, #212]	; (8001da0 <HAL_GPIO_Init+0x2c8>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd6:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	035b      	lsls	r3, r3, #13
 8001d42:	4013      	ands	r3, r2
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	039b      	lsls	r3, r3, #14
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	40da      	lsrs	r2, r3
 8001d8c:	1e13      	subs	r3, r2, #0
 8001d8e:	d000      	beq.n	8001d92 <HAL_GPIO_Init+0x2ba>
 8001d90:	e6ae      	b.n	8001af0 <HAL_GPIO_Init+0x18>
  }
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b006      	add	sp, #24
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	50000400 	.word	0x50000400
 8001da8:	50000800 	.word	0x50000800
 8001dac:	50001c00 	.word	0x50001c00
 8001db0:	40010400 	.word	0x40010400

08001db4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	0008      	movs	r0, r1
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	1cbb      	adds	r3, r7, #2
 8001dc2:	1c02      	adds	r2, r0, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	1c7b      	adds	r3, r7, #1
 8001dc8:	1c0a      	adds	r2, r1, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	1c7b      	adds	r3, r7, #1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd4:	1cbb      	adds	r3, r7, #2
 8001dd6:	881a      	ldrh	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001dde:	1cbb      	adds	r3, r7, #2
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b002      	add	sp, #8
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e082      	b.n	8001f08 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2241      	movs	r2, #65	; 0x41
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	2100      	movs	r1, #0
 8001e14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7fe fbed 	bl	80005f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2241      	movs	r2, #65	; 0x41
 8001e22:	2124      	movs	r1, #36	; 0x24
 8001e24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	438a      	bics	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4934      	ldr	r1, [pc, #208]	; (8001f10 <HAL_I2C_Init+0x120>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4931      	ldr	r1, [pc, #196]	; (8001f14 <HAL_I2C_Init+0x124>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0209      	lsls	r1, r1, #8
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e007      	b.n	8001e7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2184      	movs	r1, #132	; 0x84
 8001e78:	0209      	lsls	r1, r1, #8
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d104      	bne.n	8001e90 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	491f      	ldr	r1, [pc, #124]	; (8001f18 <HAL_I2C_Init+0x128>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	491a      	ldr	r1, [pc, #104]	; (8001f14 <HAL_I2C_Init+0x124>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69d9      	ldr	r1, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2241      	movs	r2, #65	; 0x41
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2242      	movs	r2, #66	; 0x42
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	f0ffffff 	.word	0xf0ffffff
 8001f14:	ffff7fff 	.word	0xffff7fff
 8001f18:	02008000 	.word	0x02008000

08001f1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	0008      	movs	r0, r1
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	0019      	movs	r1, r3
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	1c02      	adds	r2, r0, #0
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	2308      	movs	r3, #8
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	1c0a      	adds	r2, r1, #0
 8001f38:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2241      	movs	r2, #65	; 0x41
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d000      	beq.n	8001f48 <HAL_I2C_Master_Transmit+0x2c>
 8001f46:	e0e7      	b.n	8002118 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	5c9b      	ldrb	r3, [r3, r2]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_I2C_Master_Transmit+0x3a>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e0e1      	b.n	800211a <HAL_I2C_Master_Transmit+0x1fe>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2240      	movs	r2, #64	; 0x40
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f5e:	f7ff fcdb 	bl	8001918 <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	0219      	lsls	r1, r3, #8
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2319      	movs	r3, #25
 8001f72:	2201      	movs	r2, #1
 8001f74:	f000 fa04 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001f78:	1e03      	subs	r3, r0, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0cc      	b.n	800211a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2241      	movs	r2, #65	; 0x41
 8001f84:	2121      	movs	r1, #33	; 0x21
 8001f86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2242      	movs	r2, #66	; 0x42
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	18ba      	adds	r2, r7, r2
 8001fa2:	8812      	ldrh	r2, [r2, #0]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2bff      	cmp	r3, #255	; 0xff
 8001fb4:	d911      	bls.n	8001fda <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	22ff      	movs	r2, #255	; 0xff
 8001fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	045c      	lsls	r4, r3, #17
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	8819      	ldrh	r1, [r3, #0]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	4b55      	ldr	r3, [pc, #340]	; (8002124 <HAL_I2C_Master_Transmit+0x208>)
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	0023      	movs	r3, r4
 8001fd4:	f000 fb74 	bl	80026c0 <I2C_TransferConfig>
 8001fd8:	e075      	b.n	80020c6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	049c      	lsls	r4, r3, #18
 8001fee:	230a      	movs	r3, #10
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	8819      	ldrh	r1, [r3, #0]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_I2C_Master_Transmit+0x208>)
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	0023      	movs	r3, r4
 8001ffc:	f000 fb60 	bl	80026c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002000:	e061      	b.n	80020c6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f9f8 	bl	80023fe <I2C_WaitOnTXISFlagUntilTimeout>
 800200e:	1e03      	subs	r3, r0, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e081      	b.n	800211a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03a      	beq.n	80020c6 <HAL_I2C_Master_Transmit+0x1aa>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d136      	bne.n	80020c6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	0013      	movs	r3, r2
 8002062:	2200      	movs	r2, #0
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	f000 f98b 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e053      	b.n	800211a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	2bff      	cmp	r3, #255	; 0xff
 800207a:	d911      	bls.n	80020a0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	22ff      	movs	r2, #255	; 0xff
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	b2da      	uxtb	r2, r3
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	045c      	lsls	r4, r3, #17
 800208c:	230a      	movs	r3, #10
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	8819      	ldrh	r1, [r3, #0]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	2300      	movs	r3, #0
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	0023      	movs	r3, r4
 800209a:	f000 fb11 	bl	80026c0 <I2C_TransferConfig>
 800209e:	e012      	b.n	80020c6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	049c      	lsls	r4, r3, #18
 80020b4:	230a      	movs	r3, #10
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	8819      	ldrh	r1, [r3, #0]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	2300      	movs	r3, #0
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	0023      	movs	r3, r4
 80020c2:	f000 fafd 	bl	80026c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d198      	bne.n	8002002 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f9d0 	bl	800247c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020dc:	1e03      	subs	r3, r0, #0
 80020de:	d001      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e01a      	b.n	800211a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2220      	movs	r2, #32
 80020ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	490c      	ldr	r1, [pc, #48]	; (8002128 <HAL_I2C_Master_Transmit+0x20c>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2241      	movs	r2, #65	; 0x41
 8002100:	2120      	movs	r1, #32
 8002102:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2242      	movs	r2, #66	; 0x42
 8002108:	2100      	movs	r1, #0
 800210a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	2100      	movs	r1, #0
 8002112:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b007      	add	sp, #28
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	80002000 	.word	0x80002000
 8002128:	fe00e800 	.word	0xfe00e800

0800212c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	0008      	movs	r0, r1
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	0019      	movs	r1, r3
 800213a:	230a      	movs	r3, #10
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	1c02      	adds	r2, r0, #0
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	2308      	movs	r3, #8
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	1c0a      	adds	r2, r1, #0
 8002148:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2241      	movs	r2, #65	; 0x41
 800214e:	5c9b      	ldrb	r3, [r3, r2]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	d000      	beq.n	8002158 <HAL_I2C_Master_Receive+0x2c>
 8002156:	e0e8      	b.n	800232a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Master_Receive+0x3a>
 8002162:	2302      	movs	r3, #2
 8002164:	e0e2      	b.n	800232c <HAL_I2C_Master_Receive+0x200>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2240      	movs	r2, #64	; 0x40
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800216e:	f7ff fbd3 	bl	8001918 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	0219      	lsls	r1, r3, #8
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2319      	movs	r3, #25
 8002182:	2201      	movs	r2, #1
 8002184:	f000 f8fc 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002188:	1e03      	subs	r3, r0, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0cd      	b.n	800232c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2241      	movs	r2, #65	; 0x41
 8002194:	2122      	movs	r1, #34	; 0x22
 8002196:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2242      	movs	r2, #66	; 0x42
 800219c:	2110      	movs	r1, #16
 800219e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2208      	movs	r2, #8
 80021b0:	18ba      	adds	r2, r7, r2
 80021b2:	8812      	ldrh	r2, [r2, #0]
 80021b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2bff      	cmp	r3, #255	; 0xff
 80021c4:	d911      	bls.n	80021ea <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	22ff      	movs	r2, #255	; 0xff
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	045c      	lsls	r4, r3, #17
 80021d6:	230a      	movs	r3, #10
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	8819      	ldrh	r1, [r3, #0]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_I2C_Master_Receive+0x208>)
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	0023      	movs	r3, r4
 80021e4:	f000 fa6c 	bl	80026c0 <I2C_TransferConfig>
 80021e8:	e076      	b.n	80022d8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	049c      	lsls	r4, r3, #18
 80021fe:	230a      	movs	r3, #10
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	8819      	ldrh	r1, [r3, #0]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_I2C_Master_Receive+0x208>)
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	0023      	movs	r3, r4
 800220c:	f000 fa58 	bl	80026c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002210:	e062      	b.n	80022d8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f96b 	bl	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e082      	b.n	800232c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03a      	beq.n	80022d8 <HAL_I2C_Master_Receive+0x1ac>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d136      	bne.n	80022d8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	0013      	movs	r3, r2
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	f000 f882 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 800227c:	1e03      	subs	r3, r0, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e053      	b.n	800232c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d911      	bls.n	80022b2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	22ff      	movs	r2, #255	; 0xff
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	b2da      	uxtb	r2, r3
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	045c      	lsls	r4, r3, #17
 800229e:	230a      	movs	r3, #10
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	8819      	ldrh	r1, [r3, #0]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	2300      	movs	r3, #0
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	0023      	movs	r3, r4
 80022ac:	f000 fa08 	bl	80026c0 <I2C_TransferConfig>
 80022b0:	e012      	b.n	80022d8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	049c      	lsls	r4, r3, #18
 80022c6:	230a      	movs	r3, #10
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	8819      	ldrh	r1, [r3, #0]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	0023      	movs	r3, r4
 80022d4:	f000 f9f4 	bl	80026c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d197      	bne.n	8002212 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 f8c7 	bl	800247c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e01a      	b.n	800232c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2220      	movs	r2, #32
 80022fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	490b      	ldr	r1, [pc, #44]	; (8002338 <HAL_I2C_Master_Receive+0x20c>)
 800230a:	400a      	ands	r2, r1
 800230c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2241      	movs	r2, #65	; 0x41
 8002312:	2120      	movs	r1, #32
 8002314:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2242      	movs	r2, #66	; 0x42
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2240      	movs	r2, #64	; 0x40
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800232a:	2302      	movs	r3, #2
  }
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b007      	add	sp, #28
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	80002400 	.word	0x80002400
 8002338:	fe00e800 	.word	0xfe00e800

0800233c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d103      	bne.n	800235a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	2b01      	cmp	r3, #1
 8002366:	d007      	beq.n	8002378 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	430a      	orrs	r2, r1
 8002376:	619a      	str	r2, [r3, #24]
  }
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e021      	b.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	d01e      	beq.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002398:	f7ff fabe 	bl	8001918 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d302      	bcc.n	80023ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d113      	bne.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	2220      	movs	r2, #32
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2241      	movs	r2, #65	; 0x41
 80023be:	2120      	movs	r1, #32
 80023c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2242      	movs	r2, #66	; 0x42
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	4013      	ands	r3, r2
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	425a      	negs	r2, r3
 80023e6:	4153      	adcs	r3, r2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	001a      	movs	r2, r3
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d0ce      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}

080023fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240a:	e02b      	b.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f8da 	bl	80025cc <I2C_IsAcknowledgeFailed>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e029      	b.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	3301      	adds	r3, #1
 8002424:	d01e      	beq.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7ff fa77 	bl	8001918 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d113      	bne.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	2220      	movs	r2, #32
 8002442:	431a      	orrs	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2241      	movs	r2, #65	; 0x41
 800244c:	2120      	movs	r1, #32
 800244e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2242      	movs	r2, #66	; 0x42
 8002454:	2100      	movs	r1, #0
 8002456:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	2b02      	cmp	r3, #2
 8002470:	d1cc      	bne.n	800240c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002488:	e028      	b.n	80024dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f89b 	bl	80025cc <I2C_IsAcknowledgeFailed>
 8002496:	1e03      	subs	r3, r0, #0
 8002498:	d001      	beq.n	800249e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e026      	b.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff fa3b 	bl	8001918 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d113      	bne.n	80024dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	2220      	movs	r2, #32
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2241      	movs	r2, #65	; 0x41
 80024c4:	2120      	movs	r1, #32
 80024c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2242      	movs	r2, #66	; 0x42
 80024cc:	2100      	movs	r1, #0
 80024ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2220      	movs	r2, #32
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d1cf      	bne.n	800248a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002500:	e055      	b.n	80025ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f85f 	bl	80025cc <I2C_IsAcknowledgeFailed>
 800250e:	1e03      	subs	r3, r0, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e053      	b.n	80025be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2220      	movs	r2, #32
 800251e:	4013      	ands	r3, r2
 8002520:	2b20      	cmp	r3, #32
 8002522:	d129      	bne.n	8002578 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2204      	movs	r2, #4
 800252c:	4013      	ands	r3, r2
 800252e:	2b04      	cmp	r3, #4
 8002530:	d105      	bne.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e03f      	b.n	80025be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2220      	movs	r2, #32
 8002544:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	491d      	ldr	r1, [pc, #116]	; (80025c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002552:	400a      	ands	r2, r1
 8002554:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2241      	movs	r2, #65	; 0x41
 8002560:	2120      	movs	r1, #32
 8002562:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2242      	movs	r2, #66	; 0x42
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e022      	b.n	80025be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002578:	f7ff f9ce 	bl	8001918 <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	429a      	cmp	r2, r3
 8002586:	d302      	bcc.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	2220      	movs	r2, #32
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2241      	movs	r2, #65	; 0x41
 800259e:	2120      	movs	r1, #32
 80025a0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e007      	b.n	80025be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2204      	movs	r2, #4
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d1a2      	bne.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	fe00e800 	.word	0xfe00e800

080025cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2210      	movs	r2, #16
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d164      	bne.n	80026b0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	049b      	lsls	r3, r3, #18
 80025f0:	401a      	ands	r2, r3
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	049b      	lsls	r3, r3, #18
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d02b      	beq.n	8002652 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	01c9      	lsls	r1, r1, #7
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260c:	e021      	b.n	8002652 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3301      	adds	r3, #1
 8002612:	d01e      	beq.n	8002652 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002614:	f7ff f980 	bl	8001918 <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	d302      	bcc.n	800262a <I2C_IsAcknowledgeFailed+0x5e>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d113      	bne.n	8002652 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	2220      	movs	r2, #32
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2241      	movs	r2, #65	; 0x41
 800263a:	2120      	movs	r1, #32
 800263c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2242      	movs	r2, #66	; 0x42
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e02f      	b.n	80026b2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2220      	movs	r2, #32
 800265a:	4013      	ands	r3, r2
 800265c:	2b20      	cmp	r3, #32
 800265e:	d1d6      	bne.n	800260e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2220      	movs	r2, #32
 800266e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff fe62 	bl	800233c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	490e      	ldr	r1, [pc, #56]	; (80026bc <I2C_IsAcknowledgeFailed+0xf0>)
 8002684:	400a      	ands	r2, r1
 8002686:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	2204      	movs	r2, #4
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2241      	movs	r2, #65	; 0x41
 8002698:	2120      	movs	r1, #32
 800269a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2242      	movs	r2, #66	; 0x42
 80026a0:	2100      	movs	r1, #0
 80026a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b004      	add	sp, #16
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	fe00e800 	.word	0xfe00e800

080026c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	0008      	movs	r0, r1
 80026ca:	0011      	movs	r1, r2
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	240a      	movs	r4, #10
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	1c02      	adds	r2, r0, #0
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	2009      	movs	r0, #9
 80026d8:	183b      	adds	r3, r7, r0
 80026da:	1c0a      	adds	r2, r1, #0
 80026dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	0d51      	lsrs	r1, r2, #21
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	00d2      	lsls	r2, r2, #3
 80026ec:	400a      	ands	r2, r1
 80026ee:	490e      	ldr	r1, [pc, #56]	; (8002728 <I2C_TransferConfig+0x68>)
 80026f0:	430a      	orrs	r2, r1
 80026f2:	43d2      	mvns	r2, r2
 80026f4:	401a      	ands	r2, r3
 80026f6:	0011      	movs	r1, r2
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	059b      	lsls	r3, r3, #22
 80026fe:	0d9a      	lsrs	r2, r3, #22
 8002700:	183b      	adds	r3, r7, r0
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	0418      	lsls	r0, r3, #16
 8002706:	23ff      	movs	r3, #255	; 0xff
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	4003      	ands	r3, r0
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	431a      	orrs	r2, r3
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b005      	add	sp, #20
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	03ff63ff 	.word	0x03ff63ff

0800272c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2241      	movs	r2, #65	; 0x41
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b20      	cmp	r3, #32
 8002740:	d138      	bne.n	80027b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800274c:	2302      	movs	r3, #2
 800274e:	e032      	b.n	80027b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2240      	movs	r2, #64	; 0x40
 8002754:	2101      	movs	r1, #1
 8002756:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2241      	movs	r2, #65	; 0x41
 800275c:	2124      	movs	r1, #36	; 0x24
 800275e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	438a      	bics	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4911      	ldr	r1, [pc, #68]	; (80027c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800277c:	400a      	ands	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2241      	movs	r2, #65	; 0x41
 80027a4:	2120      	movs	r1, #32
 80027a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	ffffefff 	.word	0xffffefff

080027c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2241      	movs	r2, #65	; 0x41
 80027d2:	5c9b      	ldrb	r3, [r3, r2]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d139      	bne.n	800284e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2240      	movs	r2, #64	; 0x40
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e033      	b.n	8002850 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	2101      	movs	r1, #1
 80027ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2241      	movs	r2, #65	; 0x41
 80027f4:	2124      	movs	r1, #36	; 0x24
 80027f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	438a      	bics	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2241      	movs	r2, #65	; 0x41
 800283e:	2120      	movs	r1, #32
 8002840:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	2100      	movs	r1, #0
 8002848:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b004      	add	sp, #16
 8002856:	bd80      	pop	{r7, pc}
 8002858:	fffff0ff 	.word	0xfffff0ff

0800285c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800285c:	b5b0      	push	{r4, r5, r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f000 fb70 	bl	8002f50 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002870:	4bc9      	ldr	r3, [pc, #804]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	220c      	movs	r2, #12
 8002876:	4013      	ands	r3, r2
 8002878:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800287a:	4bc7      	ldr	r3, [pc, #796]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	025b      	lsls	r3, r3, #9
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d100      	bne.n	8002892 <HAL_RCC_OscConfig+0x36>
 8002890:	e07d      	b.n	800298e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d007      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x68>
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	025b      	lsls	r3, r3, #9
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	4bbb      	ldr	r3, [pc, #748]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	029b      	lsls	r3, r3, #10
 80028b0:	4013      	ands	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5a>
 80028b4:	e06a      	b.n	800298c <HAL_RCC_OscConfig+0x130>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d166      	bne.n	800298c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f000 fb46 	bl	8002f50 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	025b      	lsls	r3, r3, #9
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x84>
 80028d0:	4bb1      	ldr	r3, [pc, #708]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4bb0      	ldr	r3, [pc, #704]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	0249      	lsls	r1, r1, #9
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e027      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	23a0      	movs	r3, #160	; 0xa0
 80028e6:	02db      	lsls	r3, r3, #11
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d10e      	bne.n	800290a <HAL_RCC_OscConfig+0xae>
 80028ec:	4baa      	ldr	r3, [pc, #680]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4ba9      	ldr	r3, [pc, #676]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	02c9      	lsls	r1, r1, #11
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	4ba7      	ldr	r3, [pc, #668]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4ba6      	ldr	r3, [pc, #664]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	0249      	lsls	r1, r1, #9
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e012      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 800290a:	4ba3      	ldr	r3, [pc, #652]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4ba2      	ldr	r3, [pc, #648]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002910:	49a2      	ldr	r1, [pc, #648]	; (8002b9c <HAL_RCC_OscConfig+0x340>)
 8002912:	400a      	ands	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	4ba0      	ldr	r3, [pc, #640]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	025b      	lsls	r3, r3, #9
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4b9c      	ldr	r3, [pc, #624]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b9b      	ldr	r3, [pc, #620]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 800292a:	499d      	ldr	r1, [pc, #628]	; (8002ba0 <HAL_RCC_OscConfig+0x344>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d014      	beq.n	8002962 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe ffee 	bl	8001918 <HAL_GetTick>
 800293c:	0003      	movs	r3, r0
 800293e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002942:	f7fe ffe9 	bl	8001918 <HAL_GetTick>
 8002946:	0002      	movs	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e2fd      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	4013      	ands	r3, r2
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0xe6>
 8002960:	e015      	b.n	800298e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe ffd9 	bl	8001918 <HAL_GetTick>
 8002966:	0003      	movs	r3, r0
 8002968:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800296c:	f7fe ffd4 	bl	8001918 <HAL_GetTick>
 8002970:	0002      	movs	r2, r0
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e2e8      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800297e:	4b86      	ldr	r3, [pc, #536]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	029b      	lsls	r3, r3, #10
 8002986:	4013      	ands	r3, r2
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x110>
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2202      	movs	r2, #2
 8002994:	4013      	ands	r3, r2
 8002996:	d100      	bne.n	800299a <HAL_RCC_OscConfig+0x13e>
 8002998:	e09a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	2220      	movs	r2, #32
 80029a4:	4013      	ands	r3, r2
 80029a6:	d009      	beq.n	80029bc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80029a8:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b7a      	ldr	r3, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80029ae:	2120      	movs	r1, #32
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	2220      	movs	r2, #32
 80029b8:	4393      	bics	r3, r2
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d13f      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1ec>
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d13c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_RCC_OscConfig+0x186>
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e2b6      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a6f      	ldr	r2, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x348>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	021a      	lsls	r2, r3, #8
 80029f2:	4b69      	ldr	r3, [pc, #420]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029f8:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2209      	movs	r2, #9
 80029fe:	4393      	bics	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a0a:	f000 fbef 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8002a0e:	0001      	movs	r1, r0
 8002a10:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	220f      	movs	r2, #15
 8002a18:	4013      	ands	r3, r2
 8002a1a:	4a63      	ldr	r2, [pc, #396]	; (8002ba8 <HAL_RCC_OscConfig+0x34c>)
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
 8002a1e:	000a      	movs	r2, r1
 8002a20:	40da      	lsrs	r2, r3
 8002a22:	4b62      	ldr	r3, [pc, #392]	; (8002bac <HAL_RCC_OscConfig+0x350>)
 8002a24:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002a26:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <HAL_RCC_OscConfig+0x354>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2513      	movs	r5, #19
 8002a2c:	197c      	adds	r4, r7, r5
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7fe ff2c 	bl	800188c <HAL_InitTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002a38:	197b      	adds	r3, r7, r5
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d047      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002a40:	2313      	movs	r3, #19
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	e283      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d027      	beq.n	8002a9e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a4e:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2209      	movs	r2, #9
 8002a54:	4393      	bics	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe ff5a 	bl	8001918 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe ff55 	bl	8001918 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e269      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2204      	movs	r2, #4
 8002a82:	4013      	ands	r3, r2
 8002a84:	d0f1      	beq.n	8002a6a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a46      	ldr	r2, [pc, #280]	; (8002ba4 <HAL_RCC_OscConfig+0x348>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	021a      	lsls	r2, r3, #8
 8002a96:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	438a      	bics	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe ff35 	bl	8001918 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7fe ff30 	bl	8001918 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e244      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2204      	movs	r2, #4
 8002acc:	4013      	ands	r3, r2
 8002ace:	d1f1      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d100      	bne.n	8002adc <HAL_RCC_OscConfig+0x280>
 8002ada:	e0a2      	b.n	8002c22 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d141      	bne.n	8002b66 <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4013      	ands	r3, r2
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x29e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e22a      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x358>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	0a19      	lsrs	r1, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	061a      	lsls	r2, r3, #24
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	0b5b      	lsrs	r3, r3, #13
 8002b28:	3301      	adds	r3, #1
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	0212      	lsls	r2, r2, #8
 8002b2e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	210f      	movs	r1, #15
 8002b38:	400b      	ands	r3, r1
 8002b3a:	491b      	ldr	r1, [pc, #108]	; (8002ba8 <HAL_RCC_OscConfig+0x34c>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCC_OscConfig+0x350>)
 8002b42:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_RCC_OscConfig+0x354>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2513      	movs	r5, #19
 8002b4a:	197c      	adds	r4, r7, r5
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fe fe9d 	bl	800188c <HAL_InitTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002b56:	197b      	adds	r3, r7, r5
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d061      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002b5e:	2313      	movs	r3, #19
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	e1f4      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03f      	beq.n	8002bee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_OscConfig+0x33c>)
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0049      	lsls	r1, r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fecc 	bl	8001918 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b84:	e018      	b.n	8002bb8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b86:	f7fe fec7 	bl	8001918 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d911      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1db      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	fffeffff 	.word	0xfffeffff
 8002ba0:	fffbffff 	.word	0xfffbffff
 8002ba4:	ffffe0ff 	.word	0xffffe0ff
 8002ba8:	08004bc0 	.word	0x08004bc0
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bb8:	4bca      	ldr	r3, [pc, #808]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d0e0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc4:	4bc7      	ldr	r3, [pc, #796]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4ac7      	ldr	r2, [pc, #796]	; (8002ee8 <HAL_RCC_OscConfig+0x68c>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1a      	ldr	r2, [r3, #32]
 8002bd2:	4bc4      	ldr	r3, [pc, #784]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd8:	4bc2      	ldr	r3, [pc, #776]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	0a19      	lsrs	r1, r3, #8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	061a      	lsls	r2, r3, #24
 8002be6:	4bbf      	ldr	r3, [pc, #764]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	e019      	b.n	8002c22 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bee:	4bbd      	ldr	r3, [pc, #756]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4bbc      	ldr	r3, [pc, #752]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002bf4:	49bd      	ldr	r1, [pc, #756]	; (8002eec <HAL_RCC_OscConfig+0x690>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fe8d 	bl	8001918 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c04:	f7fe fe88 	bl	8001918 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e19c      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c16:	4bb3      	ldr	r3, [pc, #716]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2208      	movs	r2, #8
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d036      	beq.n	8002c9a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d019      	beq.n	8002c68 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c34:	4bab      	ldr	r3, [pc, #684]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c38:	4baa      	ldr	r3, [pc, #680]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fe6a 	bl	8001918 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fe65 	bl	8001918 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e179      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c5c:	4ba1      	ldr	r3, [pc, #644]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c60:	2202      	movs	r2, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d0f1      	beq.n	8002c4a <HAL_RCC_OscConfig+0x3ee>
 8002c66:	e018      	b.n	8002c9a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c68:	4b9e      	ldr	r3, [pc, #632]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c6c:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	438a      	bics	r2, r1
 8002c72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe fe50 	bl	8001918 <HAL_GetTick>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fe4b 	bl	8001918 <HAL_GetTick>
 8002c82:	0002      	movs	r2, r0
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e15f      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c90:	4b94      	ldr	r3, [pc, #592]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c94:	2202      	movs	r2, #2
 8002c96:	4013      	ands	r3, r2
 8002c98:	d1f1      	bne.n	8002c7e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x44a>
 8002ca4:	e0af      	b.n	8002e06 <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2323      	movs	r3, #35	; 0x23
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cae:	4b8d      	ldr	r3, [pc, #564]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	055b      	lsls	r3, r3, #21
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b8a      	ldr	r3, [pc, #552]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbe:	4b89      	ldr	r3, [pc, #548]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0549      	lsls	r1, r1, #21
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002cc8:	2323      	movs	r3, #35	; 0x23
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b87      	ldr	r3, [pc, #540]	; (8002ef0 <HAL_RCC_OscConfig+0x694>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d11a      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cdc:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <HAL_RCC_OscConfig+0x694>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b83      	ldr	r3, [pc, #524]	; (8002ef0 <HAL_RCC_OscConfig+0x694>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0049      	lsls	r1, r1, #1
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fe15 	bl	8001918 <HAL_GetTick>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe fe10 	bl	8001918 <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e124      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b7a      	ldr	r3, [pc, #488]	; (8002ef0 <HAL_RCC_OscConfig+0x694>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4d2>
 8002d1e:	4b71      	ldr	r3, [pc, #452]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d22:	4b70      	ldr	r3, [pc, #448]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0049      	lsls	r1, r1, #1
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	651a      	str	r2, [r3, #80]	; 0x50
 8002d2c:	e031      	b.n	8002d92 <HAL_RCC_OscConfig+0x536>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4f4>
 8002d36:	4b6b      	ldr	r3, [pc, #428]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d3c:	496b      	ldr	r1, [pc, #428]	; (8002eec <HAL_RCC_OscConfig+0x690>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	651a      	str	r2, [r3, #80]	; 0x50
 8002d42:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d48:	496a      	ldr	r1, [pc, #424]	; (8002ef4 <HAL_RCC_OscConfig+0x698>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d4e:	e020      	b.n	8002d92 <HAL_RCC_OscConfig+0x536>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	23a0      	movs	r3, #160	; 0xa0
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10e      	bne.n	8002d7a <HAL_RCC_OscConfig+0x51e>
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d60:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	00c9      	lsls	r1, r1, #3
 8002d66:	430a      	orrs	r2, r1
 8002d68:	651a      	str	r2, [r3, #80]	; 0x50
 8002d6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0049      	lsls	r1, r1, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	651a      	str	r2, [r3, #80]	; 0x50
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x536>
 8002d7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d7e:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d80:	495a      	ldr	r1, [pc, #360]	; (8002eec <HAL_RCC_OscConfig+0x690>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	651a      	str	r2, [r3, #80]	; 0x50
 8002d86:	4b57      	ldr	r3, [pc, #348]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d8a:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002d8c:	4959      	ldr	r1, [pc, #356]	; (8002ef4 <HAL_RCC_OscConfig+0x698>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fdbd 	bl	8001918 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da2:	e009      	b.n	8002db8 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe fdb8 	bl	8001918 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_RCC_OscConfig+0x69c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0cb      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d0ef      	beq.n	8002da4 <HAL_RCC_OscConfig+0x548>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fda7 	bl	8001918 <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dce:	e009      	b.n	8002de4 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fda2 	bl	8001918 <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	4a47      	ldr	r2, [pc, #284]	; (8002ef8 <HAL_RCC_OscConfig+0x69c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0b5      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002de4:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	d1ef      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df0:	2323      	movs	r3, #35	; 0x23
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e00:	493e      	ldr	r1, [pc, #248]	; (8002efc <HAL_RCC_OscConfig+0x6a0>)
 8002e02:	400a      	ands	r2, r1
 8002e04:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d100      	bne.n	8002e10 <HAL_RCC_OscConfig+0x5b4>
 8002e0e:	e09e      	b.n	8002f4e <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d100      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5bc>
 8002e16:	e077      	b.n	8002f08 <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d145      	bne.n	8002eac <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e26:	4936      	ldr	r1, [pc, #216]	; (8002f00 <HAL_RCC_OscConfig+0x6a4>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fd74 	bl	8001918 <HAL_GetTick>
 8002e30:	0003      	movs	r3, r0
 8002e32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe fd6f 	bl	8001918 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e083      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	049b      	lsls	r3, r3, #18
 8002e50:	4013      	ands	r3, r2
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e54:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x6a8>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	0449      	lsls	r1, r1, #17
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fe fd49 	bl	8001918 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe fd44 	bl	8001918 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e058      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	049b      	lsls	r3, r3, #18
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x630>
 8002eaa:	e050      	b.n	8002f4e <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002eb2:	4913      	ldr	r1, [pc, #76]	; (8002f00 <HAL_RCC_OscConfig+0x6a4>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fd2e 	bl	8001918 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe fd29 	bl	8001918 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e03d      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_OscConfig+0x688>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	049b      	lsls	r3, r3, #18
 8002edc:	4013      	ands	r3, r2
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x666>
 8002ee0:	e035      	b.n	8002f4e <HAL_RCC_OscConfig+0x6f2>
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	ffff1fff 	.word	0xffff1fff
 8002eec:	fffffeff 	.word	0xfffffeff
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	fffffbff 	.word	0xfffffbff
 8002ef8:	00001388 	.word	0x00001388
 8002efc:	efffffff 	.word	0xefffffff
 8002f00:	feffffff 	.word	0xfeffffff
 8002f04:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e01d      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_RCC_OscConfig+0x6fc>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	025b      	lsls	r3, r3, #9
 8002f20:	401a      	ands	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d10f      	bne.n	8002f4a <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	23f0      	movs	r3, #240	; 0xf0
 8002f2e:	039b      	lsls	r3, r3, #14
 8002f30:	401a      	ands	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	23c0      	movs	r3, #192	; 0xc0
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	401a      	ands	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b00a      	add	sp, #40	; 0x28
 8002f56:	bdb0      	pop	{r4, r5, r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e129      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b96      	ldr	r3, [pc, #600]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2201      	movs	r2, #1
 8002f76:	4013      	ands	r3, r2
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d91e      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b93      	ldr	r3, [pc, #588]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4393      	bics	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	4b90      	ldr	r3, [pc, #576]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f90:	f7fe fcc2 	bl	8001918 <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f98:	e009      	b.n	8002fae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9a:	f7fe fcbd 	bl	8001918 <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	4a8a      	ldr	r2, [pc, #552]	; (80031d0 <HAL_RCC_ClockConfig+0x274>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e10a      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b87      	ldr	r3, [pc, #540]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1ee      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc6:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	22f0      	movs	r2, #240	; 0xf0
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x8a>
 8002fe4:	e089      	b.n	80030fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fee:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	029b      	lsls	r3, r3, #10
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d120      	bne.n	800303c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0e2      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	049b      	lsls	r3, r3, #18
 800300e:	4013      	ands	r3, r2
 8003010:	d114      	bne.n	800303c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0d6      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d106      	bne.n	800302c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800301e:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2204      	movs	r2, #4
 8003024:	4013      	ands	r3, r2
 8003026:	d109      	bne.n	800303c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0cb      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800302c:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4013      	ands	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0c3      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303c:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2203      	movs	r2, #3
 8003042:	4393      	bics	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003050:	f7fe fc62 	bl	8001918 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d111      	bne.n	8003084 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003060:	e009      	b.n	8003076 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fe fc59 	bl	8001918 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_RCC_ClockConfig+0x274>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0a6      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003076:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	220c      	movs	r2, #12
 800307c:	4013      	ands	r3, r2
 800307e:	2b08      	cmp	r3, #8
 8003080:	d1ef      	bne.n	8003062 <HAL_RCC_ClockConfig+0x106>
 8003082:	e03a      	b.n	80030fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d111      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308c:	e009      	b.n	80030a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308e:	f7fe fc43 	bl	8001918 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	4a4d      	ldr	r2, [pc, #308]	; (80031d0 <HAL_RCC_ClockConfig+0x274>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e090      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a2:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	220c      	movs	r2, #12
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d1ef      	bne.n	800308e <HAL_RCC_ClockConfig+0x132>
 80030ae:	e024      	b.n	80030fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d11b      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030b8:	e009      	b.n	80030ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ba:	f7fe fc2d 	bl	8001918 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	4a42      	ldr	r2, [pc, #264]	; (80031d0 <HAL_RCC_ClockConfig+0x274>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e07a      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	220c      	movs	r2, #12
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d1ef      	bne.n	80030ba <HAL_RCC_ClockConfig+0x15e>
 80030da:	e00e      	b.n	80030fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030dc:	f7fe fc1c 	bl	8001918 <HAL_GetTick>
 80030e0:	0002      	movs	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <HAL_RCC_ClockConfig+0x274>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e069      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	220c      	movs	r2, #12
 80030f6:	4013      	ands	r3, r2
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d21e      	bcs.n	8003146 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003108:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2201      	movs	r2, #1
 800310e:	4393      	bics	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800311a:	f7fe fbfd 	bl	8001918 <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	e009      	b.n	8003138 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe fbf8 	bl	8001918 <HAL_GetTick>
 8003128:	0002      	movs	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <HAL_RCC_ClockConfig+0x274>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e045      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_ClockConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d1ee      	bne.n	8003124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2204      	movs	r2, #4
 800314c:	4013      	ands	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <HAL_RCC_ClockConfig+0x27c>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	4013      	ands	r3, r2
 800316c:	d00a      	beq.n	8003184 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800316e:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_RCC_ClockConfig+0x280>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	00da      	lsls	r2, r3, #3
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003184:	f000 f832 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8003188:	0001      	movs	r1, r0
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_ClockConfig+0x278>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	220f      	movs	r2, #15
 8003192:	4013      	ands	r3, r2
 8003194:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <HAL_RCC_ClockConfig+0x284>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	000a      	movs	r2, r1
 800319a:	40da      	lsrs	r2, r3
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCC_ClockConfig+0x288>)
 800319e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <HAL_RCC_ClockConfig+0x28c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	250b      	movs	r5, #11
 80031a6:	197c      	adds	r4, r7, r5
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fe fb6f 	bl	800188c <HAL_InitTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80031b2:	197b      	adds	r3, r7, r5
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80031ba:	230b      	movs	r3, #11
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bdb0      	pop	{r4, r5, r7, pc}
 80031cc:	40022000 	.word	0x40022000
 80031d0:	00001388 	.word	0x00001388
 80031d4:	40021000 	.word	0x40021000
 80031d8:	fffff8ff 	.word	0xfffff8ff
 80031dc:	ffffc7ff 	.word	0xffffc7ff
 80031e0:	08004bc0 	.word	0x08004bc0
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b08f      	sub	sp, #60	; 0x3c
 80031f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCC_GetSysClockFreq+0x130>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031fa:	230c      	movs	r3, #12
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d00f      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x36>
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d010      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x3c>
 8003206:	2b04      	cmp	r3, #4
 8003208:	d000      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x20>
 800320a:	e073      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCC_GetSysClockFreq+0x130>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2210      	movs	r2, #16
 8003212:	4013      	ands	r3, r2
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003216:	4b42      	ldr	r3, [pc, #264]	; (8003320 <HAL_RCC_GetSysClockFreq+0x134>)
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800321a:	e079      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 800321c:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_RCC_GetSysClockFreq+0x138>)
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003220:	e076      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_RCC_GetSysClockFreq+0x138>)
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003226:	e073      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	0c9a      	lsrs	r2, r3, #18
 800322c:	230f      	movs	r3, #15
 800322e:	401a      	ands	r2, r3
 8003230:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003232:	5c9b      	ldrb	r3, [r3, r2]
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	0d9a      	lsrs	r2, r3, #22
 800323a:	2303      	movs	r3, #3
 800323c:	4013      	ands	r3, r2
 800323e:	3301      	adds	r3, #1
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003242:	4b36      	ldr	r3, [pc, #216]	; (800331c <HAL_RCC_GetSysClockFreq+0x130>)
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	025b      	lsls	r3, r3, #9
 800324a:	4013      	ands	r3, r2
 800324c:	d019      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	4a33      	ldr	r2, [pc, #204]	; (8003324 <HAL_RCC_GetSysClockFreq+0x138>)
 8003258:	2300      	movs	r3, #0
 800325a:	69b8      	ldr	r0, [r7, #24]
 800325c:	69f9      	ldr	r1, [r7, #28]
 800325e:	f7fc ffff 	bl	8000260 <__aeabi_lmul>
 8003262:	0003      	movs	r3, r0
 8003264:	000c      	movs	r4, r1
 8003266:	0018      	movs	r0, r3
 8003268:	0021      	movs	r1, r4
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f7fc ffd3 	bl	8000220 <__aeabi_uldivmod>
 800327a:	0003      	movs	r3, r0
 800327c:	000c      	movs	r4, r1
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
 8003280:	e035      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_RCC_GetSysClockFreq+0x130>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2210      	movs	r2, #16
 8003288:	4013      	ands	r3, r2
 800328a:	d019      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_RCC_GetSysClockFreq+0x134>)
 8003296:	2300      	movs	r3, #0
 8003298:	68b8      	ldr	r0, [r7, #8]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	f7fc ffe0 	bl	8000260 <__aeabi_lmul>
 80032a0:	0003      	movs	r3, r0
 80032a2:	000c      	movs	r4, r1
 80032a4:	0018      	movs	r0, r3
 80032a6:	0021      	movs	r1, r4
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f7fc ffb4 	bl	8000220 <__aeabi_uldivmod>
 80032b8:	0003      	movs	r3, r0
 80032ba:	000c      	movs	r4, r1
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	e016      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	0018      	movs	r0, r3
 80032c4:	2300      	movs	r3, #0
 80032c6:	0019      	movs	r1, r3
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_RCC_GetSysClockFreq+0x138>)
 80032ca:	2300      	movs	r3, #0
 80032cc:	f7fc ffc8 	bl	8000260 <__aeabi_lmul>
 80032d0:	0003      	movs	r3, r0
 80032d2:	000c      	movs	r4, r1
 80032d4:	0018      	movs	r0, r3
 80032d6:	0021      	movs	r1, r4
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	001d      	movs	r5, r3
 80032dc:	2300      	movs	r3, #0
 80032de:	001e      	movs	r6, r3
 80032e0:	002a      	movs	r2, r5
 80032e2:	0033      	movs	r3, r6
 80032e4:	f7fc ff9c 	bl	8000220 <__aeabi_uldivmod>
 80032e8:	0003      	movs	r3, r0
 80032ea:	000c      	movs	r4, r1
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80032f2:	e00d      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_GetSysClockFreq+0x130>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0b5b      	lsrs	r3, r3, #13
 80032fa:	2207      	movs	r2, #7
 80032fc:	4013      	ands	r3, r2
 80032fe:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	3301      	adds	r3, #1
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0212      	lsls	r2, r2, #8
 8003308:	409a      	lsls	r2, r3
 800330a:	0013      	movs	r3, r2
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800330e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b00f      	add	sp, #60	; 0x3c
 8003318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40021000 	.word	0x40021000
 8003320:	003d0900 	.word	0x003d0900
 8003324:	00f42400 	.word	0x00f42400
 8003328:	08004bd0 	.word	0x08004bd0

0800332c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003334:	2317      	movs	r3, #23
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2220      	movs	r2, #32
 8003342:	4013      	ands	r3, r2
 8003344:	d100      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003346:	e0c3      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003348:	4b82      	ldr	r3, [pc, #520]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800334a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	055b      	lsls	r3, r3, #21
 8003350:	4013      	ands	r3, r2
 8003352:	d10a      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003358:	4b7e      	ldr	r3, [pc, #504]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	0549      	lsls	r1, r1, #21
 800335e:	430a      	orrs	r2, r1
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003362:	2317      	movs	r3, #23
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b7b      	ldr	r3, [pc, #492]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4013      	ands	r3, r2
 8003374:	d11a      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b78      	ldr	r3, [pc, #480]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b77      	ldr	r3, [pc, #476]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	0049      	lsls	r1, r1, #1
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003384:	f7fe fac8 	bl	8001918 <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe fac3 	bl	8001918 <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b64      	cmp	r3, #100	; 0x64
 800339a:	d901      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0d4      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4013      	ands	r3, r2
 80033aa:	d0f0      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033ac:	4b69      	ldr	r3, [pc, #420]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	23c0      	movs	r3, #192	; 0xc0
 80033b2:	039b      	lsls	r3, r3, #14
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	23c0      	movs	r3, #192	; 0xc0
 80033be:	039b      	lsls	r3, r3, #14
 80033c0:	4013      	ands	r3, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d013      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	23c0      	movs	r3, #192	; 0xc0
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	401a      	ands	r2, r3
 80033d2:	23c0      	movs	r3, #192	; 0xc0
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d10a      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033da:	4b5e      	ldr	r3, [pc, #376]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	401a      	ands	r2, r3
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	029b      	lsls	r3, r3, #10
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d101      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0ac      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80033f0:	4b58      	ldr	r3, [pc, #352]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80033f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f4:	23c0      	movs	r3, #192	; 0xc0
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03b      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	4013      	ands	r3, r2
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	429a      	cmp	r2, r3
 8003410:	d033      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2220      	movs	r2, #32
 8003418:	4013      	ands	r3, r2
 800341a:	d02e      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800341c:	4b4d      	ldr	r3, [pc, #308]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003420:	4a4e      	ldr	r2, [pc, #312]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003426:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	0309      	lsls	r1, r1, #12
 8003430:	430a      	orrs	r2, r1
 8003432:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003434:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003438:	4b46      	ldr	r3, [pc, #280]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800343a:	4949      	ldr	r1, [pc, #292]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800343c:	400a      	ands	r2, r1
 800343e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003440:	4b44      	ldr	r3, [pc, #272]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4013      	ands	r3, r2
 800344e:	d014      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fa62 	bl	8001918 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003458:	e009      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe fa5d 	bl	8001918 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	4a3f      	ldr	r2, [pc, #252]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e06d      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800346e:	4b39      	ldr	r3, [pc, #228]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4013      	ands	r3, r2
 8003478:	d0ef      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	23c0      	movs	r3, #192	; 0xc0
 8003480:	029b      	lsls	r3, r3, #10
 8003482:	401a      	ands	r2, r3
 8003484:	23c0      	movs	r3, #192	; 0xc0
 8003486:	029b      	lsls	r3, r3, #10
 8003488:	429a      	cmp	r2, r3
 800348a:	d10c      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800348c:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a35      	ldr	r2, [pc, #212]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003492:	4013      	ands	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	23c0      	movs	r3, #192	; 0xc0
 800349c:	039b      	lsls	r3, r3, #14
 800349e:	401a      	ands	r2, r3
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	23c0      	movs	r3, #192	; 0xc0
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	401a      	ands	r2, r3
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034b6:	430a      	orrs	r2, r1
 80034b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ba:	2317      	movs	r3, #23
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b23      	ldr	r3, [pc, #140]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c8:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034ca:	4928      	ldr	r1, [pc, #160]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2202      	movs	r2, #2
 80034d6:	4013      	ands	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	220c      	movs	r2, #12
 80034e0:	4393      	bics	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034ea:	430a      	orrs	r2, r1
 80034ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2204      	movs	r2, #4
 80034f4:	4013      	ands	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80034fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003508:	430a      	orrs	r2, r1
 800350a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2208      	movs	r2, #8
 8003512:	4013      	ands	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003526:	430a      	orrs	r2, r1
 8003528:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	4013      	ands	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800353a:	4013      	ands	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003544:	430a      	orrs	r2, r1
 8003546:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b006      	add	sp, #24
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
 800355c:	fffcffff 	.word	0xfffcffff
 8003560:	fff7ffff 	.word	0xfff7ffff
 8003564:	00001388 	.word	0x00001388
 8003568:	ffcfffff 	.word	0xffcfffff
 800356c:	efffffff 	.word	0xefffffff
 8003570:	fffff3ff 	.word	0xfffff3ff
 8003574:	ffffcfff 	.word	0xffffcfff
 8003578:	fff3ffff 	.word	0xfff3ffff

0800357c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e07b      	b.n	8003686 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	2382      	movs	r3, #130	; 0x82
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	429a      	cmp	r2, r3
 80035a0:	d009      	beq.n	80035b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	61da      	str	r2, [r3, #28]
 80035a8:	e005      	b.n	80035b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2251      	movs	r2, #81	; 0x51
 80035c0:	5c9b      	ldrb	r3, [r3, r2]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2250      	movs	r2, #80	; 0x50
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7fd fe6e 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2251      	movs	r2, #81	; 0x51
 80035dc:	2102      	movs	r1, #2
 80035de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2140      	movs	r1, #64	; 0x40
 80035ec:	438a      	bics	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	2382      	movs	r3, #130	; 0x82
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	2384      	movs	r3, #132	; 0x84
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	400b      	ands	r3, r1
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68d9      	ldr	r1, [r3, #12]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	400b      	ands	r3, r1
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2102      	movs	r1, #2
 8003618:	400b      	ands	r3, r1
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2101      	movs	r1, #1
 8003622:	400b      	ands	r3, r1
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	400b      	ands	r3, r1
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	2138      	movs	r1, #56	; 0x38
 8003638:	400b      	ands	r3, r1
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	400b      	ands	r3, r1
 8003644:	431a      	orrs	r2, r3
 8003646:	0011      	movs	r1, r2
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	019b      	lsls	r3, r3, #6
 8003650:	401a      	ands	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	2204      	movs	r2, #4
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2210      	movs	r2, #16
 800366c:	401a      	ands	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2251      	movs	r2, #81	; 0x51
 8003680:	2101      	movs	r1, #1
 8003682:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b088      	sub	sp, #32
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	1dbb      	adds	r3, r7, #6
 800369c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800369e:	231f      	movs	r3, #31
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2250      	movs	r2, #80	; 0x50
 80036aa:	5c9b      	ldrb	r3, [r3, r2]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_SPI_Transmit+0x26>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e13e      	b.n	8003932 <HAL_SPI_Transmit+0x2a4>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2250      	movs	r2, #80	; 0x50
 80036b8:	2101      	movs	r1, #1
 80036ba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036bc:	f7fe f92c 	bl	8001918 <HAL_GetTick>
 80036c0:	0003      	movs	r3, r0
 80036c2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036c4:	2316      	movs	r3, #22
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	1dba      	adds	r2, r7, #6
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2251      	movs	r2, #81	; 0x51
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d004      	beq.n	80036e4 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80036da:	231f      	movs	r3, #31
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	2202      	movs	r2, #2
 80036e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80036e2:	e11b      	b.n	800391c <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_SPI_Transmit+0x64>
 80036ea:	1dbb      	adds	r3, r7, #6
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80036f2:	231f      	movs	r3, #31
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80036fa:	e10f      	b.n	800391c <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2251      	movs	r2, #81	; 0x51
 8003700:	2103      	movs	r1, #3
 8003702:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1dba      	adds	r2, r7, #6
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1dba      	adds	r2, r7, #6
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	429a      	cmp	r2, r3
 8003748:	d110      	bne.n	800376c <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	438a      	bics	r2, r1
 8003758:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	01c9      	lsls	r1, r1, #7
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	4013      	ands	r3, r2
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d007      	beq.n	800378a <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	429a      	cmp	r2, r3
 8003794:	d14e      	bne.n	8003834 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <HAL_SPI_Transmit+0x11a>
 800379e:	2316      	movs	r3, #22
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d13f      	bne.n	8003828 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037cc:	e02c      	b.n	8003828 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2202      	movs	r2, #2
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d112      	bne.n	8003802 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	881a      	ldrh	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	1c9a      	adds	r2, r3, #2
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003800:	e012      	b.n	8003828 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003802:	f7fe f889 	bl	8001918 <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d802      	bhi.n	8003818 <HAL_SPI_Transmit+0x18a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	d102      	bne.n	800381e <HAL_SPI_Transmit+0x190>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800381e:	231f      	movs	r3, #31
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	2203      	movs	r2, #3
 8003824:	701a      	strb	r2, [r3, #0]
          goto error;
 8003826:	e079      	b.n	800391c <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1cd      	bne.n	80037ce <HAL_SPI_Transmit+0x140>
 8003832:	e04f      	b.n	80038d4 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_SPI_Transmit+0x1b8>
 800383c:	2316      	movs	r3, #22
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d141      	bne.n	80038ca <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800386c:	e02d      	b.n	80038ca <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2202      	movs	r2, #2
 8003876:	4013      	ands	r3, r2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d113      	bne.n	80038a4 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80038a2:	e012      	b.n	80038ca <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038a4:	f7fe f838 	bl	8001918 <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d802      	bhi.n	80038ba <HAL_SPI_Transmit+0x22c>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_SPI_Transmit+0x232>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80038c0:	231f      	movs	r3, #31
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	2203      	movs	r2, #3
 80038c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80038c8:	e028      	b.n	800391c <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1cc      	bne.n	800386e <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	6839      	ldr	r1, [r7, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 f8bc 	bl	8003a58 <SPI_EndRxTxTransaction>
 80038e0:	1e03      	subs	r3, r0, #0
 80038e2:	d002      	beq.n	80038ea <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8003910:	231f      	movs	r3, #31
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e000      	b.n	800391c <HAL_SPI_Transmit+0x28e>
  }

error:
 800391a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2251      	movs	r2, #81	; 0x51
 8003920:	2101      	movs	r1, #1
 8003922:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2250      	movs	r2, #80	; 0x50
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800392c:	231f      	movs	r3, #31
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b008      	add	sp, #32
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800394c:	f7fd ffe4 	bl	8001918 <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	18d3      	adds	r3, r2, r3
 800395a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800395c:	f7fd ffdc 	bl	8001918 <HAL_GetTick>
 8003960:	0003      	movs	r3, r0
 8003962:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003964:	4b3a      	ldr	r3, [pc, #232]	; (8003a50 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	015b      	lsls	r3, r3, #5
 800396a:	0d1b      	lsrs	r3, r3, #20
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	4353      	muls	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003972:	e058      	b.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	d055      	beq.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800397a:	f7fd ffcd 	bl	8001918 <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	429a      	cmp	r2, r3
 8003988:	d902      	bls.n	8003990 <SPI_WaitFlagStateUntilTimeout+0x54>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d142      	bne.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	21e0      	movs	r1, #224	; 0xe0
 800399c:	438a      	bics	r2, r1
 800399e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	2382      	movs	r3, #130	; 0x82
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d113      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d005      	beq.n	80039c4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d107      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2140      	movs	r1, #64	; 0x40
 80039d0:	438a      	bics	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	019b      	lsls	r3, r3, #6
 80039dc:	429a      	cmp	r2, r3
 80039de:	d110      	bne.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	491a      	ldr	r1, [pc, #104]	; (8003a54 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	0189      	lsls	r1, r1, #6
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2251      	movs	r2, #81	; 0x51
 8003a06:	2101      	movs	r1, #1
 8003a08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2250      	movs	r2, #80	; 0x50
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e017      	b.n	8003a46 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	425a      	negs	r2, r3
 8003a36:	4153      	adcs	r3, r2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	1dfb      	adds	r3, r7, #7
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d197      	bne.n	8003974 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b008      	add	sp, #32
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	20000000 	.word	0x20000000
 8003a54:	ffffdfff 	.word	0xffffdfff

08003a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <SPI_EndRxTxTransaction+0x84>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	491d      	ldr	r1, [pc, #116]	; (8003ae0 <SPI_EndRxTxTransaction+0x88>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fc fb4c 	bl	8000108 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	001a      	movs	r2, r3
 8003a74:	0013      	movs	r3, r2
 8003a76:	015b      	lsls	r3, r3, #5
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	189b      	adds	r3, r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	2382      	movs	r3, #130	; 0x82
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d112      	bne.n	8003ab4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	0013      	movs	r3, r2
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	f7ff ff4e 	bl	800393c <SPI_WaitFlagStateUntilTimeout>
 8003aa0:	1e03      	subs	r3, r0, #0
 8003aa2:	d016      	beq.n	8003ad2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e00f      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	d0f2      	beq.n	8003ab4 <SPI_EndRxTxTransaction+0x5c>
 8003ace:	e000      	b.n	8003ad2 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003ad0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b006      	add	sp, #24
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	016e3600 	.word	0x016e3600

08003ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e032      	b.n	8003b5c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2239      	movs	r2, #57	; 0x39
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2238      	movs	r2, #56	; 0x38
 8003b06:	2100      	movs	r1, #0
 8003b08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fd fe2b 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2239      	movs	r2, #57	; 0x39
 8003b16:	2102      	movs	r1, #2
 8003b18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f000 f923 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	223e      	movs	r2, #62	; 0x3e
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	223a      	movs	r2, #58	; 0x3a
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	223b      	movs	r2, #59	; 0x3b
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	223c      	movs	r2, #60	; 0x3c
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	223d      	movs	r2, #61	; 0x3d
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2239      	movs	r2, #57	; 0x39
 8003b56:	2101      	movs	r1, #1
 8003b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2239      	movs	r2, #57	; 0x39
 8003b70:	5c9b      	ldrb	r3, [r3, r2]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e029      	b.n	8003bd0 <HAL_TIM_Base_Start+0x6c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2239      	movs	r2, #57	; 0x39
 8003b80:	2102      	movs	r1, #2
 8003b82:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	05db      	lsls	r3, r3, #23
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d004      	beq.n	8003b9a <HAL_TIM_Base_Start+0x36>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <HAL_TIM_Base_Start+0x74>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d111      	bne.n	8003bbe <HAL_TIM_Base_Start+0x5a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d010      	beq.n	8003bce <HAL_TIM_Base_Start+0x6a>
    {
      __HAL_TIM_ENABLE(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	e007      	b.n	8003bce <HAL_TIM_Base_Start+0x6a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40010800 	.word	0x40010800

08003bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	230f      	movs	r3, #15
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2238      	movs	r2, #56	; 0x38
 8003bf2:	5c9b      	ldrb	r3, [r3, r2]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_TIM_ConfigClockSource+0x20>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e0b2      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x186>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2238      	movs	r2, #56	; 0x38
 8003c00:	2101      	movs	r1, #1
 8003c02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2239      	movs	r2, #57	; 0x39
 8003c08:	2102      	movs	r1, #2
 8003c0a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2277      	movs	r2, #119	; 0x77
 8003c18:	4393      	bics	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4a53      	ldr	r2, [pc, #332]	; (8003d6c <HAL_TIM_ConfigClockSource+0x190>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d100      	bne.n	8003c36 <HAL_TIM_ConfigClockSource+0x5a>
 8003c34:	e06b      	b.n	8003d0e <HAL_TIM_ConfigClockSource+0x132>
 8003c36:	d80e      	bhi.n	8003c56 <HAL_TIM_ConfigClockSource+0x7a>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d100      	bne.n	8003c3e <HAL_TIM_ConfigClockSource+0x62>
 8003c3c:	e077      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x152>
 8003c3e:	d803      	bhi.n	8003c48 <HAL_TIM_ConfigClockSource+0x6c>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d100      	bne.n	8003c46 <HAL_TIM_ConfigClockSource+0x6a>
 8003c44:	e073      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x152>
 8003c46:	e07b      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x164>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d100      	bne.n	8003c4e <HAL_TIM_ConfigClockSource+0x72>
 8003c4c:	e06f      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x152>
 8003c4e:	2b30      	cmp	r3, #48	; 0x30
 8003c50:	d100      	bne.n	8003c54 <HAL_TIM_ConfigClockSource+0x78>
 8003c52:	e06c      	b.n	8003d2e <HAL_TIM_ConfigClockSource+0x152>
 8003c54:	e074      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x164>
 8003c56:	2b70      	cmp	r3, #112	; 0x70
 8003c58:	d00e      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0x9c>
 8003c5a:	d804      	bhi.n	8003c66 <HAL_TIM_ConfigClockSource+0x8a>
 8003c5c:	2b50      	cmp	r3, #80	; 0x50
 8003c5e:	d036      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xf2>
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d044      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x112>
 8003c64:	e06c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x164>
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	0152      	lsls	r2, r2, #5
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d06d      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x16e>
 8003c6e:	2280      	movs	r2, #128	; 0x80
 8003c70:	0192      	lsls	r2, r2, #6
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d017      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xca>
 8003c76:	e063      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f000 f936 	bl	8003ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2277      	movs	r2, #119	; 0x77
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
      break;
 8003ca4:	e052      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f000 f91f 	bl	8003ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	01c9      	lsls	r1, r1, #7
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e03e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	001a      	movs	r2, r3
 8003cdc:	f000 f892 	bl	8003e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2150      	movs	r1, #80	; 0x50
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 f8ec 	bl	8003ec4 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e02e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	f000 f8b0 	bl	8003e60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2160      	movs	r1, #96	; 0x60
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 f8dc 	bl	8003ec4 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e01e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	f000 f872 	bl	8003e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 f8cc 	bl	8003ec4 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e00e      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	0019      	movs	r1, r3
 8003d38:	0010      	movs	r0, r2
 8003d3a:	f000 f8c3 	bl	8003ec4 <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e005      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8003d40:	230f      	movs	r3, #15
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
      break;
 8003d48:	e000      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x170>
      break;
 8003d4a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2239      	movs	r2, #57	; 0x39
 8003d50:	2101      	movs	r1, #1
 8003d52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2238      	movs	r2, #56	; 0x38
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

  return status;
 8003d5c:	230f      	movs	r3, #15
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	781b      	ldrb	r3, [r3, #0]
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	ffff00ff 	.word	0xffff00ff

08003d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	05db      	lsls	r3, r3, #23
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d003      	beq.n	8003d92 <TIM_Base_SetConfig+0x22>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <TIM_Base_SetConfig+0x8c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d108      	bne.n	8003da4 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2270      	movs	r2, #112	; 0x70
 8003d96:	4393      	bics	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d003      	beq.n	8003db6 <TIM_Base_SetConfig+0x46>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <TIM_Base_SetConfig+0x8c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d108      	bne.n	8003dc8 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <TIM_Base_SetConfig+0x90>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	4393      	bics	r3, r2
 8003dce:	001a      	movs	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	615a      	str	r2, [r3, #20]
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b004      	add	sp, #16
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40010800 	.word	0x40010800
 8003e00:	fffffcff 	.word	0xfffffcff

08003e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	001a      	movs	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	22f0      	movs	r2, #240	; 0xf0
 8003e2e:	4393      	bics	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	220a      	movs	r2, #10
 8003e40:	4393      	bics	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b006      	add	sp, #24
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	2210      	movs	r2, #16
 8003e72:	4393      	bics	r3, r2
 8003e74:	001a      	movs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <TIM_TI2_ConfigInputStage+0x60>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	031b      	lsls	r3, r3, #12
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	22a0      	movs	r2, #160	; 0xa0
 8003e9c:	4393      	bics	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b006      	add	sp, #24
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	ffff0fff 	.word	0xffff0fff

08003ec4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2270      	movs	r2, #112	; 0x70
 8003ed8:	4393      	bics	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	609a      	str	r2, [r3, #8]
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <TIM_ETR_SetConfig+0x3c>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b006      	add	sp, #24
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	ffff00ff 	.word	0xffff00ff

08003f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2238      	movs	r2, #56	; 0x38
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e03d      	b.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2238      	movs	r2, #56	; 0x38
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2239      	movs	r2, #57	; 0x39
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2270      	movs	r2, #112	; 0x70
 8003f74:	4393      	bics	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	05db      	lsls	r3, r3, #23
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d004      	beq.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10c      	bne.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	4393      	bics	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2239      	movs	r2, #57	; 0x39
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2238      	movs	r2, #56	; 0x38
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40010800 	.word	0x40010800

08003fd8 <__errno>:
 8003fd8:	4b01      	ldr	r3, [pc, #4]	; (8003fe0 <__errno+0x8>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	2000000c 	.word	0x2000000c

08003fe4 <__libc_init_array>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	4d0c      	ldr	r5, [pc, #48]	; (800401c <__libc_init_array+0x38>)
 8003fea:	4c0d      	ldr	r4, [pc, #52]	; (8004020 <__libc_init_array+0x3c>)
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	42a6      	cmp	r6, r4
 8003ff2:	d109      	bne.n	8004008 <__libc_init_array+0x24>
 8003ff4:	2600      	movs	r6, #0
 8003ff6:	f000 fc29 	bl	800484c <_init>
 8003ffa:	4d0a      	ldr	r5, [pc, #40]	; (8004024 <__libc_init_array+0x40>)
 8003ffc:	4c0a      	ldr	r4, [pc, #40]	; (8004028 <__libc_init_array+0x44>)
 8003ffe:	1b64      	subs	r4, r4, r5
 8004000:	10a4      	asrs	r4, r4, #2
 8004002:	42a6      	cmp	r6, r4
 8004004:	d105      	bne.n	8004012 <__libc_init_array+0x2e>
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	00b3      	lsls	r3, r6, #2
 800400a:	58eb      	ldr	r3, [r5, r3]
 800400c:	4798      	blx	r3
 800400e:	3601      	adds	r6, #1
 8004010:	e7ee      	b.n	8003ff0 <__libc_init_array+0xc>
 8004012:	00b3      	lsls	r3, r6, #2
 8004014:	58eb      	ldr	r3, [r5, r3]
 8004016:	4798      	blx	r3
 8004018:	3601      	adds	r6, #1
 800401a:	e7f2      	b.n	8004002 <__libc_init_array+0x1e>
 800401c:	08004c14 	.word	0x08004c14
 8004020:	08004c14 	.word	0x08004c14
 8004024:	08004c14 	.word	0x08004c14
 8004028:	08004c18 	.word	0x08004c18

0800402c <memset>:
 800402c:	0003      	movs	r3, r0
 800402e:	1812      	adds	r2, r2, r0
 8004030:	4293      	cmp	r3, r2
 8004032:	d100      	bne.n	8004036 <memset+0xa>
 8004034:	4770      	bx	lr
 8004036:	7019      	strb	r1, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	e7f9      	b.n	8004030 <memset+0x4>

0800403c <siprintf>:
 800403c:	b40e      	push	{r1, r2, r3}
 800403e:	b500      	push	{lr}
 8004040:	490b      	ldr	r1, [pc, #44]	; (8004070 <siprintf+0x34>)
 8004042:	b09c      	sub	sp, #112	; 0x70
 8004044:	ab1d      	add	r3, sp, #116	; 0x74
 8004046:	9002      	str	r0, [sp, #8]
 8004048:	9006      	str	r0, [sp, #24]
 800404a:	9107      	str	r1, [sp, #28]
 800404c:	9104      	str	r1, [sp, #16]
 800404e:	4809      	ldr	r0, [pc, #36]	; (8004074 <siprintf+0x38>)
 8004050:	4909      	ldr	r1, [pc, #36]	; (8004078 <siprintf+0x3c>)
 8004052:	cb04      	ldmia	r3!, {r2}
 8004054:	9105      	str	r1, [sp, #20]
 8004056:	6800      	ldr	r0, [r0, #0]
 8004058:	a902      	add	r1, sp, #8
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	f000 f870 	bl	8004140 <_svfiprintf_r>
 8004060:	2300      	movs	r3, #0
 8004062:	9a02      	ldr	r2, [sp, #8]
 8004064:	7013      	strb	r3, [r2, #0]
 8004066:	b01c      	add	sp, #112	; 0x70
 8004068:	bc08      	pop	{r3}
 800406a:	b003      	add	sp, #12
 800406c:	4718      	bx	r3
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	7fffffff 	.word	0x7fffffff
 8004074:	2000000c 	.word	0x2000000c
 8004078:	ffff0208 	.word	0xffff0208

0800407c <__ssputs_r>:
 800407c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800407e:	688e      	ldr	r6, [r1, #8]
 8004080:	b085      	sub	sp, #20
 8004082:	0007      	movs	r7, r0
 8004084:	000c      	movs	r4, r1
 8004086:	9203      	str	r2, [sp, #12]
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	429e      	cmp	r6, r3
 800408c:	d83c      	bhi.n	8004108 <__ssputs_r+0x8c>
 800408e:	2390      	movs	r3, #144	; 0x90
 8004090:	898a      	ldrh	r2, [r1, #12]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	421a      	tst	r2, r3
 8004096:	d034      	beq.n	8004102 <__ssputs_r+0x86>
 8004098:	2503      	movs	r5, #3
 800409a:	6909      	ldr	r1, [r1, #16]
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	1a5b      	subs	r3, r3, r1
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	6963      	ldr	r3, [r4, #20]
 80040a4:	9802      	ldr	r0, [sp, #8]
 80040a6:	435d      	muls	r5, r3
 80040a8:	0feb      	lsrs	r3, r5, #31
 80040aa:	195d      	adds	r5, r3, r5
 80040ac:	9b01      	ldr	r3, [sp, #4]
 80040ae:	106d      	asrs	r5, r5, #1
 80040b0:	3301      	adds	r3, #1
 80040b2:	181b      	adds	r3, r3, r0
 80040b4:	42ab      	cmp	r3, r5
 80040b6:	d900      	bls.n	80040ba <__ssputs_r+0x3e>
 80040b8:	001d      	movs	r5, r3
 80040ba:	0553      	lsls	r3, r2, #21
 80040bc:	d532      	bpl.n	8004124 <__ssputs_r+0xa8>
 80040be:	0029      	movs	r1, r5
 80040c0:	0038      	movs	r0, r7
 80040c2:	f000 fb23 	bl	800470c <_malloc_r>
 80040c6:	1e06      	subs	r6, r0, #0
 80040c8:	d109      	bne.n	80040de <__ssputs_r+0x62>
 80040ca:	230c      	movs	r3, #12
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	2340      	movs	r3, #64	; 0x40
 80040d0:	2001      	movs	r0, #1
 80040d2:	89a2      	ldrh	r2, [r4, #12]
 80040d4:	4240      	negs	r0, r0
 80040d6:	4313      	orrs	r3, r2
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	b005      	add	sp, #20
 80040dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040de:	9a02      	ldr	r2, [sp, #8]
 80040e0:	6921      	ldr	r1, [r4, #16]
 80040e2:	f000 faac 	bl	800463e <memcpy>
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <__ssputs_r+0xc0>)
 80040ea:	401a      	ands	r2, r3
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	4313      	orrs	r3, r2
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	9b02      	ldr	r3, [sp, #8]
 80040f4:	6126      	str	r6, [r4, #16]
 80040f6:	18f6      	adds	r6, r6, r3
 80040f8:	6026      	str	r6, [r4, #0]
 80040fa:	6165      	str	r5, [r4, #20]
 80040fc:	9e01      	ldr	r6, [sp, #4]
 80040fe:	1aed      	subs	r5, r5, r3
 8004100:	60a5      	str	r5, [r4, #8]
 8004102:	9b01      	ldr	r3, [sp, #4]
 8004104:	429e      	cmp	r6, r3
 8004106:	d900      	bls.n	800410a <__ssputs_r+0x8e>
 8004108:	9e01      	ldr	r6, [sp, #4]
 800410a:	0032      	movs	r2, r6
 800410c:	9903      	ldr	r1, [sp, #12]
 800410e:	6820      	ldr	r0, [r4, #0]
 8004110:	f000 fa9e 	bl	8004650 <memmove>
 8004114:	68a3      	ldr	r3, [r4, #8]
 8004116:	2000      	movs	r0, #0
 8004118:	1b9b      	subs	r3, r3, r6
 800411a:	60a3      	str	r3, [r4, #8]
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	199e      	adds	r6, r3, r6
 8004120:	6026      	str	r6, [r4, #0]
 8004122:	e7da      	b.n	80040da <__ssputs_r+0x5e>
 8004124:	002a      	movs	r2, r5
 8004126:	0038      	movs	r0, r7
 8004128:	f000 fb4e 	bl	80047c8 <_realloc_r>
 800412c:	1e06      	subs	r6, r0, #0
 800412e:	d1e0      	bne.n	80040f2 <__ssputs_r+0x76>
 8004130:	6921      	ldr	r1, [r4, #16]
 8004132:	0038      	movs	r0, r7
 8004134:	f000 faa0 	bl	8004678 <_free_r>
 8004138:	e7c7      	b.n	80040ca <__ssputs_r+0x4e>
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	fffffb7f 	.word	0xfffffb7f

08004140 <_svfiprintf_r>:
 8004140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004142:	b0a1      	sub	sp, #132	; 0x84
 8004144:	9003      	str	r0, [sp, #12]
 8004146:	001d      	movs	r5, r3
 8004148:	898b      	ldrh	r3, [r1, #12]
 800414a:	000f      	movs	r7, r1
 800414c:	0016      	movs	r6, r2
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	d511      	bpl.n	8004176 <_svfiprintf_r+0x36>
 8004152:	690b      	ldr	r3, [r1, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10e      	bne.n	8004176 <_svfiprintf_r+0x36>
 8004158:	2140      	movs	r1, #64	; 0x40
 800415a:	f000 fad7 	bl	800470c <_malloc_r>
 800415e:	6038      	str	r0, [r7, #0]
 8004160:	6138      	str	r0, [r7, #16]
 8004162:	2800      	cmp	r0, #0
 8004164:	d105      	bne.n	8004172 <_svfiprintf_r+0x32>
 8004166:	230c      	movs	r3, #12
 8004168:	9a03      	ldr	r2, [sp, #12]
 800416a:	3801      	subs	r0, #1
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	b021      	add	sp, #132	; 0x84
 8004170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	2300      	movs	r3, #0
 8004178:	ac08      	add	r4, sp, #32
 800417a:	6163      	str	r3, [r4, #20]
 800417c:	3320      	adds	r3, #32
 800417e:	7663      	strb	r3, [r4, #25]
 8004180:	3310      	adds	r3, #16
 8004182:	76a3      	strb	r3, [r4, #26]
 8004184:	9507      	str	r5, [sp, #28]
 8004186:	0035      	movs	r5, r6
 8004188:	782b      	ldrb	r3, [r5, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <_svfiprintf_r+0x52>
 800418e:	2b25      	cmp	r3, #37	; 0x25
 8004190:	d146      	bne.n	8004220 <_svfiprintf_r+0xe0>
 8004192:	1bab      	subs	r3, r5, r6
 8004194:	9305      	str	r3, [sp, #20]
 8004196:	d00c      	beq.n	80041b2 <_svfiprintf_r+0x72>
 8004198:	0032      	movs	r2, r6
 800419a:	0039      	movs	r1, r7
 800419c:	9803      	ldr	r0, [sp, #12]
 800419e:	f7ff ff6d 	bl	800407c <__ssputs_r>
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	d100      	bne.n	80041a8 <_svfiprintf_r+0x68>
 80041a6:	e0ae      	b.n	8004306 <_svfiprintf_r+0x1c6>
 80041a8:	6962      	ldr	r2, [r4, #20]
 80041aa:	9b05      	ldr	r3, [sp, #20]
 80041ac:	4694      	mov	ip, r2
 80041ae:	4463      	add	r3, ip
 80041b0:	6163      	str	r3, [r4, #20]
 80041b2:	782b      	ldrb	r3, [r5, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d100      	bne.n	80041ba <_svfiprintf_r+0x7a>
 80041b8:	e0a5      	b.n	8004306 <_svfiprintf_r+0x1c6>
 80041ba:	2201      	movs	r2, #1
 80041bc:	2300      	movs	r3, #0
 80041be:	4252      	negs	r2, r2
 80041c0:	6062      	str	r2, [r4, #4]
 80041c2:	a904      	add	r1, sp, #16
 80041c4:	3254      	adds	r2, #84	; 0x54
 80041c6:	1852      	adds	r2, r2, r1
 80041c8:	1c6e      	adds	r6, r5, #1
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	60e3      	str	r3, [r4, #12]
 80041ce:	60a3      	str	r3, [r4, #8]
 80041d0:	7013      	strb	r3, [r2, #0]
 80041d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80041d4:	7831      	ldrb	r1, [r6, #0]
 80041d6:	2205      	movs	r2, #5
 80041d8:	4853      	ldr	r0, [pc, #332]	; (8004328 <_svfiprintf_r+0x1e8>)
 80041da:	f000 fa25 	bl	8004628 <memchr>
 80041de:	1c75      	adds	r5, r6, #1
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d11f      	bne.n	8004224 <_svfiprintf_r+0xe4>
 80041e4:	6822      	ldr	r2, [r4, #0]
 80041e6:	06d3      	lsls	r3, r2, #27
 80041e8:	d504      	bpl.n	80041f4 <_svfiprintf_r+0xb4>
 80041ea:	2353      	movs	r3, #83	; 0x53
 80041ec:	a904      	add	r1, sp, #16
 80041ee:	185b      	adds	r3, r3, r1
 80041f0:	2120      	movs	r1, #32
 80041f2:	7019      	strb	r1, [r3, #0]
 80041f4:	0713      	lsls	r3, r2, #28
 80041f6:	d504      	bpl.n	8004202 <_svfiprintf_r+0xc2>
 80041f8:	2353      	movs	r3, #83	; 0x53
 80041fa:	a904      	add	r1, sp, #16
 80041fc:	185b      	adds	r3, r3, r1
 80041fe:	212b      	movs	r1, #43	; 0x2b
 8004200:	7019      	strb	r1, [r3, #0]
 8004202:	7833      	ldrb	r3, [r6, #0]
 8004204:	2b2a      	cmp	r3, #42	; 0x2a
 8004206:	d016      	beq.n	8004236 <_svfiprintf_r+0xf6>
 8004208:	0035      	movs	r5, r6
 800420a:	2100      	movs	r1, #0
 800420c:	200a      	movs	r0, #10
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	782a      	ldrb	r2, [r5, #0]
 8004212:	1c6e      	adds	r6, r5, #1
 8004214:	3a30      	subs	r2, #48	; 0x30
 8004216:	2a09      	cmp	r2, #9
 8004218:	d94e      	bls.n	80042b8 <_svfiprintf_r+0x178>
 800421a:	2900      	cmp	r1, #0
 800421c:	d018      	beq.n	8004250 <_svfiprintf_r+0x110>
 800421e:	e010      	b.n	8004242 <_svfiprintf_r+0x102>
 8004220:	3501      	adds	r5, #1
 8004222:	e7b1      	b.n	8004188 <_svfiprintf_r+0x48>
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <_svfiprintf_r+0x1e8>)
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	1ac0      	subs	r0, r0, r3
 800422a:	2301      	movs	r3, #1
 800422c:	4083      	lsls	r3, r0
 800422e:	4313      	orrs	r3, r2
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	002e      	movs	r6, r5
 8004234:	e7ce      	b.n	80041d4 <_svfiprintf_r+0x94>
 8004236:	9b07      	ldr	r3, [sp, #28]
 8004238:	1d19      	adds	r1, r3, #4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	9107      	str	r1, [sp, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db01      	blt.n	8004246 <_svfiprintf_r+0x106>
 8004242:	930b      	str	r3, [sp, #44]	; 0x2c
 8004244:	e004      	b.n	8004250 <_svfiprintf_r+0x110>
 8004246:	425b      	negs	r3, r3
 8004248:	60e3      	str	r3, [r4, #12]
 800424a:	2302      	movs	r3, #2
 800424c:	4313      	orrs	r3, r2
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	782b      	ldrb	r3, [r5, #0]
 8004252:	2b2e      	cmp	r3, #46	; 0x2e
 8004254:	d10a      	bne.n	800426c <_svfiprintf_r+0x12c>
 8004256:	786b      	ldrb	r3, [r5, #1]
 8004258:	2b2a      	cmp	r3, #42	; 0x2a
 800425a:	d135      	bne.n	80042c8 <_svfiprintf_r+0x188>
 800425c:	9b07      	ldr	r3, [sp, #28]
 800425e:	3502      	adds	r5, #2
 8004260:	1d1a      	adds	r2, r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	9207      	str	r2, [sp, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	db2b      	blt.n	80042c2 <_svfiprintf_r+0x182>
 800426a:	9309      	str	r3, [sp, #36]	; 0x24
 800426c:	4e2f      	ldr	r6, [pc, #188]	; (800432c <_svfiprintf_r+0x1ec>)
 800426e:	7829      	ldrb	r1, [r5, #0]
 8004270:	2203      	movs	r2, #3
 8004272:	0030      	movs	r0, r6
 8004274:	f000 f9d8 	bl	8004628 <memchr>
 8004278:	2800      	cmp	r0, #0
 800427a:	d006      	beq.n	800428a <_svfiprintf_r+0x14a>
 800427c:	2340      	movs	r3, #64	; 0x40
 800427e:	1b80      	subs	r0, r0, r6
 8004280:	4083      	lsls	r3, r0
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	3501      	adds	r5, #1
 8004286:	4313      	orrs	r3, r2
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	7829      	ldrb	r1, [r5, #0]
 800428c:	2206      	movs	r2, #6
 800428e:	4828      	ldr	r0, [pc, #160]	; (8004330 <_svfiprintf_r+0x1f0>)
 8004290:	1c6e      	adds	r6, r5, #1
 8004292:	7621      	strb	r1, [r4, #24]
 8004294:	f000 f9c8 	bl	8004628 <memchr>
 8004298:	2800      	cmp	r0, #0
 800429a:	d03c      	beq.n	8004316 <_svfiprintf_r+0x1d6>
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <_svfiprintf_r+0x1f4>)
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d125      	bne.n	80042ee <_svfiprintf_r+0x1ae>
 80042a2:	2207      	movs	r2, #7
 80042a4:	9b07      	ldr	r3, [sp, #28]
 80042a6:	3307      	adds	r3, #7
 80042a8:	4393      	bics	r3, r2
 80042aa:	3308      	adds	r3, #8
 80042ac:	9307      	str	r3, [sp, #28]
 80042ae:	6963      	ldr	r3, [r4, #20]
 80042b0:	9a04      	ldr	r2, [sp, #16]
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	6163      	str	r3, [r4, #20]
 80042b6:	e766      	b.n	8004186 <_svfiprintf_r+0x46>
 80042b8:	4343      	muls	r3, r0
 80042ba:	2101      	movs	r1, #1
 80042bc:	189b      	adds	r3, r3, r2
 80042be:	0035      	movs	r5, r6
 80042c0:	e7a6      	b.n	8004210 <_svfiprintf_r+0xd0>
 80042c2:	2301      	movs	r3, #1
 80042c4:	425b      	negs	r3, r3
 80042c6:	e7d0      	b.n	800426a <_svfiprintf_r+0x12a>
 80042c8:	2300      	movs	r3, #0
 80042ca:	200a      	movs	r0, #10
 80042cc:	001a      	movs	r2, r3
 80042ce:	3501      	adds	r5, #1
 80042d0:	6063      	str	r3, [r4, #4]
 80042d2:	7829      	ldrb	r1, [r5, #0]
 80042d4:	1c6e      	adds	r6, r5, #1
 80042d6:	3930      	subs	r1, #48	; 0x30
 80042d8:	2909      	cmp	r1, #9
 80042da:	d903      	bls.n	80042e4 <_svfiprintf_r+0x1a4>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0c5      	beq.n	800426c <_svfiprintf_r+0x12c>
 80042e0:	9209      	str	r2, [sp, #36]	; 0x24
 80042e2:	e7c3      	b.n	800426c <_svfiprintf_r+0x12c>
 80042e4:	4342      	muls	r2, r0
 80042e6:	2301      	movs	r3, #1
 80042e8:	1852      	adds	r2, r2, r1
 80042ea:	0035      	movs	r5, r6
 80042ec:	e7f1      	b.n	80042d2 <_svfiprintf_r+0x192>
 80042ee:	ab07      	add	r3, sp, #28
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	003a      	movs	r2, r7
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <_svfiprintf_r+0x1f8>)
 80042f6:	0021      	movs	r1, r4
 80042f8:	9803      	ldr	r0, [sp, #12]
 80042fa:	e000      	b.n	80042fe <_svfiprintf_r+0x1be>
 80042fc:	bf00      	nop
 80042fe:	9004      	str	r0, [sp, #16]
 8004300:	9b04      	ldr	r3, [sp, #16]
 8004302:	3301      	adds	r3, #1
 8004304:	d1d3      	bne.n	80042ae <_svfiprintf_r+0x16e>
 8004306:	89bb      	ldrh	r3, [r7, #12]
 8004308:	980d      	ldr	r0, [sp, #52]	; 0x34
 800430a:	065b      	lsls	r3, r3, #25
 800430c:	d400      	bmi.n	8004310 <_svfiprintf_r+0x1d0>
 800430e:	e72e      	b.n	800416e <_svfiprintf_r+0x2e>
 8004310:	2001      	movs	r0, #1
 8004312:	4240      	negs	r0, r0
 8004314:	e72b      	b.n	800416e <_svfiprintf_r+0x2e>
 8004316:	ab07      	add	r3, sp, #28
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	003a      	movs	r2, r7
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <_svfiprintf_r+0x1f8>)
 800431e:	0021      	movs	r1, r4
 8004320:	9803      	ldr	r0, [sp, #12]
 8004322:	f000 f879 	bl	8004418 <_printf_i>
 8004326:	e7ea      	b.n	80042fe <_svfiprintf_r+0x1be>
 8004328:	08004bd9 	.word	0x08004bd9
 800432c:	08004bdf 	.word	0x08004bdf
 8004330:	08004be3 	.word	0x08004be3
 8004334:	00000000 	.word	0x00000000
 8004338:	0800407d 	.word	0x0800407d

0800433c <_printf_common>:
 800433c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433e:	0015      	movs	r5, r2
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	688a      	ldr	r2, [r1, #8]
 8004344:	690b      	ldr	r3, [r1, #16]
 8004346:	9000      	str	r0, [sp, #0]
 8004348:	000c      	movs	r4, r1
 800434a:	4293      	cmp	r3, r2
 800434c:	da00      	bge.n	8004350 <_printf_common+0x14>
 800434e:	0013      	movs	r3, r2
 8004350:	0022      	movs	r2, r4
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	3243      	adds	r2, #67	; 0x43
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	2a00      	cmp	r2, #0
 800435a:	d001      	beq.n	8004360 <_printf_common+0x24>
 800435c:	3301      	adds	r3, #1
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	069b      	lsls	r3, r3, #26
 8004364:	d502      	bpl.n	800436c <_printf_common+0x30>
 8004366:	682b      	ldr	r3, [r5, #0]
 8004368:	3302      	adds	r3, #2
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	2706      	movs	r7, #6
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	401f      	ands	r7, r3
 8004372:	d027      	beq.n	80043c4 <_printf_common+0x88>
 8004374:	0023      	movs	r3, r4
 8004376:	3343      	adds	r3, #67	; 0x43
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	4193      	sbcs	r3, r2
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	0692      	lsls	r2, r2, #26
 8004382:	d430      	bmi.n	80043e6 <_printf_common+0xaa>
 8004384:	0022      	movs	r2, r4
 8004386:	9901      	ldr	r1, [sp, #4]
 8004388:	3243      	adds	r2, #67	; 0x43
 800438a:	9800      	ldr	r0, [sp, #0]
 800438c:	9e08      	ldr	r6, [sp, #32]
 800438e:	47b0      	blx	r6
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d025      	beq.n	80043e0 <_printf_common+0xa4>
 8004394:	2306      	movs	r3, #6
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	682a      	ldr	r2, [r5, #0]
 800439a:	68e1      	ldr	r1, [r4, #12]
 800439c:	4003      	ands	r3, r0
 800439e:	2500      	movs	r5, #0
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d103      	bne.n	80043ac <_printf_common+0x70>
 80043a4:	1a8d      	subs	r5, r1, r2
 80043a6:	43eb      	mvns	r3, r5
 80043a8:	17db      	asrs	r3, r3, #31
 80043aa:	401d      	ands	r5, r3
 80043ac:	68a3      	ldr	r3, [r4, #8]
 80043ae:	6922      	ldr	r2, [r4, #16]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	dd01      	ble.n	80043b8 <_printf_common+0x7c>
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	18ed      	adds	r5, r5, r3
 80043b8:	2700      	movs	r7, #0
 80043ba:	42bd      	cmp	r5, r7
 80043bc:	d120      	bne.n	8004400 <_printf_common+0xc4>
 80043be:	2000      	movs	r0, #0
 80043c0:	e010      	b.n	80043e4 <_printf_common+0xa8>
 80043c2:	3701      	adds	r7, #1
 80043c4:	68e3      	ldr	r3, [r4, #12]
 80043c6:	682a      	ldr	r2, [r5, #0]
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	42bb      	cmp	r3, r7
 80043cc:	ddd2      	ble.n	8004374 <_printf_common+0x38>
 80043ce:	0022      	movs	r2, r4
 80043d0:	2301      	movs	r3, #1
 80043d2:	3219      	adds	r2, #25
 80043d4:	9901      	ldr	r1, [sp, #4]
 80043d6:	9800      	ldr	r0, [sp, #0]
 80043d8:	9e08      	ldr	r6, [sp, #32]
 80043da:	47b0      	blx	r6
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d1f0      	bne.n	80043c2 <_printf_common+0x86>
 80043e0:	2001      	movs	r0, #1
 80043e2:	4240      	negs	r0, r0
 80043e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043e6:	2030      	movs	r0, #48	; 0x30
 80043e8:	18e1      	adds	r1, r4, r3
 80043ea:	3143      	adds	r1, #67	; 0x43
 80043ec:	7008      	strb	r0, [r1, #0]
 80043ee:	0021      	movs	r1, r4
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	3145      	adds	r1, #69	; 0x45
 80043f4:	7809      	ldrb	r1, [r1, #0]
 80043f6:	18a2      	adds	r2, r4, r2
 80043f8:	3243      	adds	r2, #67	; 0x43
 80043fa:	3302      	adds	r3, #2
 80043fc:	7011      	strb	r1, [r2, #0]
 80043fe:	e7c1      	b.n	8004384 <_printf_common+0x48>
 8004400:	0022      	movs	r2, r4
 8004402:	2301      	movs	r3, #1
 8004404:	321a      	adds	r2, #26
 8004406:	9901      	ldr	r1, [sp, #4]
 8004408:	9800      	ldr	r0, [sp, #0]
 800440a:	9e08      	ldr	r6, [sp, #32]
 800440c:	47b0      	blx	r6
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	d0e6      	beq.n	80043e0 <_printf_common+0xa4>
 8004412:	3701      	adds	r7, #1
 8004414:	e7d1      	b.n	80043ba <_printf_common+0x7e>
	...

08004418 <_printf_i>:
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	9204      	str	r2, [sp, #16]
 800441e:	000a      	movs	r2, r1
 8004420:	3243      	adds	r2, #67	; 0x43
 8004422:	9305      	str	r3, [sp, #20]
 8004424:	9003      	str	r0, [sp, #12]
 8004426:	9202      	str	r2, [sp, #8]
 8004428:	7e0a      	ldrb	r2, [r1, #24]
 800442a:	000c      	movs	r4, r1
 800442c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800442e:	2a6e      	cmp	r2, #110	; 0x6e
 8004430:	d100      	bne.n	8004434 <_printf_i+0x1c>
 8004432:	e086      	b.n	8004542 <_printf_i+0x12a>
 8004434:	d81f      	bhi.n	8004476 <_printf_i+0x5e>
 8004436:	2a63      	cmp	r2, #99	; 0x63
 8004438:	d033      	beq.n	80044a2 <_printf_i+0x8a>
 800443a:	d808      	bhi.n	800444e <_printf_i+0x36>
 800443c:	2a00      	cmp	r2, #0
 800443e:	d100      	bne.n	8004442 <_printf_i+0x2a>
 8004440:	e08c      	b.n	800455c <_printf_i+0x144>
 8004442:	2a58      	cmp	r2, #88	; 0x58
 8004444:	d04d      	beq.n	80044e2 <_printf_i+0xca>
 8004446:	0025      	movs	r5, r4
 8004448:	3542      	adds	r5, #66	; 0x42
 800444a:	702a      	strb	r2, [r5, #0]
 800444c:	e030      	b.n	80044b0 <_printf_i+0x98>
 800444e:	2a64      	cmp	r2, #100	; 0x64
 8004450:	d001      	beq.n	8004456 <_printf_i+0x3e>
 8004452:	2a69      	cmp	r2, #105	; 0x69
 8004454:	d1f7      	bne.n	8004446 <_printf_i+0x2e>
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	6825      	ldr	r5, [r4, #0]
 800445a:	1d0a      	adds	r2, r1, #4
 800445c:	0628      	lsls	r0, r5, #24
 800445e:	d529      	bpl.n	80044b4 <_printf_i+0x9c>
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	2800      	cmp	r0, #0
 8004466:	da03      	bge.n	8004470 <_printf_i+0x58>
 8004468:	232d      	movs	r3, #45	; 0x2d
 800446a:	9a02      	ldr	r2, [sp, #8]
 800446c:	4240      	negs	r0, r0
 800446e:	7013      	strb	r3, [r2, #0]
 8004470:	4e6b      	ldr	r6, [pc, #428]	; (8004620 <_printf_i+0x208>)
 8004472:	270a      	movs	r7, #10
 8004474:	e04f      	b.n	8004516 <_printf_i+0xfe>
 8004476:	2a73      	cmp	r2, #115	; 0x73
 8004478:	d074      	beq.n	8004564 <_printf_i+0x14c>
 800447a:	d808      	bhi.n	800448e <_printf_i+0x76>
 800447c:	2a6f      	cmp	r2, #111	; 0x6f
 800447e:	d01f      	beq.n	80044c0 <_printf_i+0xa8>
 8004480:	2a70      	cmp	r2, #112	; 0x70
 8004482:	d1e0      	bne.n	8004446 <_printf_i+0x2e>
 8004484:	2220      	movs	r2, #32
 8004486:	6809      	ldr	r1, [r1, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	6022      	str	r2, [r4, #0]
 800448c:	e003      	b.n	8004496 <_printf_i+0x7e>
 800448e:	2a75      	cmp	r2, #117	; 0x75
 8004490:	d016      	beq.n	80044c0 <_printf_i+0xa8>
 8004492:	2a78      	cmp	r2, #120	; 0x78
 8004494:	d1d7      	bne.n	8004446 <_printf_i+0x2e>
 8004496:	0022      	movs	r2, r4
 8004498:	2178      	movs	r1, #120	; 0x78
 800449a:	3245      	adds	r2, #69	; 0x45
 800449c:	7011      	strb	r1, [r2, #0]
 800449e:	4e61      	ldr	r6, [pc, #388]	; (8004624 <_printf_i+0x20c>)
 80044a0:	e022      	b.n	80044e8 <_printf_i+0xd0>
 80044a2:	0025      	movs	r5, r4
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	3542      	adds	r5, #66	; 0x42
 80044a8:	1d11      	adds	r1, r2, #4
 80044aa:	6019      	str	r1, [r3, #0]
 80044ac:	6813      	ldr	r3, [r2, #0]
 80044ae:	702b      	strb	r3, [r5, #0]
 80044b0:	2301      	movs	r3, #1
 80044b2:	e065      	b.n	8004580 <_printf_i+0x168>
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	0669      	lsls	r1, r5, #25
 80044ba:	d5d3      	bpl.n	8004464 <_printf_i+0x4c>
 80044bc:	b200      	sxth	r0, r0
 80044be:	e7d1      	b.n	8004464 <_printf_i+0x4c>
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	6825      	ldr	r5, [r4, #0]
 80044c4:	1d08      	adds	r0, r1, #4
 80044c6:	6018      	str	r0, [r3, #0]
 80044c8:	6808      	ldr	r0, [r1, #0]
 80044ca:	062e      	lsls	r6, r5, #24
 80044cc:	d505      	bpl.n	80044da <_printf_i+0xc2>
 80044ce:	4e54      	ldr	r6, [pc, #336]	; (8004620 <_printf_i+0x208>)
 80044d0:	2708      	movs	r7, #8
 80044d2:	2a6f      	cmp	r2, #111	; 0x6f
 80044d4:	d01b      	beq.n	800450e <_printf_i+0xf6>
 80044d6:	270a      	movs	r7, #10
 80044d8:	e019      	b.n	800450e <_printf_i+0xf6>
 80044da:	066d      	lsls	r5, r5, #25
 80044dc:	d5f7      	bpl.n	80044ce <_printf_i+0xb6>
 80044de:	b280      	uxth	r0, r0
 80044e0:	e7f5      	b.n	80044ce <_printf_i+0xb6>
 80044e2:	3145      	adds	r1, #69	; 0x45
 80044e4:	4e4e      	ldr	r6, [pc, #312]	; (8004620 <_printf_i+0x208>)
 80044e6:	700a      	strb	r2, [r1, #0]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	1d01      	adds	r1, r0, #4
 80044ee:	6800      	ldr	r0, [r0, #0]
 80044f0:	6019      	str	r1, [r3, #0]
 80044f2:	0615      	lsls	r5, r2, #24
 80044f4:	d521      	bpl.n	800453a <_printf_i+0x122>
 80044f6:	07d3      	lsls	r3, r2, #31
 80044f8:	d502      	bpl.n	8004500 <_printf_i+0xe8>
 80044fa:	2320      	movs	r3, #32
 80044fc:	431a      	orrs	r2, r3
 80044fe:	6022      	str	r2, [r4, #0]
 8004500:	2710      	movs	r7, #16
 8004502:	2800      	cmp	r0, #0
 8004504:	d103      	bne.n	800450e <_printf_i+0xf6>
 8004506:	2320      	movs	r3, #32
 8004508:	6822      	ldr	r2, [r4, #0]
 800450a:	439a      	bics	r2, r3
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	0023      	movs	r3, r4
 8004510:	2200      	movs	r2, #0
 8004512:	3343      	adds	r3, #67	; 0x43
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	6863      	ldr	r3, [r4, #4]
 8004518:	60a3      	str	r3, [r4, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db58      	blt.n	80045d0 <_printf_i+0x1b8>
 800451e:	2204      	movs	r2, #4
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	4391      	bics	r1, r2
 8004524:	6021      	str	r1, [r4, #0]
 8004526:	2800      	cmp	r0, #0
 8004528:	d154      	bne.n	80045d4 <_printf_i+0x1bc>
 800452a:	9d02      	ldr	r5, [sp, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d05a      	beq.n	80045e6 <_printf_i+0x1ce>
 8004530:	0025      	movs	r5, r4
 8004532:	7833      	ldrb	r3, [r6, #0]
 8004534:	3542      	adds	r5, #66	; 0x42
 8004536:	702b      	strb	r3, [r5, #0]
 8004538:	e055      	b.n	80045e6 <_printf_i+0x1ce>
 800453a:	0655      	lsls	r5, r2, #25
 800453c:	d5db      	bpl.n	80044f6 <_printf_i+0xde>
 800453e:	b280      	uxth	r0, r0
 8004540:	e7d9      	b.n	80044f6 <_printf_i+0xde>
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	680d      	ldr	r5, [r1, #0]
 8004546:	1d10      	adds	r0, r2, #4
 8004548:	6949      	ldr	r1, [r1, #20]
 800454a:	6018      	str	r0, [r3, #0]
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	062e      	lsls	r6, r5, #24
 8004550:	d501      	bpl.n	8004556 <_printf_i+0x13e>
 8004552:	6019      	str	r1, [r3, #0]
 8004554:	e002      	b.n	800455c <_printf_i+0x144>
 8004556:	066d      	lsls	r5, r5, #25
 8004558:	d5fb      	bpl.n	8004552 <_printf_i+0x13a>
 800455a:	8019      	strh	r1, [r3, #0]
 800455c:	2300      	movs	r3, #0
 800455e:	9d02      	ldr	r5, [sp, #8]
 8004560:	6123      	str	r3, [r4, #16]
 8004562:	e04f      	b.n	8004604 <_printf_i+0x1ec>
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	1d11      	adds	r1, r2, #4
 8004568:	6019      	str	r1, [r3, #0]
 800456a:	6815      	ldr	r5, [r2, #0]
 800456c:	2100      	movs	r1, #0
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	0028      	movs	r0, r5
 8004572:	f000 f859 	bl	8004628 <memchr>
 8004576:	2800      	cmp	r0, #0
 8004578:	d001      	beq.n	800457e <_printf_i+0x166>
 800457a:	1b40      	subs	r0, r0, r5
 800457c:	6060      	str	r0, [r4, #4]
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	2300      	movs	r3, #0
 8004584:	9a02      	ldr	r2, [sp, #8]
 8004586:	7013      	strb	r3, [r2, #0]
 8004588:	e03c      	b.n	8004604 <_printf_i+0x1ec>
 800458a:	6923      	ldr	r3, [r4, #16]
 800458c:	002a      	movs	r2, r5
 800458e:	9904      	ldr	r1, [sp, #16]
 8004590:	9803      	ldr	r0, [sp, #12]
 8004592:	9d05      	ldr	r5, [sp, #20]
 8004594:	47a8      	blx	r5
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	d03e      	beq.n	8004618 <_printf_i+0x200>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	079b      	lsls	r3, r3, #30
 800459e:	d415      	bmi.n	80045cc <_printf_i+0x1b4>
 80045a0:	9b07      	ldr	r3, [sp, #28]
 80045a2:	68e0      	ldr	r0, [r4, #12]
 80045a4:	4298      	cmp	r0, r3
 80045a6:	da39      	bge.n	800461c <_printf_i+0x204>
 80045a8:	0018      	movs	r0, r3
 80045aa:	e037      	b.n	800461c <_printf_i+0x204>
 80045ac:	0022      	movs	r2, r4
 80045ae:	2301      	movs	r3, #1
 80045b0:	3219      	adds	r2, #25
 80045b2:	9904      	ldr	r1, [sp, #16]
 80045b4:	9803      	ldr	r0, [sp, #12]
 80045b6:	9e05      	ldr	r6, [sp, #20]
 80045b8:	47b0      	blx	r6
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	d02c      	beq.n	8004618 <_printf_i+0x200>
 80045be:	3501      	adds	r5, #1
 80045c0:	68e3      	ldr	r3, [r4, #12]
 80045c2:	9a07      	ldr	r2, [sp, #28]
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	42ab      	cmp	r3, r5
 80045c8:	dcf0      	bgt.n	80045ac <_printf_i+0x194>
 80045ca:	e7e9      	b.n	80045a0 <_printf_i+0x188>
 80045cc:	2500      	movs	r5, #0
 80045ce:	e7f7      	b.n	80045c0 <_printf_i+0x1a8>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d0ad      	beq.n	8004530 <_printf_i+0x118>
 80045d4:	9d02      	ldr	r5, [sp, #8]
 80045d6:	0039      	movs	r1, r7
 80045d8:	f7fb fe1c 	bl	8000214 <__aeabi_uidivmod>
 80045dc:	5c73      	ldrb	r3, [r6, r1]
 80045de:	3d01      	subs	r5, #1
 80045e0:	702b      	strb	r3, [r5, #0]
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1f7      	bne.n	80045d6 <_printf_i+0x1be>
 80045e6:	2f08      	cmp	r7, #8
 80045e8:	d109      	bne.n	80045fe <_printf_i+0x1e6>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	07db      	lsls	r3, r3, #31
 80045ee:	d506      	bpl.n	80045fe <_printf_i+0x1e6>
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	6922      	ldr	r2, [r4, #16]
 80045f4:	4293      	cmp	r3, r2
 80045f6:	dc02      	bgt.n	80045fe <_printf_i+0x1e6>
 80045f8:	2330      	movs	r3, #48	; 0x30
 80045fa:	3d01      	subs	r5, #1
 80045fc:	702b      	strb	r3, [r5, #0]
 80045fe:	9b02      	ldr	r3, [sp, #8]
 8004600:	1b5b      	subs	r3, r3, r5
 8004602:	6123      	str	r3, [r4, #16]
 8004604:	9b05      	ldr	r3, [sp, #20]
 8004606:	aa07      	add	r2, sp, #28
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	0021      	movs	r1, r4
 800460c:	9b04      	ldr	r3, [sp, #16]
 800460e:	9803      	ldr	r0, [sp, #12]
 8004610:	f7ff fe94 	bl	800433c <_printf_common>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d1b8      	bne.n	800458a <_printf_i+0x172>
 8004618:	2001      	movs	r0, #1
 800461a:	4240      	negs	r0, r0
 800461c:	b009      	add	sp, #36	; 0x24
 800461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004620:	08004bea 	.word	0x08004bea
 8004624:	08004bfb 	.word	0x08004bfb

08004628 <memchr>:
 8004628:	b2c9      	uxtb	r1, r1
 800462a:	1882      	adds	r2, r0, r2
 800462c:	4290      	cmp	r0, r2
 800462e:	d101      	bne.n	8004634 <memchr+0xc>
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr
 8004634:	7803      	ldrb	r3, [r0, #0]
 8004636:	428b      	cmp	r3, r1
 8004638:	d0fb      	beq.n	8004632 <memchr+0xa>
 800463a:	3001      	adds	r0, #1
 800463c:	e7f6      	b.n	800462c <memchr+0x4>

0800463e <memcpy>:
 800463e:	2300      	movs	r3, #0
 8004640:	b510      	push	{r4, lr}
 8004642:	429a      	cmp	r2, r3
 8004644:	d100      	bne.n	8004648 <memcpy+0xa>
 8004646:	bd10      	pop	{r4, pc}
 8004648:	5ccc      	ldrb	r4, [r1, r3]
 800464a:	54c4      	strb	r4, [r0, r3]
 800464c:	3301      	adds	r3, #1
 800464e:	e7f8      	b.n	8004642 <memcpy+0x4>

08004650 <memmove>:
 8004650:	b510      	push	{r4, lr}
 8004652:	4288      	cmp	r0, r1
 8004654:	d902      	bls.n	800465c <memmove+0xc>
 8004656:	188b      	adds	r3, r1, r2
 8004658:	4298      	cmp	r0, r3
 800465a:	d303      	bcc.n	8004664 <memmove+0x14>
 800465c:	2300      	movs	r3, #0
 800465e:	e007      	b.n	8004670 <memmove+0x20>
 8004660:	5c8b      	ldrb	r3, [r1, r2]
 8004662:	5483      	strb	r3, [r0, r2]
 8004664:	3a01      	subs	r2, #1
 8004666:	d2fb      	bcs.n	8004660 <memmove+0x10>
 8004668:	bd10      	pop	{r4, pc}
 800466a:	5ccc      	ldrb	r4, [r1, r3]
 800466c:	54c4      	strb	r4, [r0, r3]
 800466e:	3301      	adds	r3, #1
 8004670:	429a      	cmp	r2, r3
 8004672:	d1fa      	bne.n	800466a <memmove+0x1a>
 8004674:	e7f8      	b.n	8004668 <memmove+0x18>
	...

08004678 <_free_r>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	0005      	movs	r5, r0
 800467c:	2900      	cmp	r1, #0
 800467e:	d010      	beq.n	80046a2 <_free_r+0x2a>
 8004680:	1f0c      	subs	r4, r1, #4
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	da00      	bge.n	800468a <_free_r+0x12>
 8004688:	18e4      	adds	r4, r4, r3
 800468a:	0028      	movs	r0, r5
 800468c:	f000 f8d4 	bl	8004838 <__malloc_lock>
 8004690:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <_free_r+0x90>)
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <_free_r+0x2c>
 8004698:	6063      	str	r3, [r4, #4]
 800469a:	6014      	str	r4, [r2, #0]
 800469c:	0028      	movs	r0, r5
 800469e:	f000 f8cc 	bl	800483a <__malloc_unlock>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d909      	bls.n	80046bc <_free_r+0x44>
 80046a8:	6821      	ldr	r1, [r4, #0]
 80046aa:	1860      	adds	r0, r4, r1
 80046ac:	4283      	cmp	r3, r0
 80046ae:	d1f3      	bne.n	8004698 <_free_r+0x20>
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	1841      	adds	r1, r0, r1
 80046b6:	6021      	str	r1, [r4, #0]
 80046b8:	e7ee      	b.n	8004698 <_free_r+0x20>
 80046ba:	0013      	movs	r3, r2
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d001      	beq.n	80046c6 <_free_r+0x4e>
 80046c2:	42a2      	cmp	r2, r4
 80046c4:	d9f9      	bls.n	80046ba <_free_r+0x42>
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	1858      	adds	r0, r3, r1
 80046ca:	42a0      	cmp	r0, r4
 80046cc:	d10b      	bne.n	80046e6 <_free_r+0x6e>
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	1809      	adds	r1, r1, r0
 80046d2:	1858      	adds	r0, r3, r1
 80046d4:	6019      	str	r1, [r3, #0]
 80046d6:	4282      	cmp	r2, r0
 80046d8:	d1e0      	bne.n	800469c <_free_r+0x24>
 80046da:	6810      	ldr	r0, [r2, #0]
 80046dc:	6852      	ldr	r2, [r2, #4]
 80046de:	1841      	adds	r1, r0, r1
 80046e0:	6019      	str	r1, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	e7da      	b.n	800469c <_free_r+0x24>
 80046e6:	42a0      	cmp	r0, r4
 80046e8:	d902      	bls.n	80046f0 <_free_r+0x78>
 80046ea:	230c      	movs	r3, #12
 80046ec:	602b      	str	r3, [r5, #0]
 80046ee:	e7d5      	b.n	800469c <_free_r+0x24>
 80046f0:	6821      	ldr	r1, [r4, #0]
 80046f2:	1860      	adds	r0, r4, r1
 80046f4:	4282      	cmp	r2, r0
 80046f6:	d103      	bne.n	8004700 <_free_r+0x88>
 80046f8:	6810      	ldr	r0, [r2, #0]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	1841      	adds	r1, r0, r1
 80046fe:	6021      	str	r1, [r4, #0]
 8004700:	6062      	str	r2, [r4, #4]
 8004702:	605c      	str	r4, [r3, #4]
 8004704:	e7ca      	b.n	800469c <_free_r+0x24>
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	20000090 	.word	0x20000090

0800470c <_malloc_r>:
 800470c:	2303      	movs	r3, #3
 800470e:	b570      	push	{r4, r5, r6, lr}
 8004710:	1ccd      	adds	r5, r1, #3
 8004712:	439d      	bics	r5, r3
 8004714:	3508      	adds	r5, #8
 8004716:	0006      	movs	r6, r0
 8004718:	2d0c      	cmp	r5, #12
 800471a:	d21e      	bcs.n	800475a <_malloc_r+0x4e>
 800471c:	250c      	movs	r5, #12
 800471e:	42a9      	cmp	r1, r5
 8004720:	d81d      	bhi.n	800475e <_malloc_r+0x52>
 8004722:	0030      	movs	r0, r6
 8004724:	f000 f888 	bl	8004838 <__malloc_lock>
 8004728:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <_malloc_r+0xb4>)
 800472a:	6814      	ldr	r4, [r2, #0]
 800472c:	0021      	movs	r1, r4
 800472e:	2900      	cmp	r1, #0
 8004730:	d119      	bne.n	8004766 <_malloc_r+0x5a>
 8004732:	4c24      	ldr	r4, [pc, #144]	; (80047c4 <_malloc_r+0xb8>)
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <_malloc_r+0x36>
 800473a:	0030      	movs	r0, r6
 800473c:	f000 f86a 	bl	8004814 <_sbrk_r>
 8004740:	6020      	str	r0, [r4, #0]
 8004742:	0029      	movs	r1, r5
 8004744:	0030      	movs	r0, r6
 8004746:	f000 f865 	bl	8004814 <_sbrk_r>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	d12b      	bne.n	80047a6 <_malloc_r+0x9a>
 800474e:	230c      	movs	r3, #12
 8004750:	0030      	movs	r0, r6
 8004752:	6033      	str	r3, [r6, #0]
 8004754:	f000 f871 	bl	800483a <__malloc_unlock>
 8004758:	e003      	b.n	8004762 <_malloc_r+0x56>
 800475a:	2d00      	cmp	r5, #0
 800475c:	dadf      	bge.n	800471e <_malloc_r+0x12>
 800475e:	230c      	movs	r3, #12
 8004760:	6033      	str	r3, [r6, #0]
 8004762:	2000      	movs	r0, #0
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	680b      	ldr	r3, [r1, #0]
 8004768:	1b5b      	subs	r3, r3, r5
 800476a:	d419      	bmi.n	80047a0 <_malloc_r+0x94>
 800476c:	2b0b      	cmp	r3, #11
 800476e:	d903      	bls.n	8004778 <_malloc_r+0x6c>
 8004770:	600b      	str	r3, [r1, #0]
 8004772:	18cc      	adds	r4, r1, r3
 8004774:	6025      	str	r5, [r4, #0]
 8004776:	e003      	b.n	8004780 <_malloc_r+0x74>
 8004778:	684b      	ldr	r3, [r1, #4]
 800477a:	428c      	cmp	r4, r1
 800477c:	d10d      	bne.n	800479a <_malloc_r+0x8e>
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	0030      	movs	r0, r6
 8004782:	f000 f85a 	bl	800483a <__malloc_unlock>
 8004786:	0020      	movs	r0, r4
 8004788:	2207      	movs	r2, #7
 800478a:	300b      	adds	r0, #11
 800478c:	1d23      	adds	r3, r4, #4
 800478e:	4390      	bics	r0, r2
 8004790:	1ac3      	subs	r3, r0, r3
 8004792:	d0e7      	beq.n	8004764 <_malloc_r+0x58>
 8004794:	425a      	negs	r2, r3
 8004796:	50e2      	str	r2, [r4, r3]
 8004798:	e7e4      	b.n	8004764 <_malloc_r+0x58>
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	000c      	movs	r4, r1
 800479e:	e7ef      	b.n	8004780 <_malloc_r+0x74>
 80047a0:	000c      	movs	r4, r1
 80047a2:	6849      	ldr	r1, [r1, #4]
 80047a4:	e7c3      	b.n	800472e <_malloc_r+0x22>
 80047a6:	2303      	movs	r3, #3
 80047a8:	1cc4      	adds	r4, r0, #3
 80047aa:	439c      	bics	r4, r3
 80047ac:	42a0      	cmp	r0, r4
 80047ae:	d0e1      	beq.n	8004774 <_malloc_r+0x68>
 80047b0:	1a21      	subs	r1, r4, r0
 80047b2:	0030      	movs	r0, r6
 80047b4:	f000 f82e 	bl	8004814 <_sbrk_r>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d1db      	bne.n	8004774 <_malloc_r+0x68>
 80047bc:	e7c7      	b.n	800474e <_malloc_r+0x42>
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	20000090 	.word	0x20000090
 80047c4:	20000094 	.word	0x20000094

080047c8 <_realloc_r>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	0007      	movs	r7, r0
 80047cc:	000d      	movs	r5, r1
 80047ce:	0016      	movs	r6, r2
 80047d0:	2900      	cmp	r1, #0
 80047d2:	d105      	bne.n	80047e0 <_realloc_r+0x18>
 80047d4:	0011      	movs	r1, r2
 80047d6:	f7ff ff99 	bl	800470c <_malloc_r>
 80047da:	0004      	movs	r4, r0
 80047dc:	0020      	movs	r0, r4
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e0:	2a00      	cmp	r2, #0
 80047e2:	d103      	bne.n	80047ec <_realloc_r+0x24>
 80047e4:	f7ff ff48 	bl	8004678 <_free_r>
 80047e8:	0034      	movs	r4, r6
 80047ea:	e7f7      	b.n	80047dc <_realloc_r+0x14>
 80047ec:	f000 f826 	bl	800483c <_malloc_usable_size_r>
 80047f0:	002c      	movs	r4, r5
 80047f2:	42b0      	cmp	r0, r6
 80047f4:	d2f2      	bcs.n	80047dc <_realloc_r+0x14>
 80047f6:	0031      	movs	r1, r6
 80047f8:	0038      	movs	r0, r7
 80047fa:	f7ff ff87 	bl	800470c <_malloc_r>
 80047fe:	1e04      	subs	r4, r0, #0
 8004800:	d0ec      	beq.n	80047dc <_realloc_r+0x14>
 8004802:	0029      	movs	r1, r5
 8004804:	0032      	movs	r2, r6
 8004806:	f7ff ff1a 	bl	800463e <memcpy>
 800480a:	0029      	movs	r1, r5
 800480c:	0038      	movs	r0, r7
 800480e:	f7ff ff33 	bl	8004678 <_free_r>
 8004812:	e7e3      	b.n	80047dc <_realloc_r+0x14>

08004814 <_sbrk_r>:
 8004814:	2300      	movs	r3, #0
 8004816:	b570      	push	{r4, r5, r6, lr}
 8004818:	4c06      	ldr	r4, [pc, #24]	; (8004834 <_sbrk_r+0x20>)
 800481a:	0005      	movs	r5, r0
 800481c:	0008      	movs	r0, r1
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	f7fc ff10 	bl	8001644 <_sbrk>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d103      	bne.n	8004830 <_sbrk_r+0x1c>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d000      	beq.n	8004830 <_sbrk_r+0x1c>
 800482e:	602b      	str	r3, [r5, #0]
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	20000180 	.word	0x20000180

08004838 <__malloc_lock>:
 8004838:	4770      	bx	lr

0800483a <__malloc_unlock>:
 800483a:	4770      	bx	lr

0800483c <_malloc_usable_size_r>:
 800483c:	1f0b      	subs	r3, r1, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1f18      	subs	r0, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	da01      	bge.n	800484a <_malloc_usable_size_r+0xe>
 8004846:	580b      	ldr	r3, [r1, r0]
 8004848:	18c0      	adds	r0, r0, r3
 800484a:	4770      	bx	lr

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
